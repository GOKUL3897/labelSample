<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Blazor</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText">
            <summary>
            Specifies the class which contains barcode display text data and functionalities.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="200" Value="65213323" Type="BarcodeType.Code11" BackgroundColor="white" ForeColor="black" EnableCheckSum="true" >
              <BarcodeGeneratorDisplayText Text = "" Font="monospace" Size="25" Alignment="Alignment.Right" Position="TextPosition.Top" Visibility="true">
              <BarcodeTextMargin Left = "0" Top="0" Right="0" Bottom="0"></BarcodeTextMargin>
              </BarcodeGeneratorDisplayText>
            </SfBarcodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.ChildContent">
            <summary>
            Sets content for Barcode generator display text element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.Alignment">
            <summary>
            Defines the horizontal alignment of the text. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.Font">
            <summary>
            Defines the font style of the text. By default, it is set to monospace.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.Margin">
            <summary>
            It sets the space to be left between the text and its barcode. By default, it is set to 10 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.Position">
            <summary>
            Defines the position of the text. By default, it is set to Bottom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.Size">
            <summary>
            Defines the size of the text. By default, it is set to 20.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.Text">
            <summary>
            Sets the textual description of the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.Visibility">
            <summary>
            Defines the visibility of the text.  By default, it is set to true.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.BarcodeGeneratorDisplayText.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.BarcodeTextMargin">
            <summary>
            Specifies the space to be left from the display text of the barcode.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="150" Value="65213323" Type="BarcodeType.Code11">
             <BarcodeGeneratorDisplayText >
               <BarcodeTextMargin Left = "0" Top="20" Right="0" Bottom="0"></BarcodeTextMargin>
             </BarcodeGeneratorDisplayText>
            </SfBarcodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeTextMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the display text of the barcode. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeTextMargin.Left">
            <summary>
            It sets the space to be left from the left side of the display text of the barcode. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeTextMargin.Right">
            <summary>
            It sets the space to be left from the right side of the display text of the barcode. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeTextMargin.Top">
            <summary>
            It sets the space to be left from the top side of the display text of the barcode. By default, it is set to 0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.BarcodeTextMargin.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.BarcodeMargin">
            <summary>
            Specifies the space to be left from the barcode.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="150" Value="65213323" Type="BarcodeType.Code11" >
               <BarcodeMargin Left = "10" Top="10" Right="10" Bottom="10"></BarcodeMargin>
            </SfBarcodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeMargin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeMargin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeMargin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.BarcodeMargin.OnInitializedAsync">
            <summary>
            OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.BarcodeType">
            <summary>
            Represents the type of barcode to be generated.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="150" Value="65213323" Type="BarcodeType.Code11" >
            </SfBarcodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code128">
            <summary>
            Generate the Code128type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code39">
            <summary>
            Generate the Code39 type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code128A">
            <summary>
            Generate the Code128A type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code128B">
            <summary>
            Generate the Code128B type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code128C">
            <summary>
            Generate the Code128C type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Codabar">
            <summary>
            Generate the Codabar type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Ean8">
            <summary>
            Generate the Ean8 type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Ean13">
            <summary>
            Generate the Ean13 type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.UpcA">
            <summary>
            Generate the UpcA type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.UpcE">
            <summary>
            Generate the UpcE type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code11">
            <summary>
            Generate the Code128type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code93">
            <summary>
            Generate the Code93 type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code93Extension">
            <summary>
            Generate the Code39Extension type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code39Extension">
            <summary>
            Generate the Code39Extension type barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeType.Code32">
            <summary>
            Generate the Code32 type barcode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator">
            <summary>
            Represents the class, which contains data and functionalities for SfBarcode.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="200" Value="65213323" Type="BarcodeType.Code11" BackgroundColor="white" ForeColor="black" EnableCheckSum="true" OnValidationFailed="@OnInvalid">
             <BarcodeGeneratorDisplayText Text = "" Font="monospace" Size="25" Alignment="Alignment.Left" Position="TextPosition.Top">
               <BarcodeTextMargin Left = "10" Top="10" Right="10" Bottom="10"></BarcodeTextMargin>
             </BarcodeGeneratorDisplayText>
             <BarcodeMargin Left = "10" Top="10" Right="10" Bottom="10"></BarcodeMargin>
            </SfBarcodeGenerator>
            @code{
             public void OnInvalid(ValidationFailedEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.ChildContent">
            <summary>
            Sets content for Barcode generator element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.BackgroundColor">
            <summary>
            Specifies the background color of the barcode. By default, it is set to white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.DisplayText">
            <summary>
            Specifies the text properties for the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.EnableCheckSum">
            <summary>
            Specifies an error detection in which some additional characters are added to a barcode to protect the integrity of barcode data.  By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.ForeColor">
            <summary>
            Specifies the line and text color of the barcode. By default, it is set to black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.Height">
            <summary>
            Specifies the height of the barcode model. By default, it is set to 100%.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.Margin">
            <summary>
            Specifies the margin properties for the barcode.  By default, it is set to 10 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.Type">
            <summary>
            Specifies the type of barcode to be rendered. By default, it is set to Code128.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.Value">
            <summary>
            Specifies the value of the barcode to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.Width">
            <summary>
            Specifies the width of the barcode model. By default, it is set to 100%.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.OnValidationFailed">
            <summary>
            Triggers when the barcode input is an invalid string.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.Export(System.String,Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType)">
            <summary>
            Export the barcode as an image in the specified image type and downloads it in the browser.
            </summary>
            <param name="exportType">Specifies the type used to export the barcode.</param>
            <param name="fileName">Specifies the filename of the barcode image to be download.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.ExportAsBase64Image(Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType)">
            <summary>
            Export the barcode as an image in the specified image type and returns it as base64 string.
            </summary>
            <param name="exportType"></param>
            <returns>Returns the base64 string value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.OnParametersSetAsync">
            <summary>
            Sets the parameters for the SfBarcodeGenerator component in the render tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfBarcodeGenerator.OnAfterRenderAsync(System.Boolean)">
            <summary>
             The OnAfterRenderAsync method is invoked after the SfBarcodeGenerator component has finished rendering.
            </summary>
            <param name="firstRender">The first time the component instance is rendered is set to true.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.BarcodeHelper.ValidateInput(System.String,System.String,Syncfusion.Blazor.BarcodeGenerator.BarcodeType)">
            <summary>
            Validate the given input to check whether the input is valid or not.
            </summary>
            <param name="value"></param>
            <param name="validatorExpression"></param>
            <param name="barcodeType"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.ValidationFailedEventArgs">
            <summary>
            Specifies the event triggers when the barcode input is an invalid string.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="150" Value="A" Type="BarcodeType.Code11" OnValidationFailed="@OnInvalid">
            </SfBarcodeGenerator>
            @code{
             public void OnInvalid(ValidationFailedEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.ValidationFailedEventArgs.Message">
            <summary>
            Represents the validation message for the barcode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType">
            <summary>
            Represents the export type of barcode. By default, it is set to JPG.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type = "button" value="Export" @onclick="@OnExport" />
            <SfQRCodeGenerator Width = "200px" Height="150px" Value="Syncfusion" >
               <QRCodeGeneratorDisplayText text = "Text" ></ QRCodeGeneratorDisplayText >
            </ SfQRCodeGenerator >
              @code{
              private void OnExport()
              {
              QRcode.Export("fileName", BarcodeExportType.JPG);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType.JPG">
            <summary>
            Barcode will be exported as a JPG file.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType.PNG">
            <summary>
            Barcode will be exported as a PNG file.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.Alignment">
            <summary>
            Represents the horizontal alignment of the text. By default, it is set to Center.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="150" Value="65213323" Type="BarcodeType.Code11" >
              <BarcodeGeneratorDisplayText Alignment = "Alignment.Right" >
              </BarcodeGeneratorDisplayText>
            </SfBarcodeGenerator >
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.Alignment.Center">
            <summary>
            Align the text to the center side of the barcode element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.Alignment.Left">
            <summary>
            Align the text to the left side of the barcode element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.Alignment.Right">
            <summary>
            Align the text to the right side of the barcode element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.TextPosition">
            <summary>
            Represents the text position for the text to be rendered in the barcode.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfBarcodeGenerator Width="200" Height="150" Value="65213323" Type="BarcodeType.Code11" >
              <BarcodeGeneratorDisplayText Position = "TextPosition.Top" >
              </ BarcodeGeneratorDisplayText >
            </ SfBarcodeGenerator >
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.TextPosition.Bottom">
            <summary>
            Text will be rendered in the Bottom of the barcode element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.TextPosition.Top">
            <summary>
            Text will be rendered in the Top of the barcode element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.actualRows">
            <summary>
            Returns the actual number of rows (including quietzones).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.actualColumns">
            <summary>
            Returns the actual number of columns (including quietzones).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.dataMatrixArray">
            <summary>
            Holds the final array.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.symbolAttributes">
            <summary>
            Array containing all possible datamatrix symbol attributes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.symbolAttribute">
            <summary>
            Holds the suitable symbol attribute based on input text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.log">
            <summary>
            Holds log array.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.aLog">
            <summary>
            Holds ALog array.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.polynomial">
            <summary>
            Internal variable for Reed Solomon polynomial.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.blockLength">
            <summary>
            Internal variable for block length.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.quiteZoneLeft">
            <summary>
            Initializes default quiteZone for data matrix.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.createLogArrays">
            <summary>
            Create log and alog arrays.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.createPolynomial(System.Int32)">
            <summary>
            Creates factors for Reed Solomon polynomial based on the data.
            </summary>
            <param name="step">Number of correction codewords required.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.createMatrix(System.Int32[])">
            <summary>
            Create matrix.
            </summary>
            <param name="codeword">Input data matrix.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.getData">
            <summary>
            Returns the data as byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.buildDataMatrix(Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator)">
            <summary>
            Builds data matrix.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.prepareCodeword(System.Byte[],Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator)">
            <summary>
            Prepares data codeword by encoding and appending error correction codes.
            </summary>
            <param name="dataCodeword">Data in bytes.</param>
            <param name="dataMatrix">Reference for the component SfDataMatrixGenerator.</param>
            <returns>Final codeword ready for generating matrix.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.dataMatrixBaseEncoder(System.Byte[])">
            <summary>
            Encodes the data using Base256 encoder.
            </summary>
            <param name="dataCodeword">Data to be encoded.</param>
            <returns>Encoded data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.computeBase256Codeword(System.Int32,System.Int32)">
            <summary>
            Compute codeword using 255 state algorithm.
            </summary>
            <param name="codeWordValue">Codeword to compute.</param>
            <param name="index">Index of the codeword.</param>
            <returns>Encoded codeword.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.dataMatrixASCIINumericEncoder(System.Byte[])">
            <summary>
            Encodes the data using Numeric encoder.
            </summary>
            <param name="dataCodeword">Data to be encoded.</param>
            <returns>Encoded data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.dataMatrixASCIIEncoder(System.Byte[])">
            <summary>
            Encodes the data using ASCII encoder.
            </summary>
            <param name="dataCodeword">Data to be encoded.</param>
            <returns>Encoded data.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.computeErrorCorrection(System.Byte[]@,Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator)">
            <summary>
            Compute error correction codewords.
            </summary>
            <param name="codeword">Data codewords.</param>
            <param name="dataMatrix">Reference for the component SfDataMatrixGenerator.</param>
            <returns>Correction codeword array.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.padCodewords(System.Int32,System.Byte[],System.Byte[]@)">
            <summary>
            Data codeword is padded to match the chosen symbol attribute.
            </summary>
            <param name="dataCodeWordLength">Length of data codeword.</param>
            <param name="temp">Codeword without padding.</param>
            <param name="codeword">Codeword with padding.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.prepareDataCodeword(System.Byte[],Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator)">
            <summary>
            Choose suitable encoding.
            </summary>
            <param name="dataCodeword">Data codeword.</param>
            <param name="dataMatrix">Reference for the component SfDataMatrixGenerator.</param>
            <returns>Encoded codeword.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.addQuiteZone(System.Byte[][])">
            <summary>
            Adds quietzone on all sides of the data matrix.
            </summary>
            <param name="dataMatrix">Input data matrix.</param>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.DataMatrix.PdfDataMatrixSymbolAttribute">
            <summary>
            Symbol attribute structure for the DataMatrix.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText">
            <summary>
            Specifies the class which contains DataMatrix display text data and functionalities.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDataMatrixGenerator Width="200" Height="200" Value="65213323" Encoding="DataMatrixEncoding.ASCIINumeric" >
             <DataMatrixGeneratorDisplayText Text="" Font="monospace" Size="25" Alignment="Alignment.Left" Position="TextPosition.Top">
             </DataMatrixGeneratorDisplayText>
            </SfDataMatrixGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.ChildContent">
            <summary>
            Sets content for data matrix display text element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.Alignment">
            <summary>
            Defines the horizontal alignment of the text. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.Font">
            <summary>
            Defines the font style of the text. By default, it is set to monospace.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.Margin">
            <summary>
            It sets the space to be left between the text and its DataMatrix. By default, it is set to 0 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.Position">
            <summary>
            Defines the position of the text. By default, it is set to Bottom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.Size">
            <summary>
            Defines the size of the text. By default, it is set to 20.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.Text">
            <summary>
            Sets the textual description of the DataMatrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.Visibility">
            <summary>
            Defines the visibility of the text.  By default, it is set to true.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrixGeneratorDisplayText.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.DataMatrixTextMargin">
            <summary>
            Specifies the space to be left from the display text of the DataMatrix.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDataMatrixGenerator Width="200" Height="150" Value="23" Encoding="DataMatrixEncoding.ASCIINumeric">
              <DataMatrixGeneratorDisplayText >
                <DataMatrixTextMargin Left = "0" Top="0" Right="0" Bottom="0"></DataMatrixTextMargin>
              </DataMatrixGeneratorDisplayText>
            </SfDataMatrixGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixTextMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the display text of the DataMatrix. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixTextMargin.Left">
            <summary>
            It sets the space to be left from the left side of the display text of the DataMatrix. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixTextMargin.Right">
            <summary>
            It sets the space to be left from the right side of the display text of the DataMatrix. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixTextMargin.Top">
            <summary>
            It sets the space to be left from the top side of the display text of the DataMatrix. By default, it is set to 0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrixTextMargin.OnInitializedAsync">
            <summary>
            OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.DataMatrixMargin">
            <summary>
            Specifies the space to be left from the DataMatrix.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDataMatrixGenerator Width="200" Height="150" Value="65213323" Encoding="DataMatrixEncoding.ASCIINumeric" >
                <DataMatrixMargin Left = "10" Top="10" Right="10" Bottom="10"></DataMatrixMargin>
            </SfDataMatrixGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixMargin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixMargin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.DataMatrixMargin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.DataMatrixMargin.OnInitializedAsync">
            <summary>
            OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.DataMatrixEncoding">
            <summary>
            Represents the encoding type for the datamatrix code.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDataMatrixGenerator Width="200" Height="150" Value="65213323" Encoding="DataMatrixEncoding.ASCIINumeric">
            </SfDataMatrixGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixEncoding.Auto">
            <summary>
            Encoding type will be automatically assigned for the given input
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixEncoding.ASCII">
            <summary>
            Accept only the ASCII values
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixEncoding.ASCIINumeric">
            <summary>
            Accept only the ASCII numeric values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixEncoding.Base256">
            <summary>
            Accept the base256 values.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize">
            <summary>
            Represents the size for the DataMatrix code.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDataMatrixGenerator Width="200" Height="150" Value="65323" Encoding=" DataMatrixEncoding.ASCIINumeric" Size="DataMatrixSize.Size104x104">
            </SfDataMatrixGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Auto">
            <summary>
            Generate the size of the data matrix for the given input
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size104x104">
            <summary>
            Generate 21*21 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size10x10">
            <summary>
            Generate 10*10 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size120x120">
            <summary>
            Generate 120*120 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size12x12">
            <summary>
            Generate 12*12 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size12x26">
            <summary>
            Generate 12*26 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size12x36">
            <summary>
            Generate 12*36 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size132x132">
            <summary>
            Generate 132*132 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size144x144">
            <summary>
            Generate 144*144 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size14x14">
            <summary>
            Generate 14*14 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size16x16">
            <summary>
            Generate 16*16 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size16x36">
            <summary>
            Generate 16*36 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size16x48">
            <summary>
            Generate 16*48 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size18x18">
            <summary>
            Generate 18*18 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size20x20">
            <summary>
            Generate 20*20 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size22x22">
            <summary>
            Generate 22*22 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size24x24">
            <summary>
            Generate 24*24 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size26x26">
            <summary>
            Generate 26*26 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size32x32">
            <summary>
            Generate 32*32 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size36x36">
            <summary>
            Generate 36*36 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size40x40">
            <summary>
            Generate 40*40 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size44x44">
            <summary>
            Generate 44*44 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size48x48">
            <summary>
            Generate 48*48 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size52x52">
            <summary>
            Generate 52*52 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size64x64">
            <summary>
            Generate 64*64 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size72x72">
            <summary>
            Generate 72*72 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size80x80">
            <summary>
            Generate 80*80 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size88x88">
            <summary>
            Generate 88*88 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size8x18">
            <summary>
            Generate 8*18 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size8x32">
            <summary>
            Generate 8*32 size for the datamatrix
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.DataMatrixSize.Size96x96">
            <summary>
            Generate 96*96 size for the datamatrix
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator">
            <summary>
            Represents the data and functionalities for SfDataMatrixGenerator.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDataMatrixGenerator Width="200" Height="200" Value="65213323" Encoding="DataMatrixEncoding.ASCIINumeric" BackgroundColor="white" ForeColor="black" OnValidationFailed="@OnInvalid">
             <DataMatrixGeneratorDisplayText Text = "" Font="monospace" Size="25" Alignment="Alignment.Left" Position="TextPosition.Top">
                 <DataMatrixTextMargin Left = "0" Top="0" Right="0" Bottom="0"></DataMatrixTextMargin>
             </DataMatrixGeneratorDisplayText>
             <DataMatrixMargin Left = "10" Top="10" Right="10" Bottom="10"></ DataMatrixMargin >
            </SfDataMatrixGenerator>
            @code{
              public void OnInvalid(ValidationFailedEventArgs args)
              {
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.ChildContent">
            <summary>
            Sets content for data matrix element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.BackgroundColor">
            <summary>
            Specifies the background color of the DataMatrix. By default, it is set to white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.DisplayText">
            <summary>
            Specifies the text properties for the DataMatrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.Encoding">
            <summary>
            Specifies the encoding type of the DataMatrix.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.ForeColor">
            <summary>
            Specifies the line and text color of the DataMatrix. By default, it is set to black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.Height">
            <summary>
            Specifies the height of the DataMatrix model. By default, it is set to 100%.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.Margin">
            <summary>
            Specifies the margin properties for the DataMatrix.  By default, it is set to 10 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.Size">
            <summary>
            Specifies the amount of data to be encoded in the data matrix symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.Value">
            <summary>
            Specifies the value of the DataMatrix to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.Width">
            <summary>
            Specifies the width of the DataMatrix model. By default, it is set to 100%.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.XDimension">
            <summary>
            Represents the width of the smallest element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.OnValidationFailed">
            <summary>
            Triggers when the DataMatrix input is an invalid string.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.Export(System.String,Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType)">
            <summary>
            Export the DataMatrix as an image in the specified image type and downloads it in the browser.
            </summary>
            <param name="exportType">Specifies the type used to export the DataMatrix.</param>
            <param name="fileName">Specifies the filename of the DataMatrix image to be download.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.ExportAsBase64Image(Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType)">
            <summary>
            Export the DataMatrix as an image in the specified image type and returns it as base64 string.
            </summary>
            <param name="exportType"></param>
            <returns>Returns the base64 string value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the SfDataMatrixGenerator component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.OnAfterRenderAsync(System.Boolean)">
            <summary>
             The OnAfterRenderAsync method is invoked after the SfDataMatrixGenerator component has finished rendering.
            </summary>
            <param name="firstRender">The first time the component instance is rendered is set to true.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfDataMatrixGenerator.OnParametersSetAsync">
            <summary>
            Sets the parameters for the SfDataMatrixGenerator component in the render tree.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel">
            <summary>
            Represents the recovery capacity of the QRcode.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The default capacity levels are</td>
            </tr>
            <tr>
            <td style = "border: none">�    Low</td>
            </tr>
            <tr>
            <td style = "border: none">�    Medium</td>
            </tr>
            <tr>
            <td style = "border: none">�    Quartile</td>
            </tr>
            <tr>
            <td style = "border: none">�    High</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfQRCodeGenerator Width="200" Height="150" Value="65323" ErrorCorrectionLevel="ErrorCorrectionLevel.High" >
            </SfQRCodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel.High">
            <summary>
            The Recovery capacity is 30%(approx.)
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel.Low">
            <summary>
            The Recovery capacity is 7%(approx.)
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel.Medium">
            <summary>
            The Recovery capacity is 15%(approx.)
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel.Quartile">
            <summary>
            The Recovery capacity is 25%(approx.)
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion">
            <summary>
            Represents the QRCodeVersion.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfQRCodeGenerator Width="200" Height="150" Value="65323" Version="QRCodeVersion.Version23" >
            </SfQRCodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Auto">
            <summary>
            Specifies the default version.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version01">
            <summary>
            Specifies version 1 (21 x 21 modules)
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version02">
            <summary>
            Specifies version 2 (25 x 25 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version03">
            <summary>
            Specifies version 3 (29 x 29 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version04">
            <summary>
            Specifies version 4 (33 x 33 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version05">
            <summary>
            Specifies version 5 (37 x 37 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version06">
            <summary>
            Specifies version 6 (41 x 41 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version07">
            <summary>
            Specifies version 7 (45 x 45 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version08">
            <summary>
            Specifies version 8 (49 x 49 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version09">
            <summary>
            Specifies version 9 (53 x 53 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version10">
            <summary>
            Specifies version 10 (57 x 57 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version11">
            <summary>
            Specifies version 11 (61 x 61 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version12">
            <summary>
            Specifies version 12 (65 x 65 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version13">
            <summary>
            Specifies version 13 (69 x 69 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version14">
            <summary>
            Specifies version 14 (73 x 73 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version15">
            <summary>
            Specifies version 15 (77 x 77 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version16">
            <summary>
            Specifies version 17 (85 x 85 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version17">
            <summary>
            Specifies version 17 (85 x 85 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version18">
            <summary>
            Specifies version 18 (89 x 89 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version19">
            <summary>
            Specifies version 19 (93 x 93 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version20">
            <summary>
            Specifies version 20 (97 x 97 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version21">
            <summary>
            Specifies version 21 (101 x 101 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version22">
            <summary>
            Specifies version 22 (105 x 105 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version23">
            <summary>
            Specifies version 23 (109 x 109 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version24">
            <summary>
            Specifies version 24 (113 x 113 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version25">
            <summary>
            Specifies version 25 (117 x 117 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version26">
            <summary>
            Specifies version 26 (121 x 121 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version27">
            <summary>
            Specifies version 27 (125 x 125 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version28">
            <summary>
            Specifies version 28 (129 x 129 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version29">
            <summary>
            Specifies version 29 (133 x 133 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version30">
            <summary>
            Specifies version 30 (137 x 137 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version31">
            <summary>
            Specifies version 31 (141 x 141 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version32">
            <summary>
            Specifies version 32 (145 x 145 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version33">
            <summary>
            Specifies version 33 (149 x 149 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version34">
            <summary>
            Specifies version 34 (153 x 153 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version35">
            <summary>
            Specifies version 35 (157 x 157 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version36">
            <summary>
            Specifies version 36 (161 x 161 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version37">
            <summary>
            Specifies version 37 (165 x 165 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version38">
            <summary>
            Specifies version 38 (169 x 169 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version39">
            <summary>
            Specifies version 39 (173 x 173 modules).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion.Version40">
            <summary>
            Specifies version 40 (177 x 177 modules).
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.QRInputMode">
            <summary>
            Defines the Qrcode input mode.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The QR input modes are</td>
            </tr>
            <tr>
            <td style = "border: none">�    NumericMode</td>
            </tr>
            <tr>
            <td style = "border: none">�    BinaryMode</td>
            </tr>
            <tr>
            <td style = "border: none">�    AlphaNumericMode</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRInputMode.NumericMode">
            <summary>
            Changes its mode to NumericMode when the given input is numeric.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRInputMode.BinaryMode">
            <summary>
            Changes its mode to BinaryMode when the given input is numeric or smaller case or both.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRInputMode.AlphaNumericMode">
            <summary>
            Changes its mode to AlphaNumericMode when the given is numeric or upper case or both.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRInputMode.MixingMode">
            <summary>
            MixingMode
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.QuietZone">
            <summary>
            Defines the quite zone for the QRCode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QuietZone.All">
            <summary>
            quite zone for the QRCode.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText">
            <summary>
            Specifies the class which contains QRCode display text data and functionalities.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfQRCodeGenerator Width="200" Height="200" Version="QRCodeVersion.Version01" Value="65213323">
              <QRCodeGeneratorDisplayText Text = "" Font="monospace" Size="15" Alignment="Alignment.Left" Position="TextPosition.Top">
              </QRCodeGeneratorDisplayText>
            </SfQRCodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.ChildContent">
            <summary>
            Sets content for QR code generator display text element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.Alignment">
            <summary>
            Defines the horizontal alignment of the text. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.Font">
            <summary>
            Defines the font style of the text. By default, it is set to monospace.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.Margin">
            <summary>
            It sets the space to be left between the text and its QRCode. By default, it is set to 0 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.Position">
            <summary>
            Defines the position of the text. By default, it is set to Bottom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.Size">
            <summary>
            Defines the size of the text. By default, it is set to 20.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.Text">
            <summary>
            Sets the textual description of the QRCode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.Visibility">
            <summary>
            Defines the visibility of the text.  By default, it is set to true.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRCodeGeneratorDisplayText.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.QRCodeTextMargin">
            <summary>
            Specifies the space to be left from the display text of the QRCode.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfQRCodeGenerator Width="200" Height="150" Version="QRCodeVersion.Version40" Value="65213323">
             <QRCodeGeneratorDisplayText >
               <QRCodeTextMargin Left = "0" Top="0" Right="0" Bottom="0"></QRCodeTextMargin>
             </QRCodeGeneratorDisplayText>
            </SfQRCodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeTextMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the display text of the QRCode. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeTextMargin.Left">
            <summary>
            It sets the space to be left from the left side of the display text of the QRCode. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeTextMargin.Right">
            <summary>
            It sets the space to be left from the right side of the display text of the QRCode. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRCodeTextMargin.Top">
            <summary>
            It sets the space to be left from the top side of the display text of the QRCode. By default, it is set to 0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRCodeTextMargin.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.QRMargin">
            <summary>
            Specifies the space to be left from the QRCode.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfQRCodeGenerator Width="200" Height="150" Version="QRCodeVersion.Version40" Value="65213323">
             <QRMargin Left = "10" Top="10" Right="10" Bottom="10"></QRMargin>
            </SfQRCodeGenerator>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRMargin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRMargin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRMargin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element. By default, it is set to 10.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRMargin.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.ModuleValue">
            <summary>
            Struct to hold the value of each dots in Barcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.ModuleValue.IsBlack">
            <summary>
            Specifies if the Dot is black.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.ModuleValue.IsFilled">
            <summary>
            Specifies if the Dot is already filled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.ModuleValue.IsPDP">
            <summary>
            Specifies if the Dot is PDP.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.barcodeVersion">
            <summary>
            Holds the Version Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.noOfModules">
            <summary>
            Holds the Number of Modules.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.barcodeModuleValue">
            <summary>
            Holds the data of Function Pattern.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.barcodeDataAllocationValues">
            <summary>
            Holds the Data in the Encoding Region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.isMixMode">
            <summary>
            Check if mode is mixing mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.mixVersionERC">
            <summary>
            Set version for mixing mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.mixExecutablePart">
            <summary>
            Data to be currently encoded in Mixing Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.mixRemainingPart">
            <summary>
            Data remaining for encoding in mixing mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.totalBits">
            <summary>
            Total bits required in mixing mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.mixDataCount">
            <summary>
            Count of mixing mode blocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.barcodeText">
            <summary>
            Stores data blocks of particular mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.barcodeMode">
            <summary>
            Stores Mode of each data block.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.barcodeInputMode">
            <summary>
            Holds the Input Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.errorCorrectionLevel">
            <summary>
            Holds the Error correction level.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.dataBits">
            <summary>
            Holds the Data Bit value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.blocks">
            <summary>
            Holds the Number of Blocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.isUserMentionedMode">
            <summary>
            Check if User Mentioned Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.isUserMentionedVersion">
            <summary>
            Check if User Mentioned Version.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.isUserMentionedErrorCorrectionLevel">
            <summary>
            Check if User Mentioned Error Correction Level.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.isEci">
            <summary>
            Check if ECI.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.eciAssignmentNumber">
            <summary>
            Holds the ECI Assignment Number.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.barcodeValues">
            <summary>
            Variable to hold the QR Barcode Values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.ErrorCorrectionLevel">
            <summary>
            Gets or sets the Error correction level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.InputMode">
            <summary>
            Gets or sets the Mode of the input text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.generateValues">
            <summary>
            Generates the values of the QR Barcode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.addQuietZone">
            <summary>
            Adds quietzone to the QR Barcode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.drawPDP(System.Int32,System.Int32)">
            <summary>
            Draw the PDP in the given location.
            </summary>
            <param name="x">The x co-ordinate.</param>
            <param name="y">The y co-ordinate.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.drawTimingPattern">
            <summary>
            Draw the Timing Pattern.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.drawAlignmentPattern(System.Int32,System.Int32)">
            <summary>
            Draw the Alignment Pattern in the given location.
            </summary>
            <param name="x">The x co-ordinate.</param>
            <param name="y">The y co-ordinate.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.encodedData">
            <summary>
            Encode the Input Data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.dataAllocationAndMasking(System.Boolean[])">
            <summary>
            Allocates the Encoded Data and then Mask.
            </summary>
            <param name="Data">Encoded Data.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.drawFormatInformation">
            <summary>
            Draw the Format Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.chooseDefaultMode">
            <summary>
            Initializes the Version, Error correction level, Input Mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.splitCodeWord(System.String[][],System.Int32,System.Int32)">
            <summary>
            Splits the Code words.
            </summary>
            <param name="ds">The Encoded value Blocks.</param>
            <param name="blk">Index of Block Number.</param>
            <param name="count">Length of the Block.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.createBlocks(System.Collections.Generic.List{System.Boolean},System.Int32)">
            <summary>
            Creates the Blocks.
            </summary>
            <param name="encodeData">The Encoded value.</param>
            <param name="noOfBlocks">Number of Blocks.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.intToBoolArray(System.Int32,System.Int32)">
            <summary>
            Converts Integer value to Boolean.
            </summary>
            <param name="number">The Integer value.</param>
            <param name="noOfBits">Number of Bits.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.stringToBoolArray(System.String,System.Int32)">
            <summary>
            Converts string value to Boolean.
            </summary>
            <param name="numberInString">The String value.</param>
            <param name="noOfBits">Number of Bits.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.getAlignmentPatternCoOrdinates">
            <summary>
            Gets the Allignment pattern coordinates of the current version.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.allocateFormatAndVersionInformation">
            <summary>
            Allocates Format and Version Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcode.GetAlphanumericvalues(System.Char)">
            <summary>
            Gets the Alphanumeric values.
            </summary>
            <param name="value">given a character.</param>
            <returns>returns an equal interger value of the character.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.BarcodeQuietZones">
            <summary>
            Represents the Class for specifying Quiet zones around the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeQuietZones.Right">
            <summary>
            Gets or sets the quiet zones at the right side of the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeQuietZones.Top">
            <summary>
             Gets or sets the quiet zones at Top of the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeQuietZones.Left">
            <summary>
             Gets or sets the quiet zones at the left side of the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeQuietZones.Bottom">
            <summary>
             Gets or sets the quiet zones at bottom of the barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.BarcodeQuietZones.All">
            <summary>
             Gets or sets the quiet zones around the bar code.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.barcodeVersion">
            <summary>
            Holds the Version Information.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.numberOfErrorCorrectingCodeWordsCollection">
            <summary>
            Holds all the values of Error correcting code words.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.endValues">
            <summary>
            Holds all the end values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.DataCapacityValues">
            <summary>
            Holds all the Data capacity values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.NumericDataCapacityLow">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level Low.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.NumericDataCapacityMedium">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level Medium.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.NumericDataCapacityQuartile">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level Quartile.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.NumericDataCapacityHigh">
            <summary>
            Holds all  the Numeric Data capacity of the Error correction level High.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.AlphanumericDataCapacityLow">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level Low.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.AlphanumericDataCapacityMedium">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level Medium.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.AlphanumericDataCapacityQuartile">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level Quartile.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.AlphanumericDataCapacityHigh">
            <summary>
            Holds all  the Alphaumeric Data capacity of the Error correction level High.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.BinaryDataCapacityLow">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level Low.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.BinaryDataCapacityMedium">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level Medium.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.BinaryDataCapacityQuartile">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level Quartile.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.BinaryDataCapacityHigh">
            <summary>
            Holds all  the Binary Data capacity of the Error correction level High.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.MixedDataCapacityLow">
            <summary>
            Holds all  the Mixed Data capacity of the Error correction level Low.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.MixedDataCapacityMedium">
            <summary>
            Holds all  the Mixed Data capacity of the Error correction level Medium.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.MixedDataCapacityQuartile">
            <summary>
            Holds all  the Mixed Data capacity of the Error correction level Quartile.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.MixedDataCapacityHigh">
            <summary>
            Holds all  the Mixed Data capacity of the Error correction level High.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.NumberOfDataCodeWord">
            <summary>
            Holds the Number of Data code word.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.NumberOfErrorCorrectingCodeWords">
            <summary>
            Holds the Number of Error correcting code words.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.NumberOfErrorCorrectionBlocks">
            <summary>
            Holds the Number of Error correction Blocks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.End">
            <summary>
            Holds the End value of the version.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.DataCapacity">
            <summary>
            Holds the Data copacity of the version.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.FormatInformation">
            <summary>
            Holds the Format Information.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.VersionInformation">
            <summary>
            Holds the Version Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.#ctor(Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion,Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel)">
            <summary>
            Initializes the Values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.obtainNumberOfDataCodeWord">
            <summary>
            Gets number of Data code words.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.obtainNumberOfErrorCorrectingCodeWords">
            <summary>
            Get number of Error correction code words.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.obtainNumberOfErrorCorrectionBlocks">
            <summary>
            Gets number of Error correction Blocks.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.obtainEnd">
            <summary>
            Gets the End of the version.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.obtainDataCapacity">
            <summary>
            Gets Data capacity.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.obtainFormatInformation">
            <summary>
            Gets Format Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.obtainVersionInformation">
            <summary>
            Gets Version Information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.GetNumericDataCapacity(Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion,Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel)">
            <summary>
            Gets Numeric Data capacity.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.QRBarcodeValues.GetAlphanumericDataCapacity(Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion,Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel)">
            <summary>
            Gets Alphanumeric data capacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.length">
            <summary>
            Holds the Length.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.eccw">
            <summary>
            Holds the Error Correction Code Word.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.dataBits">
            <summary>
            Holds the DataBits.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.dataCodeWord">
            <summary>
            Holds the Data Code word.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.gxValue">
            <summary>
            Holds G(x).
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.alpha">
            <summary>
            Holds all the values of Alpha.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.decimalValue">
            <summary>
            Holds the Decimal value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.barcodeValues">
            <summary>
            Holds the values of QR Barcode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.DC">
            <summary>
            Sets and Gets the Data code word.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.DataBits">
            <summary>
            Sets and Gets the DataBits.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.ECCW">
            <summary>
            Sets and Gets the Error Correction Code Words.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.#ctor(Syncfusion.Blazor.BarcodeGenerator.QRCodeVersion,Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionLevel)">
            <summary>
            Initializes Error correction code word.
            </summary>
            <param name="version">Version.</param>
            <param name="correctionLevel">Error correction level.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.GetERCW">
            <summary>
            Gets the Error correction code word.
            <returns>Error correction code word.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.toDecimal(System.String[])">
            <summary>
            Convert to Decimal.
            </summary>
            <param name="inString">Binary values.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.toBinary(System.Int32[])">
            <summary>
            Convert decimal to Binary value.
            <returns>Binary Representation.</returns>
            </summary>
            <param name="decimalRepresentation"> Decimal Representation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.divide">
            <summary>
            Polynomial division.
            <returns>Polynomial coefficient.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.findElement(System.Int32,System.Int32[])">
            <summary>
            Find the element in the alpha.
            <returns>Index of the element.</returns>
            </summary>
            <param name="element">Element.</param>
            <param name="alpha">Alpha.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.ErrorCorrectionCodewords.getElement(System.Int32[],System.Int32[])">
            <summary>
            Gets g(x) of the element.
            <returns>g(x)</returns>
            </summary>
            <param name="element">Element.</param>
            <param name="alpha">Alpha.</param>
        </member>
        <member name="T:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator">
            <summary>
            Specifies all the properties for the QRCode to be rendered.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfQRCodeGenerator Width="200" Height="200" Version="QRCodeVersion.Version40" Value="65213323"  BackgroundColor="white" ForeColor="black" OnValidationFailed="@OnInvalid">
             <QRCodeGeneratorDisplayText Text = "" Font="monospace" Size="25" Alignment="Alignment.Left" Position="TextPosition.Top">
                <QRCodeTextMargin Left = "0" Top="0" Right="0" Bottom="0"></QRCodeTextMargin>
             </QRCodeGeneratorDisplayText>
             <QRMargin Left = "10" Top="10" Right="10" Bottom="10"></QRMargin>
            </SfQRCodeGenerator>
            @code{
             public void OnInvalid(ValidationFailedEventArgs args)
             {
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.ChildContent">
            <summary>
            Sets content for QRCode generator element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.BackgroundColor">
            <summary>
            Specifies the background color of the QRCode. By default, it is set to white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.DisplayText">
            <summary>
            Specifies the text properties for the QRCode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.ErrorCorrectionLevel">
            <summary>
            Specifies the error correction level of the QR code.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.ForeColor">
            <summary>
            Specifies the line and text color of the QRCode. By default, it is set to black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.Height">
            <summary>
            Specifies the height of the QRCode model. By default, it is set to 100%.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.Margin">
            <summary>
            Specifies the margin properties for the QRCode.  By default, it is set to 10 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.Value">
            <summary>
            Specifies the value of the QRCode to be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.Version">
            <summary>
             Specifies the version of the QR code.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.Width">
            <summary>
            Specifies the width of the QRCode model. By default, it is set to 100%.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.XDimension">
            <summary>
            Represents the width of the smallest element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.OnValidationFailed">
            <summary>
            Triggers when the QRCode input is an invalid string.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.Export(System.String,Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType)">
            <summary>
            Export the barcode as an image in the specified image type and downloads it in the browser.
            </summary>
            <param name="exportType">Specifies the type used to export the barcode.</param>
            <param name="fileName">Specifies the filename of the barcode image to be download.</param>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.ExportAsBase64Image(Syncfusion.Blazor.BarcodeGenerator.BarcodeExportType)">
            <summary>
            Export the barcode as an image in the specified image type and returns it as base64 string.
            </summary>
            <param name="exportType"></param>
            <returns>Returns the base64 string value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.OnInitializedAsync">
            <summary>
             OnInitializedAsync is invoked when the SfQRCodeGenerator component is initialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.OnAfterRenderAsync(System.Boolean)">
            <summary>
             The OnAfterRenderAsync method is invoked after the SfQRCodeGenerator component has finished rendering.
            </summary>
            <param name="firstRender">The first time the component instance is rendered is set to true.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.BarcodeGenerator.SfQRCodeGenerator.OnParametersSetAsync">
            <summary>
            Sets the parameters for the SfQRCodeGenerator component in the render tree.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.AnimationSettings">
            <summary>
            Animation properties for performing animation transition.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.Duration">
            <summary>
            Gets or sets the animation duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.Name">
            <summary>
            Gets or sets the animation name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.TimingFunction">
            <summary>
            Gets or sets the animation timing function.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.AnimationSettings.Delay">
            <summary>
            Gets or sets the animation delay.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RippleSettings">
            <summary>
            Ripple settings for performing the ripple effect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.Selector">
            <summary>
            Gets or sets the ripple selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.Ignore">
            <summary>
            Gets or sets the ripple ignore.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.RippleFlag">
            <summary>
            Gets or sets the ripple flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.IsCenterRipple">
            <summary>
            Gets or sets the boolean value whether ripple center enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.RippleSettings.Duration">
            <summary>
            Gets or sets the ripple duration.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.BlazorIdJsonConverter">
            <summary>
            Custom JSON serialization type converter for the Template DataHashTable properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Internal.BlazorIdJsonConverter"/> class.
            </summary>
            <param name="values">Dictionary values for json convert.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.HashData">
            <summary>
            Gets or sets hash data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.BlazorIdJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.TemplateConverter">
            <summary>
            Custom JSON serialization type converter for the Template properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.TemplateConverter.CanRead">
            <summary>
            Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.TemplateConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.TemplateConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The Newtonsoft.Json.JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.TemplateConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The Newtonsoft.Json.JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.NonFlagStringEnumConverter">
            <summary>
            Used to convert the enum integer values into a string
            Also, ignores the string conversion of number enum.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.NonFlagStringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>true if this instance can convert the specified object type; otherwise, false.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.PackageNameAttribute">
            <summary>
            Used to get the package name for specific component script loading.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.PackageNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Internal.PackageNameAttribute"/> class.
            </summary>
            <param name="packageName">package name.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.PackageNameAttribute.PackageName">
            <summary>
            Gets the package name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.FontInfo">
            <summary>
            Circular, Linear Gauges and TreeMap common property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.FontInfo.Average">
            <summary>
            Gets or sets average.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.FontInfo.Chars">
            <summary>
            Gets or sets chars.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ScriptModules">
            <summary>
            Script modules for the blazor components.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.AccumulationChart">
            <summary>
            AccumulationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Base">
            <summary>
            Base.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Calendar">
            <summary>
            Calendar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DatePicker">
            <summary>
            DatePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DateRangePicker">
            <summary>
            DateRangePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DateTimePicker">
            <summary>
            DateTimePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Timepicker">
            <summary>
            Timepicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Chart">
            <summary>
            Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Compression">
            <summary>
            Compression.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Drawings">
            <summary>
            Drawings.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DropDownBase">
            <summary>
            DropDownBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.DropDownList">
            <summary>
            DropDownList.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.AutoComplete">
            <summary>
            AutoComplete.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ComboBox">
            <summary>
            ComboBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.MultiSelect">
            <summary>
            MultiSelect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ExcelExport">
            <summary>
            ExcelExport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.FileUtils">
            <summary>
            FileUtils.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Gantt">
            <summary>
            Gantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.InplaceEditor">
            <summary>
            InplaceEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.InputBase">
            <summary>
            InputBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.FormValidator">
            <summary>
            FormValidator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.TextBox">
            <summary>
            TextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.NumericTextBox">
            <summary>
            NumericTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.MaskedTextBox">
            <summary>
            MaskedTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Uploader">
            <summary>
            Uploader.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Kanban">
            <summary>
            Kanban.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.OfficeChart">
            <summary>
            OfficeChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.PdfExport">
            <summary>
            PdfExport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.PdfViewer">
            <summary>
            PdfViewer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.TreeGrid">
            <summary>
            TreeGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Grid">
            <summary>
            Grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Pager">
            <summary>
            Pager.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.PopupsBase">
            <summary>
            PopupsBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Popup">
            <summary>
            Popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Accordion">
            <summary>
            Accordion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ListView">
            <summary>
            ListView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ListBase">
            <summary>
            ListBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ButtonBase">
            <summary>
            ButtonBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Button">
            <summary>
            Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.ContextMenu">
            <summary>
            ContextMenu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.NavigationsBase">
            <summary>
            NavigationsBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SplitbuttonsBase">
            <summary>
            SplitbuttonsBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Tooltip">
            <summary>
            Tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Diagram">
            <summary>
            Diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SymbolPalette">
            <summary>
            SymbolPalette.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Overview">
            <summary>
            Overview.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Dialog">
            <summary>
            Dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Spinner">
            <summary>
            Spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SfSvgExport">
            <summary>
            SfSvgExport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.Sortable">
            <summary>
            Sortable.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.ScriptModules.SfTextBox">
            <summary>
            SfTextbox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SfScriptModules">
            <summary>
            Script modules for the native rendering components.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBase">
            <summary>
            SfBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBaseExtended">
            <summary>
            SfBaseExtended.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfGrid">
            <summary>
            SfGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfChart">
            <summary>
            SfChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfAccumulationChart">
            <summary>
            SfAccumulationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfRangeNavigator">
            <summary>
            SfRangeNavigator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfProgressBar">
            <summary>
            SfProgressBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfGantt">
            <summary>
            SfGantt.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTreeGrid">
            <summary>
            SfTreeGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfPivotView">
            <summary>
            SfPivotView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTextBox">
            <summary>
            SfTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfNumericTextBox">
            <summary>
            SfNumericTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMaskedTextBox">
            <summary>
            SfMaskedTextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfUploader">
            <summary>
            SfUploader.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSlider">
            <summary>
            SfSlider.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDropDownList">
            <summary>
            SfDropDownList.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMultiSelect">
            <summary>
            SfMultiSelect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfCalendarBase">
            <summary>
            SfCalendarBase.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDatePicker">
            <summary>
            SfDatePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTimePicker">
            <summary>
            SfTimePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfToolbar">
            <summary>
            SfToolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSplitter">
            <summary>
            SfSplitter.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDashboardLayout">
            <summary>
            SfDashboardLayout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDialog">
            <summary>
            SfDialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTab">
            <summary>
            SfTab.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDropDownButton">
            <summary>
            SfDropDownButton.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTooltip">
            <summary>
            SfTooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBarcode">
            <summary>
            SfBarcode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfAccordion">
            <summary>
            SfAccordion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfContextMenu">
            <summary>
            SfContextMenu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMenu">
            <summary>
            SfMenu.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfMaps">
            <summary>
            SfMaps.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfListView">
            <summary>
            SfListView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfFileManager">
            <summary>
            SfFileManager.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTreeView">
            <summary>
            SfTreeView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSidebar">
            <summary>
            SfSidebar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfToast">
            <summary>
            SfToast.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDateRangePicker">
            <summary>
            SfDateRangePicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfRichTextEditor">
            <summary>
            SfRichTextEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSpinner">
            <summary>
            SfSpinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfCircularGauge">
            <summary>
            SfCircularGauge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfKanban">
            <summary>
            SfKanban.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSchedule">
            <summary>
            SfSchedule.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfTreeMap">
            <summary>
            SfTreeMap.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfLinearGauge">
            <summary>
            SfLinearGauge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfListBox">
            <summary>
            SfListBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfInPlaceEditor">
            <summary>
            SfInPlaceEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfColorPicker">
            <summary>
            SfColorPicker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSmithChart">
            <summary>
            SfSmithChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfBulletChart">
            <summary>
            SfBulletChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfSparkline">
            <summary>
            SfSparkline.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfStockChart">
            <summary>
            SfStockChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDocumentEditorContainer">
            <summary>
            SfDocumentEditorContainer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDocumentEditor">
            <summary>
            SfDocumentEditor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfHeatMap">
            <summary>
            HeatMap.
            </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Internal.SfScriptModules.SfDiagramComponent">
            <summary>
            SfDiagramComponent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator">
            <summary>
            Generates globalization details for the specific culture in JSON format.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator.GetGlobalizeJsonString(System.Globalization.CultureInfo)">
            <summary>
            Returns the globalized JSON string.
            </summary>
            <param name="cultureData">Specific culture information.</param>
            <returns>Json serialized globalize string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.GlobalizeJsonGenerator.GetGlobalizeContent(System.Globalization.CultureInfo)">
            <summary>
            Returns current culture information in the Dictionary format.
            </summary>
            <param name="cultureData">Specific culture information.</param>
            <returns>Localized contents.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.Intl">
            <summary>
            A static class for the Internationalization common features and functionalities.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.Intl.CurrentCulture">
            <summary>
            Gets or sets current culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.Intl.CurrencyData">
            <summary>
            Gets or sets currency date.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.Intl.DefaultCulture">
            <summary>
            Gets or sets default culture.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetDateFormat``1(``0,System.String,System.String)">
            <summary>
            Returns formatted date string based on the current culture.
            </summary>
            <typeparam name="T">The date format type.</typeparam>
            <param name="date">Date value to be formatted.</param>
            <param name="format">Format string for processing date format.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns formatted string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNumericFormat``1(``0,System.String,System.String,System.String)">
            <summary>
            Returns formatted number string based on the current culture.
            </summary>
            <typeparam name="T">The number format type.</typeparam>
            <param name="numberValue">Number value to be formatted.</param>
            <param name="format">Format string for processing number format.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <param name="currencyCode">Optional parameter to process the currency code.</param>
            <returns>Returns formatted string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetWeekOfYear(System.DateTime,System.String,System.Boolean,System.Globalization.CalendarWeekRule)">
            <summary>
            Returns the week of year based on the current culture.
            </summary>
            <param name="dateValue">Date value to be calculated.</param>
            <param name="culture">Optional parameter to override the current culture.</param>
            <param name="isLastDayOfWeek">Optional paramaeter to pass last day of week.</param>
            <param name="weekRule">Optional parameter to pass week rules.</param>
            <returns>Returns the week of year.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNarrowDayNames(System.String)">
            <summary>
            Returns the narrow day names based on the current culture.
            </summary>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the narrow day names.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetCulture(System.String)">
            <summary>
            Returns the current culture information.
            </summary>
            <param name="culture">Optional parameter to override the current culture.</param>
            <returns>Returns the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.SetCulture(System.Globalization.CultureInfo)">
            <summary>
            Set culture info to Intl class.
            </summary>
            <param name="culture">Culture info needs to be set to the Intl.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.SetCulture(System.String)">
            <summary>
            Set culture string to Intl class.
            </summary>
            <param name="culture">Culture string needs to be set to the Intl.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetNativeDigits(System.String,System.String[])">
            <summary>
            Converts native digits based on the current culture.
            </summary>
            <param name="formatValue">Format to be converted to native digits.</param>
            <param name="nativeDigits">Native digits of the current culture.</param>
            <returns>Returns the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.Intl.GetCultureFormats(System.String)">
            <summary>
            Returns the required patterns from the current culture.
            </summary>
            <param name="cultureCode">Culture code to be processed for the required patterns.</param>
            <returns>Returns culture patterns.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ISfCircularComponent">
            <summary>
            An interface for circular component reference.
            GridColumns -> GridColumn -> GridColumns -> GridColumn.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ISfCircularComponent.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values from parent component.
            </summary>
            <param name="key">Child property name.</param>
            <param name="propertyValue">Child property value.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IBaseInit">
            <summary>
            Common interface for blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.IBaseInit.OnInitRenderAsync">
            <summary>
            Invoked after script loaded at first rendering.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SyncfusionStringLocalizer">
            <summary>
            Implements the Syncfusion Localizer for injecting its service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.SyncfusionStringLocalizer.ResourceManager">
            <summary>
            Gets the <see cref="T:System.Resources.ResourceManager" /> for localization.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SyncfusionStringLocalizer.GetText(System.String)">
            <summary>
            Get localized text from resource file.
            </summary>
            <param name="key">Property key to return localized value.</param>
            <returns>Locale text.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.LocalizerDetails">
            <summary>
            Maintains the Localizer details for performing Localization.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.#ctor(System.Resources.ResourceManager,System.Globalization.CultureInfo,Syncfusion.Blazor.SyncfusionBlazorService,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Internal.LocalizerDetails"/> class.
            </summary>
            <param name="resourceManager">Resource manager instance.</param>
            <param name="culture">culture information.</param>
            <param name="service">Syncfusion Blazor service.</param>
            <param name="keys">Locale key values.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.Culture">
            <summary>
            Gets or sets culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.LocaleKeys">
            <summary>
            Gets or sets locale keys.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.SyncfusionService">
            <summary>
            Gets or sets Syncfusion service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.LocalizerDetails.Manager">
            <summary>
            Gets or sets resource manager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetLocaleText">
            <summary>
            Returns the locale text for blazor components from the resource file.
            </summary>
            <returns>Locale text.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetString(System.String)">
            <summary>
            Returns the locale text from the ResourceManager.
            </summary>
            <param name="localeKey">locale key to retrieve the locale value.</param>
            <returns>Locale content.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.GetMappingLocale(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            Updates the components locale dictionary.
            </summary>
            <param name="key">Component name.</param>
            <param name="componentLocale">List of components locale collections in dictionary.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.LocalizerDetails.Dispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ResourceManager">
            <summary>
            Resource manager component for loading init interop script in .NET Core 3.0 applications.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.LocaleKeys">
            <summary>
            Add the component and its dependent component locale keys from the LocaleService/GetMappingLocale method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.Parent">
            <summary>
            Gets or sets parent component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.SyncfusionService">
            <summary>
            Gets or sets Syncfusion Blazor service.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.JsRuntime">
            <summary>
            Gets or sets IJSRuntime.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ResourceManager.Localizer">
            <summary>
            Gets or sets Syncfusion localizer.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.Dispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.Dispose(System.Boolean)">
            <summary>
            Dispose the unmanaged resources.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <summary>
            Renders the component to the supplied Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder.
            </summary>
            <param name="builder">A Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder that will receive the render output.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.ResourceManager.OnAfterRender(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.SfBaseUtils">
            <summary>
            Common utility methods which can be used in all the Syncfusion Blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.UpdateDictionary(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update the given dictionary value based on the key value check.
            </summary>
            <param name="key">Key needs to be updated in the dictionary.</param>
            <param name="data">Value needs to be updated for the specific key.</param>
            <param name="dictionary">Dictionary needs to be add or updated.</param>
            <returns>Returns updated Dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GetAttribtues(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update the dictionary based on the @attributes key value check.
            <param name="classList">class list to be added in the string format.</param>
            <param name="dictionary">@attribute property value for updating class list.</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.Equals``1(``0,``0)">
            <summary>
            Returns the bool value based on comparing given values with the EqualityComparer.
            </summary>
            <param name="oldValue">Old value of the property.</param>
            <param name="newValue">New value of the property.</param>
            <returns>Returns bool value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.UpdateProperty``1(``0,``0,Microsoft.AspNetCore.Components.EventCallback{``0},Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Invoking events for two-way bindings property changes.
            </summary>
            <param name="publicValue">Public value needs to be updated in the two-way binding event.</param>
            <param name="privateValue">Private value to compare with public value for invoking two-way bindings.</param>
            <param name="eventCallback">EventCallback for invoking two-way binding event handler function.</param>
            <param name="editContext">EditContext instance for invoking NotifyFieldChanged method.</param>
            <param name="expression">Expression needs to be passed in the NotifyFieldChanged method.</param>
            <returns>Returns public property value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ToDoubleArray(System.Object)">
            <summary>
            Convert given arguments into double array.
            </summary>
            <param name="args">arguments for convert into double array.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ValidateExpression``1(Microsoft.AspNetCore.Components.Forms.EditContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Notify the field changes of the EditContext with specified expression.
            </summary>
            <param name="editContext">EditContext instance for invoking the NotifyFieldChanged method.</param>
            <param name="expression">Expression need to be passed in the NotifyFieldChanged method.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportModule(Microsoft.JSInterop.IJSRuntime,Syncfusion.Blazor.Internal.SfScriptModules,System.String)">
            <summary>
            Import component specific interop script modules in the application.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="scriptModule">Component specific interop script module.</param>
            <param name="hashKey">Component specific interop script module Key.</param>
            <returns>JSObjectReference.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportModules(Microsoft.JSInterop.IJSRuntime,System.Collections.Generic.List{Syncfusion.Blazor.Internal.ScriptModules},System.String)">
            <summary>
            Import component dependent interop script modules in the application.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="scriptModules">Component specific interop script module.</param>
            <param name="hashKey">Component specific interop script module Key.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ImportScripts(Microsoft.JSInterop.IJSRuntime,System.String)">
            <summary>
            Async method to execute script module import.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="modulePath">Module path to be load the script modules.</param>
            <returns>Async Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeEvent``1(System.Object,``0)">
            <summary>
            Invokes event handler function of the corresponding event name with parameters.
            </summary>
            <param name="eventFn">EventCallback to invoke the event handler method.</param>
            <param name="eventArgs">Arguments of the event handler method.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.ChangeType(System.Object,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Convert an object to the specified type.
            </summary>
            <param name="dataValue">Value needs to be converted with specific type.</param>
            <param name="conversionType">Type that needs to be converted to the given value.</param>
            <param name="isClientChange">Validate the client changes for the components.</param>
            <param name="isParseValue">Validate the Parse Value for the components.</param>
            <returns>Returns converted object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GenerateID(System.String)">
            <summary>
            Generate the unique Guid.
            </summary>
            <param name="name">add addtional name into ID.</param>
            <returns>Returns ID string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeMethod(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            Invoke void return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.InvokeMethod``1(Microsoft.JSInterop.IJSRuntime,System.String,System.Object[])">
            <summary>
            Invoke object return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.CompareValues``1(``0,``0)">
            <summary>
            compare the two values and returns a value indicating whether one value is less than, equal to, or greater than the second value.
            </summary>
            <returns>Less than Zero - value1 is less than value 2.</returns>
            <returns>Zero - Both are equals.</returns>
            <returns>Greater than Zero - value1 is greater than value 2.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.AddClass(System.String,System.String)">
            <summary>
            Add a class to the existing string content.
            </summary>
            <param name="prevClass">Previous class list in string format.</param>
            <param name="className">Class name needs to be added in the string content.</param>
            <returns>Returns class string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RemoveClass(System.String,System.String)">
            <summary>
            Remove a class from the existing string content.
            </summary>
            <param name="prevClass">Previous class list in string format.</param>
            <param name="className">Class name needs to be removed in the string content.</param>
            <returns>Returns class string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.AddArrayValue``1(``0[],``0)">
            <summary>
            Adds a value to a array.
            <param name="arrayValue">array to which value should be added.</param>
            <param name="addValue">value to be added to the array</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RemoveArrayValue``1(``0[],``0)">
            <summary>
            Removes a value from a array.
            <param name="arrayValue">array to which value should be removed.</param>
            <param name="removeValue">value to be removed from the array</param>
            <returns>Returns Dictionary.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.IsNotNullOrEmpty(System.Collections.IList)">
            <summary>
            Returns true if the list value is not null or empty.
            <param name="list">list value to be checked for having null or empty values.</param>
            <returns>Returns boolean value.</returns>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.FormatUnit(System.String)">
            <summary>
            Function to normalize the units applied to the element.
            </summary>
            <param name="propertyValue">Value.</param>
            <returns>Retuns normalized unit value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.GetEnumValue``1(``0)">
            <summary>
            Returns enumeration member value.
            </summary>
            <param name="enumValue">Actual enumeration value to be processed for its member value.</param>
            <returns>Returns actual enumeration member value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.Animate(Microsoft.JSInterop.IJSRuntime,Microsoft.AspNetCore.Components.ElementReference,Syncfusion.Blazor.Internal.AnimationSettings)">
            <summary>
            Function to perform the animation.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="reference">Represents a reference to a rendered element.</param>
            <param name="animationObject">Animation object for performing animation transition.</param>
            <returns>Async Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Internal.SfBaseUtils.RippleEffect(Microsoft.JSInterop.IJSRuntime,Microsoft.AspNetCore.Components.ElementReference,Syncfusion.Blazor.Internal.RippleSettings)">
            <summary>
            Function to perform the ripple effect.
            </summary>
            <param name="jsRuntime">JSRuntime service to invoke import method.</param>
            <param name="reference">Represents a reference to a rendered element.</param>
            <param name="rippleObject">Ripple object for performing the ripple effect.</param>
            <returns>Async Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.DataSourceTypeConverter">
            <summary>
            Custom JSON serialization type converter for the DataSource properties.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IBaseComponent">
            <summary>
            An interface for BaseComponent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IJSInteropAdaptor">
            <summary>
            An interface for implementing JSInteropAdaptor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.JSInteropAdaptor">
            <summary>
            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.IValidator">
            <summary>
            Interface for validator.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationContext">
            <summary>
            Validation context that shares the current validated field details.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationResult">
            <summary>
            Validation result of the currently done validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.Validator">
            <summary>
            Validator that handles column validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RequiredValidator">
            <summary>
            Class that performs required field validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.EmailAddressValidator">
            <summary>
            Class that performs email validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MaxLengthValidator">
            <summary>
            Class that performs max length validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MinLengthValidator">
            <summary>
            Class that performs min length validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.StringLengthValidator">
            <summary>
            Class that performs range length or string length validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RangeValidator">
            <summary>
            Class that performs range validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.RegexValidator">
            <summary>
            Class that performs regex validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.NumberValidator">
            <summary>
            Class that performs number validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MaxValidator">
            <summary>
            Class that performs max value validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.MinValidator">
            <summary>
            Class that performs min value validation.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Internal.ValidationRuleBase">
            <summary>
            Provides validation rules and message customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Required">
            <summary>
            Validates the given value is present or not null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.RangeLength">
            <summary>
            Validates that given string is in range length given.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Range">
            <summary>
            Validates that given value is within range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.MinLength">
            <summary>
            Validates that given value length is greater than minlength value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.MaxLength">
            <summary>
            Validates that given value length is lesser than maxlength value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.RegexPattern">
            <summary>
            Validates that given value matches the given regex.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Email">
            <summary>
            Validates that given value is an e-mail.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Number">
            <summary>
            Validates that given value is a number.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Min">
            <summary>
            Validates that given value is greater than min value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Max">
            <summary>
            Validates that given value is lesser than max value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Internal.ValidationRuleBase.Messages">
            <summary>
            Gets or sets the error messages for the validation rules.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DOM">
            <summary>
            The HTML DOM equivalent C# class object to define basic properties and perform the basic DOM operations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.ID">
            <summary>
            A unique ID of the HTML DOM element object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.XPath">
            <summary>
            Gets or sets xPath.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.DomUUID">
            <summary>
            Gets or sets DOM UID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.ElementID">
            <summary>
            Gets or sets element ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DOM.JsRuntime">
            <summary>
            Gets or sets JsRuntime.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.AddClass(System.String[])">
            <summary>
            Add a list of CSS classes to the HTML DOM element.
            </summary>
            <param name="classList">An array of string CSS class to be added in the HTML DOM.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.RemoveClass(System.String[])">
            <summary>
            Remove a list of CSS classes in the HTML DOM element.
            </summary>
            <param name="classList">An array of string CSS class to be removed in the HTML DOM.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.GetClassList">
            <summary>
            Get the CSS class names from the HTML DOM element.
            </summary>
            <returns>CSS class names in string of Array.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.SetAttribute``1(System.String,``0)">
            <summary>
            Set the attribute to the HTML DOM element.
            </summary>
            <typeparam name="T">The attribute value type.</typeparam>
            <param name="attributeName">The attribute name needs to be updated in the HTML element.</param>
            <param name="attributeValue">The attribute value needs to be updated to the corresponding attribute in the HTML element.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DOM.GetAttribute``1(System.String)">
            <summary>
            Get the attribute value from the HTML DOM element.
            </summary>
            <typeparam name="T">The result.</typeparam>
            <param name="attributeName">The attribute name to get the attribute value from the HTML element.</param>
            <returns>Returns the HTML attribute value with specific type.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.AnimationEffect">
            <summary>
            Specifies the Animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeftIn">
            <summary>
            Defines the Animation effect as SlideLeftIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRightIn">
            <summary>
            Defines the Animation effect as SlideRightIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeIn">
            <summary>
            Defines the Animation effect as FadeIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeOut">
            <summary>
            Defines the Animation effect as FadeOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeZoomIn">
            <summary>
            Defines the Animation effect as FadeZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FadeZoomOut">
            <summary>
            Defines the Animation effect as FadeZoomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.ZoomIn">
            <summary>
            Defines the Animation effect as ZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.ZoomOut">
            <summary>
            Defines the Animation effect as ZoomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeft">
            <summary>
            Defines the Animation effect as SlideLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRight">
            <summary>
            Defines the Animation effect as SlideRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftDownIn">
            <summary>
            Defines the Animation effect as FlipLeftDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftDownOut">
            <summary>
            Defines the Animation effect as FlipLeftDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftUpIn">
            <summary>
            Defines the Animation effect as FlipLeftUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipLeftUpOut">
            <summary>
            Defines the Animation effect as FlipLeftUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightDownIn">
            <summary>
            Defines the Animation effect as FlipRightDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightDownOut">
            <summary>
            Defines the Animation effect as FlipRightDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightUpIn">
            <summary>
            Defines the Animation effect as FlipRightUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipRightUpOut">
            <summary>
            Defines the Animation effect as FlipRightUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXDownIn">
            <summary>
            Defines the Animation effect as FlipXDownIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXDownOut">
            <summary>
            Defines the Animation effect as FlipXDownOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXUpIn">
            <summary>
            Defines the Animation effect as FlipXUpIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipXUpOut">
            <summary>
            Defines the Animation effect as FlipXUpOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYLeftIn">
            <summary>
            Defines the Animation effect as FlipYLeftIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYLeftOut">
            <summary>
            Defines the Animation effect as FlipYLeftOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYRightIn">
            <summary>
            Defines the Animation effect as FlipYRightIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.FlipYRightOut">
            <summary>
            Defines the Animation effect as FlipYRightOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideBottomIn">
            <summary>
            Defines the Animation effect as SlideBottomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideBottomOut">
            <summary>
            Defines the Animation effect as SlideBottomOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideDown">
            <summary>
            Defines the Animation effect as SlideDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideUp">
            <summary>
            Defines the Animation effect as SlideUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideLeftOut">
            <summary>
            Defines the Animation effect as SlideLeftOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideRightOut">
            <summary>
            Defines the Animation effect as SlideRightOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideTopIn">
            <summary>
            Defines the Animation effect as SlideTopIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.SlideTopOut">
            <summary>
            Defines the Animation effect as SlideTopOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.AnimationEffect.None">
            <summary>
            Defines the Animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Theme">
            <summary>
            Defines the theme style of the Syncfusion component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Material">
            <summary>
            Renders the Syncfusion component with material theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap">
            <summary>
            Renders the Syncfusion component with bootstrap theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.HighContrastLight">
            <summary>
            Renders the Syncfusion component with high contrast light theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Fabric">
            <summary>
            Renders the Syncfusion component with fabric theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.MaterialDark">
            <summary>
            Renders the Syncfusion component with material dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.FabricDark">
            <summary>
            Renders the Syncfusion component with fabric dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.HighContrast">
            <summary>
            Renders the Syncfusion component with high contrast theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.BootstrapDark">
            <summary>
            Renders the Syncfusion component with bootstrap dark theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Bootstrap4">
            <summary>
            Renders the Syncfusion component with bootstrap4 theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.Tailwind">
            <summary>
            Renders the Syncfusion component with tailwind theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Theme.TailwindDark">
            <summary>
            Renders the Syncfusion component with tailwind dark theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.ISyncfusionStringLocalizer">
            <summary>
            An interface for processing the Syncfusion UI component's Localization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.ISyncfusionStringLocalizer.ResourceManager">
            <summary>
            ResourceManager for processing the resource file parsing.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.ISyncfusionStringLocalizer.GetText(System.String)">
            <summary>
            Return the Localized value from the resource file.
            </summary>
            <param name="key">Key string to get the localized value.</param>
            <returns>Returns the localized string.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.SfBase">
            <exclude/>
            <summary>
            Base class for internal processing.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SfBaseComponent">
            <summary>
            A Base Component for all the Syncfusion Blazor UI components to implement the common functionalities.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.Dispose">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ComponentDispose">
            <summary>
            The virtual method to override the Dispose method at component side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnAfterScriptRendered">
            <summary>
            Notify the component about the required scripts are rendered in the web page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeScriptRendered">
            <summary>
            Invoke method for ScriptDependencies class to notify script rendered in web page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeMethod(System.String,System.Object[])">
            <summary>
            Invokes JSInterop for void return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.InvokeMethod``1(System.String,System.Boolean,System.Object[])">
            <summary>
            Invokes JSInterop for object return type methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.NotifyPropertyChanges``1(System.String,``0,``0,System.Boolean)">
            <summary>
            Notify the property value changes and it will be tracked in the PropertyChanges.
            </summary>
            <param name="propertyName">Name of the property needs to be compared.</param>
            <param name="publicValue">Public value of the property.</param>
            <param name="privateValue">Private value of the property.</param>
            <param name="updatePrevProps">Private value of the Previous property</param>
            <returns>Returns T.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.UpdateObservableEvents``1(System.String,``0,System.Boolean)">
            <summary>
            Wire or unwire observable events to a specific ObservableCollection object.
            </summary>
            <param name="propertyName">ObservableCollection property name to track it in PropertyChanges.</param>
            <param name="dataValue">A ObservableCollection data object to bind or unbind the events.</param>
            <param name="unwire">Set true to unwire observable events to the ObservableCollection object.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ObservableCollectionChanged(System.String,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            INotifyCollectionChanged event handler method to track the changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.ObservablePropertyChanged(System.String,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            INotifyPropertyChanged event handler method to track the changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseComponent.OnObservableChange(System.String,System.Object,System.Boolean,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Overridable Method for INotifyCollectionChanged event handler to track the changes.
            </summary>
            <param name="propertyName">Observable property name.</param>
            <param name="sender">Observable model object.</param>
            <param name="isCollectionChanged">Sets true if the observable collection changed.</param>
            <param name="e">Changed Event Args</param>
        </member>
        <member name="T:Syncfusion.Blazor.SyncfusionBlazor">
            <summary>
            A class to add the Syncfusion Blazor service to the service collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazor.AddSyncfusionBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds Syncfusion Blazor service to the service collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazor.AddSyncfusionBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Syncfusion.Blazor.GlobalOptions})">
            <summary>
            Adds Syncfusion Blazor service to the service collection.
            </summary>
            <param name="services">Registered collection of services.</param>
            <param name="configure">A callback to configure <see cref="T:Syncfusion.Blazor.GlobalOptions"/>.</param>
            <returns>Collection of services.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.SyncfusionBlazorService">
            <summary>
            Represents an instance of Syncfusion Blazor service.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.#ctor(Microsoft.Extensions.Options.IOptions{Syncfusion.Blazor.GlobalOptions})">
            <exclude />
            /// <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.SyncfusionBlazorService"/> class.
            </summary>
            <param name="configure">Configured global options for Syncfusion Blazor.</param>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsEnabledScriptIsolation">
            <summary>
            Specifies global script rendering in the application, when IgnoreScriptIsolation is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsCultureLoaded">
            <summary>
            Specifies the current culture is set to the library for all type of components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsScriptRendered">
            <summary>
            Specifies the init JSInterop script is loaded, when DisableScriptManager is false.
            Specifies the IsDevice JSInterop call invoked, when DisableScriptManager is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsLicenseValidated">
            <summary>
            Specifies whether the license validated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsDeviceMode">
            <summary>
            Specifies the application is rendering in device mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.ScriptHashKey">
            <summary>
            Specifies the application is rendering in device mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsFirstResource">
            <summary>
            Specifies the first component rendering in the application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SyncfusionBlazorService.IsFirstBaseResource">
            <summary>
            Specifies the first BaseComponent inherited rendering in the application.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableScriptIsolation(System.Boolean)">
            <summary>
            Enable Global Script to the Syncfusion Blazor components.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableRipple">
            <summary>
            Enable ripple effect to the Syncfusion Blazor components for material design theme.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.EnableRtl(System.Boolean)">
            <summary>
            Enable right-to-left text direction to the Syncfusion Blazor components.
            </summary>
            <param name="enable">Set false to disable right-to-left text direction.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.IsDevice">
            <summary>
            Returns true when the application is running on a mobile or IPad device.
            This method should be called only in the OnAfterRenderAsync life cycle method.
            </summary>
            <returns>Returns true, if the application rendering in mobile or IPad devices.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.SyncfusionBlazorService.SetIsDevice(System.Boolean)">
            <exclude />
            <summary>Update script rendered property after the init script loaded in the web page.</summary>
            <param name="isDevice">Boolean value to identify whether the application is rendering in mobile or IPad devices.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.GlobalOptions">
            <summary>
            Options to configure global settings for our Syncfusion Blazor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.GlobalOptions.IgnoreScriptIsolation">
            <summary>
            Gets or sets whether the Syncfusion Blazor scripts are loaded internally using JavaScript Isolation or refer to the required scripts from the application-end.
            </summary>
            <remarks>
            false, if the Blazor scripts are loaded from built-in source using JavaScript Isolation internally and the default value is false.
            When the value is true, manual script or CDN script reference is required in the application-end.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.GlobalOptions.EnableRippleEffect">
            <summary>
            Specifies the ripple effect enabled in the application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.GlobalOptions.EnableRtl">
            <summary>
            Specifies the Rtl mode enabled in the application.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfButton">
            <summary>
            The Button is a graphical user interface element that triggers an event on its click action.
            It can contain a text, an image, or both.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.ChildContent">
            <summary>
            Sets content for button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Content">
            <summary>
            Defines the text content of the button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the button element. The Button types, styles, and
            size can be defined by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Disabled">
            <summary>
            Specifies a value that indicates whether the Button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.EnableRtl">
            <summary>
            Enable or disable rendering Button component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the Button that is used to include an icon.
            Buttons can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IconPosition">
            <summary>
            Positions the icon based on the text content in the button and its default value is Left.
            The possible values are:
            - Left: The icon will be positioned to the left of the text content.
            - Right: The icon will be positioned to the right of the text content.
            - Top: The icon will be positioned to the top of the text content.
            - Bottom: The icon will be positioned to the bottom of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IsPrimary">
            <summary>
            Allows the appearance of the button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.IsToggle">
            <summary>
            Makes the Button toggle, when set to true. When you click it, the state changes from normal to active or viceversa.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as id, title etc., to the button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.OnClick">
            <summary>
            Triggers when button element is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfButton.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfButton.FocusIn">
            <summary>
            Sets the focus to button element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfButton.FocusAsync">
            <summary>
            Sets the focus to button element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.IconPosition">
            <summary>
            Defines the icon position of Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Left">
            <summary>
            To position icon left to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Right">
            <summary>
            To position icon right to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Top">
            <summary>
            To position icon above the content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.IconPosition.Bottom">
            <summary>
            To position icon below the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfCheckBox`1">
            <summary>
            The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.
            It contains checked, unchecked, and indeterminate states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Label">
            <summary>
            Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition">
            <summary>
            Positions label before/after the CheckBox.
            The possible values are:
            - Before - The label is positioned to left of the CheckBox.
            - After - The label is positioned to right of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate">
            <summary>
            Specifies a value that indicates whether the CheckBox is in indeterminate state or not.
            When set to true, the CheckBox will be in indeterminate state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.IndeterminateChanged">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState">
            <summary>
            Specifies a value to enable/disable tri state functionality in CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfCheckBox`1.ValueChange">
            <summary>
            Triggers when the CheckBox state has been changed by user interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipEvents">
            <summary>
            Configure handlers to handle the events with the Chip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnBeforeClick">
            <summary>
            This click event will get triggered once the chip is before click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnClick">
            <summary>
            This click event will get triggered once the chip is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.Created">
            <summary>
            This created event will get triggered once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.Destroyed">
            <summary>
            This created event will get triggered once the component successfuly disposed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEvents.OnDelete">
            <summary>
            This delete event will get triggered before removing the chip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipItems">
            <summary>
            Configures the collection of chipitem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.ChildContent">
            <summary>
            Indicates the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItems.Chips">
            <summary>
            Indicates the Chips List.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItems.UpdateChildProperty(Syncfusion.Blazor.Buttons.ChipItem)">
            <summary>
            Updates the Chips property and returns the count.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipItem">
            <summary>
            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.
            </summary>
            <summary>
            Partial Class ChipItem.
            </summary>
            <summary>
            Partial Class ChipItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Parent">
            <summary>
            Indicates the ChipItems component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.BaseParent">
            <summary>
            Indicates the SfChip component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.ChipItem.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.CssClass">
            <summary>
            Specifies the custom classes to be added to the chip element used to customize the Chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Enabled">
            <summary>
            Specifies a value that indicates whether the chip component is enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingIconCss">
            <summary>
            Specifies the leading icon CSS class for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingIconUrl">
            <summary>
            Specifies the leading icon url for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.LeadingText">
            <summary>
            Specifies the customized text value for the avatar in the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Text">
            <summary>
            Specifies the text content for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.TrailingIconCss">
            <summary>
            Specifies the trailing icon CSS class for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.TrailingIconUrl">
            <summary>
            Specifies the leading icon url for the chip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.Value">
            <summary>
            This value property helps to store the chip component values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipItem.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as title to the each chip element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SelectionType">
            <summary>
            Different selection types that are applicable for the Chip component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.Single">
            <summary>
            Single selection allows to select a single chip from a set of ChipItem/ChipItems.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.Multiple">
            <summary>
            Multiple selection allows to select multipe chips from a set of ChipItem/ChipItems.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.SelectionType.None">
            <summary>
            Selection of chip will be restricted in none type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChipEventArgs">
            <summary>
            Interface for Chip Events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Cancel">
            <summary>
            It denotes whether the item can be deleted or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Element">
            <summary>
            It denotes the deleted Item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Index">
            <summary>
            It denotes the deleted item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Selected">
            <summary>
            It denotes whether the clicked item is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Text">
            <summary>
            It denotes the deleted item text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChipEventArgs.Value">
            <summary>
            It denotes the deleted item value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfChip">
            <summary>
            Partial Class SfChip.
            </summary>
            <summary>
            Specifies the Partial class SfChip.
            </summary>
            <summary>
            Partial Class SfChip.
            </summary>
            <summary>
            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnInitializedAsync">
            <summary>
            Method gets invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.CssClass">
            <summary>
            Specifies the custom classes to be added to the chip element used to customize the chip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Chips">
            <summary>
            This chips property helps to render chipitem component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.EnableDelete">
            <summary>
            This enableDelete property helps to enable delete functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Enabled">
            <summary>
            This enabled property helps to enable/disable chipitem component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.SelectedChips">
            <summary>
            This selectedChips property helps to select chip items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.Selection">
            <summary>
            This selection property enables chip selection type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfChip.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as title, native events etc., to the wrapper element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.FindChip(System.String)">
            <summary>
            A function that finds chip based on given chip value.
            </summary>
            <param name="chipValue">Value of the chip need to be passed to get the corresponding chip model.</param>
            <returns>GetItem.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetSelectedChips">
            <summary>
            A function that returns selected chips data.
            </summary>
            <returns>selectedChipModels.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.RemoveChips(System.String[])">
            <summary>
            A function that removes chip items based on given chip values.
            </summary>
            <param name="removableChipValues">Values of the chips which are to be removed should be passed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.SelectChips(System.String[])">
            <summary>
            A function that selects chip items based on given index.
            </summary>
            <param name="selectableChips">Values of the chips which are to be selected should be passed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.AddChip(Syncfusion.Blazor.Buttons.ChipItem)">
            <summary>
            A function that adds chip items based on given input.
            </summary>
            <param name="item">Chip Item to be added should be passed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateChips(System.Collections.Generic.List{Syncfusion.Blazor.Buttons.ChipItem})">
            <summary>
            Updates the child properties of the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.RefeshComponent">
            <summary>
            Re-renders the complete chip component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateAttributes">
            <summary>
            Updates the class and multiselection attributes of the chip root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetItem(System.String)">
            <summary>
            Returns a ChipItem based on a value of a chip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateRefsCount(System.Int32)">
            <summary>
            Updates the chip elements count.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetAttributes(System.Int32)">
            <summary>
            Updates the text, icons url/class and attributes of each chip if multiple chip rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.UpdateAttributes(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates the attributes value.
            </summary>
            <param name="htmlAttributes">The htmlAttributes.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnDeleteClick(System.Int32,System.Boolean)">
            <summary>
            Delete click event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipMouseDown(System.Int32,System.Boolean)">
            <summary>
            Chip element mouse down event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetActualElementRef(System.Int32[])">
            <summary>
            Return element references based on index values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipClick(System.Int32,System.Boolean)">
            <summary>
            Chip element click event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.GetEventArgs(System.Int32)">
            <summary>
            Returns the click event arguments.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipFocusOut">
            <summary>
            Chip element focus out handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnChipFocus(System.Int32)">
            <summary>
            Chip element focus handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.OnKeyDown(System.Int32,Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Chip element key down handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfChip.ComponentDispose">
            <summary>
            Component dispose handled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.LabelPosition">
            <summary>
            Defines the label position of component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.LabelPosition.After">
            <summary>
            To position label after the component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Buttons.LabelPosition.Before">
            <summary>
            To position label before the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChangeEventArgs`1">
            <summary>
            Arguments for `ValueChange` event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeEventArgs`1.Checked">
            <summary>
            Returns the checked value of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeEventArgs`1.Event">
            <summary>
            Returns the event parameters of the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.ChangeArgs`1">
            <summary>
            Interface for Radio Button change event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeArgs`1.Value">
            <summary>
            Returns the value of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.ChangeArgs`1.Event">
            <summary>
            Returns the event parameters of the RadioButton.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.CheckBoxModel`1">
            <summary>
            Interface for a class CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Checked">
            <summary>
            Specifies a value that indicates whether the CheckBox is `checked` or not.
            When set to `true`, the CheckBox will be in `checked` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the CheckBox element.
            You can add custom styles to the CheckBox by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Disabled">
            <summary>
            Specifies a value that indicates whether the CheckBox is `disabled` or not.
            When set to `true`, the CheckBox will be in `disabled` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as disabled, value etc., to the element.
            If you configured both property and equivalent html attribute then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Indeterminate">
            <summary>
            Specifies a value that indicates whether the CheckBox is in `indeterminate` state or not.
            When set to `true`, the CheckBox will be in `indeterminate` state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Label">
            <summary>
            Defines the caption for the CheckBox, that describes the purpose of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.LabelPosition">
            <summary>
            Positions label `before`/`after` the CheckBox.
            The possible values are:
             Before - The label is positioned to left of the CheckBox.
             After - The label is positioned to right of the CheckBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Name">
            <summary>
            Defines `name` attribute for the CheckBox.
            It is used to reference form data (CheckBox value) after a form is submitted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.CheckBoxModel`1.Value">
            <summary>
            Defines `value` attribute for the CheckBox.
            It is a form data passed to the server when submitting the form.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfInputBase`1">
            <summary>
            A base class for form input components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.ChildContent">
            <exclude/>
            <summary>
            Defines the caption for the input, that describes the purpose of the input including HTML and its customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the component wrapper element.
            You can add custom styles to the component by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name">
            <summary>
            Defines name attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value">
            <summary>
            Defines value attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked">
            <summary>
            Specifies a value that indicates whether the component is checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CheckedChanged">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.CheckedExpression">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Disabled">
            <summary>
            Specifies a value that indicates whether the component is disabled or not.
            When set to true, the component will be in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as title , native events etc., to the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfInputBase`1.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfInputBase`1.FocusIn">
            <summary>
            Sets the focus to component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfInputBase`1.FocusAsync">
            <summary>
            Sets the focus to component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Buttons.SfInputBase`1.Click">
            <exclude/>
            <summary>
            Clicks the element and gets focus on it.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfRadioButton`1">
            <summary>
            The RadioButton is a graphical user interface element that allows you to select one option from the choices.
            It contains checked and unchecked states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.Label">
            <summary>
            Defines the caption for the RadioButton, that describes the purpose of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition">
            <summary>
            Positions label `before`/`after` the RadioButton.
            The possible values are:
            - Before: The label is positioned to left of the RadioButton.
            - After: The label is positioned to right of the RadioButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfRadioButton`1.ValueChange">
            <summary>
            Event trigger when the RadioButton state has been changed by user interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Buttons.SfSwitch`1">
            <summary>
            The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.OnLabel">
            <summary>
            Specifies a text that indicates the Switch is in checked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.OffLabel">
            <summary>
            Specifies a text that indicates the Switch is in unchecked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Buttons.SfSwitch`1.ValueChange">
            <summary>
            Triggers when Switch state has been changed by user interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Adaptors">
            <summary>
            Specifies the data adaptors.
            <list type="bullet">
            <item>
            <term>BlazorAdaptor</term>
            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>
            </item>
            <item>
            <term>ODataAdaptor</term>
            <description>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </description>
            </item>
            <item>
            <term>ODataV4Adaptor</term>
            <description>
            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services
            </description>
            </item>
            <item>
            <term>WebApiAdaptor</term>
            <description>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </description>
            </item>
            <item>
            <term>UrlAdaptor</term>
            <description>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </description>
            </item>
            <item>
            <term>RemoteSaveAdaptor</term>
            <description>
            Remote Save Adaptor is used for binding JSON data.
            It interacts with remote services only for CRUD operations.
            </description>
            </item>
            <item>
            <term>CustomAdaptor</term>
            <description>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component
            extended from DataAdaptor class.
            </description>
            </item>
            <item>
            <term>JsonAdaptor</term>
            <description>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.JsonAdaptor">
            <summary>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.BlazorAdaptor">
            <summary>
            BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.ODataAdaptor">
            <summary>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.ODataV4Adaptor">
            <summary>
            OData v4 Adaptor provies ability to consume and manipulate data from OData v4 services.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.UrlAdaptor">
            <summary>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.WebApiAdaptor">
            <summary>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.RemoteSaveAdaptor">
            <summary>
            Remote Save Adaptor is used for binding JSON data.
            It interacts with remote services only for CRUD operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Adaptors.CustomAdaptor">
            <summary>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component
            extended from DataAdaptor class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Operator">
            <summary>
            Specifies the operator list used for filtering or searching operations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.None">
            <summary>
            No operator is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.Contains">
            <summary>
            Filter items by contains operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.StartsWith">
            <summary>
            Filter items by starts with operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.EndsWith">
            <summary>
            Filter items by ends with operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.Equal">
            <summary>
            Filter items by equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.NotEqual">
            <summary>
            Filter items by not-equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.GreaterThan">
            <summary>
            Filter items by greater than operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.GreaterThanOrEqual">
            <summary>
            Filter items by greater than or equal operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.LessThan">
            <summary>
            Filter items by less than operator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Operator.LessThanOrEqual">
            <summary>
            Filter items by less than or equal operator.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IAdaptor">
            <summary>
            Provides the members for data adaptor class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.GetName">
            <summary>
            Returns the adaptor name.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.SetRunSyncOnce(System.Boolean)">
            <summary>
            Runs the data operation synchronously.
            </summary>
            <param name="runSync">Enables synchronous data operation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessQuery(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Read query from <see cref="T:Syncfusion.Blazor.Data.Query"/> and make it understandable by
            data source.
            </summary>
            <param name="queries">Specifies the query.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessCrudResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the CRUD operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.PerformDataOperation``1(System.Object)">
            <summary>
            Performs data operation. If its a remote data source then make a server request.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.IsRemote">
            <summary>
            Returns true if data source is remote service.
            </summary>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.SetModelType(System.Type)">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Update(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Remove(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Handles the remove operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation in dynamic objects.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.Update(Syncfusion.Blazor.DataManager,System.String,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation for Dynamic objects. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.AddParams(Syncfusion.Blazor.Data.RequestOptions,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Adds additional paramerters from Query instance to server request.
            </summary>
            <param name="options"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending server request.
            </summary>
            <param name="request">Specifies the HttpRequestMessage instance.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IAdaptor.ProcessBatchResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation batch response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.AdaptorBase">
            <summary>
            Base class for all data adaptors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.AdaptorBase.DataManager">
            <summary>
            Specifies the data manager instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.AdaptorBase.RunSyncOnce">
            <summary>
            When true, runs data operation synchronously. Applicable only for BlazorAdaptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.SetRunSyncOnce(System.Boolean)">
            <summary>
            Runs the data operation synchronously.
            </summary>
            <param name="runSync">Enables synchronous data operation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.GetName">
            <summary>
            Returns the adaptor name.
            </summary>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.IsRemote">
            <summary>
            Returns true if data source is remote service.
            </summary>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.SetModelType(System.Type)">
            <summary>
            To get model type.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessQuery(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Read query from <see cref="T:Syncfusion.Blazor.Data.Query"/> and make it understandable by
            data source.
            </summary>
            <param name="queries">Specifies the query.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.PerformDataOperation``1(System.Object)">
            <summary>
            Performs data operation. If its a remote data source then make a server request.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessCrudResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the CRUD operation response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data manager instance.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Update(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Remove(Syncfusion.Blazor.DataManager,System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Handles the remove operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Insert(Syncfusion.Blazor.DataManager,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Handles the new item add operation in dynamic objects.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.Update(Syncfusion.Blazor.DataManager,System.String,System.Dynamic.IDynamicMetaObjectProvider,System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the item update operation.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BatchUpdate(Syncfusion.Blazor.DataManager,System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},System.Collections.Generic.List{System.Dynamic.IDynamicMetaObjectProvider},Syncfusion.Blazor.Data.Utils,System.String,System.Nullable{System.Int32},Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Handles the batch update operation for Dynamic objects. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="dataManager">DataManager instance.</param>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="e">Specifies the url and its key.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="query">Query class instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.AddParams(Syncfusion.Blazor.Data.RequestOptions,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Adds additional paramerters from Query instance to server request.
            </summary>
            <param name="options"></param>
            <param name="queries"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending server request.
            </summary>
            <param name="request">Specifies the HttpRequestMessage instance.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.AdaptorBase.ProcessBatchResponse``1(System.Object,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Process the data operation batch response/result from the data source and make it understandable by user end.
            </summary>
            <typeparam name="T">Specifies the data source model type.</typeparam>
            <param name="data">Specifies the data.</param>
            <param name="queries">Specifies the query.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RemoteOptions">
            <summary>
            Defines internal adaptor options.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.From">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.RequestType">
            <summary>
            Gets or sets the request type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.SortBy">
            <summary>
            Gets or sets the sort field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Select">
            <summary>
            Gets or sets the select field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Skip">
            <summary>
            Gets or sets the records to skip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Group">
            <summary>
            Gets or sets the group criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Take">
            <summary>
            Gets or sets the records to take.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Search">
            <summary>
            Gets or sets the search string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Count">
            <summary>
            Gets or sets the count.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Where">
            <summary>
            Gets or sets the filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Aggregates">
            <summary>
            Gets or sets the aggregate details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Expand">
            <summary>
            Gets or sets the navigation table.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Accept">
            <summary>
            Gets or sets the accept type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.MultipartAccept">
            <summary>
            Gets or sets the multipart type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Batch">
            <summary>
            Gets or sets the batch value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ChangeSet">
            <summary>
            Gets or sets the change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchPre">
            <summary>
            Gets or sets the batch prefix.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ContentId">
            <summary>
            Gets or sets the content id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchContent">
            <summary>
            Gets or sets the batch content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.ChangeSetContent">
            <summary>
            Gets or sets the change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.BatchChangeSetContentType">
            <summary>
            Gets or sets the batch change set.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.UpdateType">
            <summary>
            Gets or sets the http update type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.LocalTime">
            <summary>
            Enables local time conversion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.Apply">
            <summary>
            Gets or sets the odatav4 $apply value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RemoteOptions.EnableODataSearchFallback">
            <summary>
            Enable odatav4 search by $filter.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.Equals(System.Object)">
            <summary>
            Compares the specified instance and the current instance of RemoteOptions
                for value equality.
            </summary>
            <param name="obj">The instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.Equals(Syncfusion.Blazor.Data.RemoteOptions)">
            <summary>
            Compares the specified instance and the current instance of RemoteOptions
                for value equality.
            </summary>
            <param name="other">The instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.op_Equality(Syncfusion.Blazor.Data.RemoteOptions,Syncfusion.Blazor.Data.RemoteOptions)">
            <summary>
            Handles equal
            </summary>
            <param name="point1">argument one</param>
            <param name="point2">argument two</param>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.RemoteOptions.op_Inequality(Syncfusion.Blazor.Data.RemoteOptions,Syncfusion.Blazor.Data.RemoteOptions)">
            <summary>
            Handles unequal
            </summary>
            <param name="point1">argument one</param>
            <param name="point2">argument two</param>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.CRUDModel`1">
            <summary>
            Defines the members of the CRUD arguments send during server request. Use this class to model
            bind request parameters while using UrlAdaptor.
            </summary>
            <typeparam name="T">Type of the data.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Action">
            <summary>
            Specifies the action initiated the request. Possible values are add, update or remove.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Table">
            <summary>
            Specifies the Table name(if any) to be updated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.KeyColumn">
            <summary>
            Specifies the primary key column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Key">
            <summary>
            Specifies the Primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Value">
            <summary>
            Specifies the modified/added record. For batch operation use Added, Changed and Deleted property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Added">
            <summary>
            Specifies the list of added records while batch editing.
            </summary>
            <remarks>The Added property will holds values on batch editing only.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Changed">
            <summary>
            Specifies the list of updated records while batch editing.
            </summary>
            <remarks>The Changed property will holds values on batch editing only.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Deleted">
            <summary>
            Specifies the list of deleted records while batch editing.
            </summary>
            <remarks>The Deleted property will holds values on batch editing only.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.CRUDModel`1.Params">
            <summary>
            Holds the additional parameters passed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Utils">
            <summary>
            Class holds URL and Key for batch operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Utils.Url">
            <summary>
            Specifies the batch url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Utils.Key">
            <summary>
            Specifies the batch primary key value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RequestOptions">
            <summary>
            Defines members of the request option for remote data handling.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Url">
            <summary>
            Specifies the service url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.BaseUrl">
            <summary>
            Specifies the application base url.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.RequestMethod">
            <summary>
            Specifies the Http request method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Data">
            <summary>
            Specifies the data to be posted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.Queries">
            <summary>
            Specifies the source query value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.RequestOptions.ContentType">
            <summary>
            Specifies the content type. By default, application/json is used.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ApiAdaptor">
            <summary>
            Handles request and response to and from Web API created for ApiController.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.BlazorAdaptor">
            <summary>
            Handles data operation in IEnumerable data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.BlazorAdaptor.DataOperationInvoke``1(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Performs data operation.
            </summary>
            <typeparam name="T">Type of the data source item.</typeparam>
            <param name="DataSource">Data source value.</param>
            <param name="queries">Query to be processed.</param>
            <returns>DataResult.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.BlazorAdaptor.CollectChildRecords(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Performs data operation on child records.
            </summary>
            <param name="datasource">Data source value.</param>
            <param name="dm">Query to be processed.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataAdaptor">
            <summary>
            Handles request and response to and from OData service.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnPredicate(Syncfusion.Blazor.Data.WhereFilter,Syncfusion.Blazor.DataManagerRequest,System.Boolean)">
            <summary>
            Generates request filter query string from the Query value.
            </summary>
            <param name="filter">Filter criteria.</param>
            <param name="query">Query value.</param>
            <param name="requiresCast">Performs value cast. Applicable on search operation.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnEachSort(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Returns sort query string based on query.
            </summary>
            <param name="queries">Query value.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnEachSearch(Syncfusion.Blazor.Data.SearchFilter)">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">Search query.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSearch(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">List of filter queries.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSearch(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.Object)">
            <summary>
            Returns search query string based on query.
            </summary>
            <param name="e">List of filter queries.</param>
            <param name="additionParams">Additional parameters.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnCount(System.Boolean)">
            <summary>
            Returns count query string based on query.
            </summary>
            <param name="e">Request count value if it is true.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnExpand(System.Collections.Generic.List{System.String})">
            <summary>
            Returns expand query string based on query.
            </summary>
            <param name="expands">List of relational table names.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnExpand(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Returns expand query string based on query.
            </summary>
            <param name="selects">List of fields to select in relational tables.</param>
            <param name="expands">List of relational table names.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnSelect(System.Collections.Generic.List{System.String})">
            <summary>
            Returns select query string based on query.
            </summary>
            <param name="selects">List of field names to select.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.OnDistinct(System.Collections.Generic.List{System.String})">
            <summary>
            Returns distinct query string based on query.
            </summary>
            <param name="distincts">List of field names.</param>
            <returns>string.</returns>
            <remarks>Applicable only for ODataV4 services.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ODataAdaptor.CheckDate(System.String)">
            <summary>
            Check if given value is a valid date or not.
            </summary>
            <param name="date">Input date string.</param>
            <returns>bool.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.PvtOptions">
            <summary>
            Hold private options.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.OData`1">
            <summary>
            Schema for OData service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataNoCount`1">
            <summary>
            Schema for OData service response with no count.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.RemoteArgs">
            <summary>
            Remote arguments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.CrudResponse`1">
            <summary>
            Schema for CRUD OData service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataV4Adaptor">
            <summary>
            Handles request and response to and from ODataV4 service.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ODataV4`1">
            <summary>
            Schema for ODataV4 service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.UrlAdaptor">
            <summary>
            Handles request and response to and from any remote service.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.UrlResult`1">
            <summary>
            Schema for URL service response.
            </summary>
            <typeparam name="T">Type of the model.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.Data.WebApiAdaptor">
            <summary>
            Handles request and response to and from Web API controller.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Sort">
            <summary>
            Defines the sort descriptor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Sort.Name">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Sort.Direction">
            <summary>
            Gets the sort direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SearchFilter">
            <summary>
            Defines members for creating search criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Fields">
            <summary>
            Collection of fields to search.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Key">
            <summary>
            Specifies the search key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.Operator">
            <summary>
            Specifies the search operator. By default, contains operator will be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SearchFilter.IgnoreCase">
            <summary>
            Specifies that incasesensitive search to be done.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Aggregate">
            <summary>
            Defines the members of the aggregate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Aggregate.Field">
            <summary>
            Specifies the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Aggregate.Type">
            <summary>
            Specifies the aggregate type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.WhereFilter">
            <summary>
            Defines the members to build filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Field">
            <summary>
            Specifies the field name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IgnoreCase">
            <summary>
            Specifies that filter should be incasesensitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IgnoreAccent">
            <summary>
            Specifies that ignore accent/diacritic letters while searching.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.IsComplex">
            <summary>
            When true it specifies that the filter criteria is a complex one.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Operator">
            <summary>
            Gets the filter operator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.Condition">
            <summary>
            Provides the complex filter merge condition.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.value">
            <summary>
            Specifies the filter value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.WhereFilter.predicates">
            <summary>
            Specifies the collection filter criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Merge the give collection of predicates using And condition.
            </summary>
            <param name="predicates">List of predicates.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Merge the give collection of predicates using Or condition.
            </summary>
            <param name="predicates">List of predicates.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Merge the give predicate using And condition.
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the filter operator.</param>
            <param name="value">Specifies the filter value.</param>
            <param name="ignoreCase">Performs incasesensitive filtering.</param>
            <param name="ignoreAccent">Ignores accent/diacritic letters while filtering.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.And(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Merge the give predicate using And condition.
            </summary>
            <param name="predicate">Predicate to be merged.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Merge the give predicate using Or condition.
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the filter operator.</param>
            <param name="value">Specifies the filter value.</param>
            <param name="ignoreCase">Performs incasesensitive filtering.</param>
            <param name="ignoreAccent">Ignores accent/diacritic letters while filtering.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.WhereFilter.Or(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Merge the give predicate using Or condition.
            </summary>
            <param name="predicate">Predicate to be merged.</param>
            <returns>WhereFilter.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DefaultAdaptor">
            <summary>
            Provide adaptor information which sends to client side.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataResult">
            <summary>
            Defines the members of the data manager operation result.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataResult`1">
            <summary>
            Defines the members of the data manager operation result.
            </summary>
            <typeparam name="T">Type of the data source element.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Result">
            <summary>
            Gets the result of the data operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Count">
            <summary>
            Gets the total count of the records in data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.Aggregates">
            <summary>
            Gets the aggregate result based on the aggregate query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.DataResult`1.FilteredRecords">
            <summary>
            Gets the filtered records.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.BaseAdaptor">
            <summary>
            Handles custom adaptor logic.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Group`1">
            <summary>
            Defines the members of the grouped record.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.GroupGuid">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Level">
            <summary>
            Specifies the level of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.ChildLevels">
            <summary>
            Specifies the count of child if any.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Records">
            <summary>
            Specifies the ungrouped records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Key">
            <summary>
            Specifies the group key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.CountItems">
            <summary>
            Specifies the count of items in this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Items">
            <summary>
            Specifies the items of the group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Aggregates">
            <summary>
            Specifies the aggregates of this group.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Field">
            <summary>
            Specifies the field value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.HeaderText">
            <summary>
            Specifies the header text of the field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.ForeignKey">
            <summary>
            Specifies the foreign key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.Result">
            <summary>
            Specifies the result.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Group`1.GroupedData">
            <summary>
            Specifies the grouped data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IDataAdaptor">
            <summary>
            Interface for Data adaptors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.IDataAdaptor.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataManagerTypeConverter">
            <summary>
            Handles the datamanager converter.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataUtil">
            <summary>
            Provides utility method used by data manager.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetUrl(System.String,System.String,System.String)">
            <summary>
            Resolves the given base url and relative url to generate absolute url. And merge query string if any.
            </summary>
            <param name="baseUrl">Base address url.</param>
            <param name="relativeUrl">Relative url.</param>
            <param name="queryParams">Query string.</param>
            <returns>string - absolute url.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetKeyValue(System.String,System.Object)">
            <summary>
            Gets the property value with the given key.
            </summary>
            <param name="key">Property name.</param>
            <param name="value">Source object.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.ToQueryParams(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts dictionary of key/value pair to query string.
            </summary>
            <param name="Params">Input dictionary value.</param>
            <returns>string - Query string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetDistinct``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts dictionary of key/value pair to query string.
            </summary>
            <param name="dataSource">Collection of Data source.</param>
            <param name="propertyName">property name which is need to distincts </param>.
            <returns>IEnumerable Distinct collections</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetValue(System.Int32,System.Object)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.Group``1(System.Collections.IEnumerable,System.String,System.Collections.Generic.List{Syncfusion.Blazor.Data.Aggregate},System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Groups the given data source with the field name.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="jsonArray">Input data source.</param>
            <param name="field">Specifies the group by field name.</param>
            <param name="aggregates">Aggregate details to aggregate grouped records.</param>
            <param name="level">Level of the group. For parent group it is 0.</param>
            <param name="format">Specifies the format and handler method to perform group by format.</param>
            <param name="isLazyLoad">Specifies the isLazyLoad property as true to handle lazy load grouping.</param>
            <param name="isLazyGroupExpandAll">Specifies the isLazyGroupExpandAll as true to perform expand all for lazy load grouping.</param>
            <returns>IEnumerable - Grouped record.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.PerformAggregation(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Aggregate})">
            <summary>
            Performs aggregation on the given data source.
            </summary>
            <param name="jsonData">Input data source.</param>
            <param name="aggregates">List of aggregate to be calculated.</param>
            <returns>Dictionary of aggregate results.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetVal(System.Collections.IEnumerable,System.Int32,System.String)">
            <summary>
            Gets the property value from list of object.
            </summary>
            <param name="jsonData">List of object.</param>
            <param name="index">Index of the item to be processed.</param>
            <param name="field">Property name to get value.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetGroupValue(System.String,System.Object)">
            <summary>
            Gets the property value from object.
            </summary>
            <param name="nameSpace">Property name to be accessed.</param>
            <param name="from">Source object.</param>
            <returns>object - property value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetObject(System.String,System.Object)">
            <summary>
            Gets the property value from object.
            </summary>
            <param name="nameSpace">Property name to be accessed.</param>
            <param name="from">Source object.</param>
            <returns>object - property value.</returns>
            <remarks>For accessing complex/nested property value, given the nameSpace with field names delimited by dot(.).</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetEnumType(System.String,System.Type)">
            <summary>
            Returns enum column type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetFormattedValue(System.Object,System.String)">
            <summary>
            Formats the given value.
            </summary>
            <param name="value">Value to be formatted.</param>
            <param name="format">Format string.</param>
            <returns>string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetDynamicValue(System.Dynamic.DynamicObject,System.String)">
            <summary>
            Gets the property value from the DynamicObject.
            </summary>
            <param name="obj">Input dynamic object.</param>
            <param name="name">Property name to get.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DataUtil.GetExpandoValue(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Gets the property value from the ExpandoObject.
            </summary>
            <param name="obj">Input Expando object.</param>
            <param name="name">Property name to get.</param>
            <returns>object.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DataMemberBinder">
            <summary>
            Defines the data member binder for setting dynamic object property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicQueryableExtensions">
            <summary>
            Provides extension methods for Queryable source.
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable();. </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as,. </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.DynamicQueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,Syncfusion.Blazor.Data.FilterBehavior,System.Boolean,System.Type,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression.
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source">Data source.</param>
            <param name="paramExpression">Parameter expression to merge.</param>
            <param name="propertyName">Property name to be filtered.</param>
            <param name="constValue">Const value.</param>
            <param name="filterType">Filter operator type.</param>
            <param name="filterBehaviour">Specifies the filter behavior.</param>
            <param name="isCaseSensitive">Performs the case sensitive if true.</param>
            <param name="sourceType">Specifies the data source element type.</param>
            <param name="columnType">Specifies the current field type.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Data.EnumerableExtensions">
            <summary>
            Provides enumerable extension.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.EnumerableOperation">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.Execute(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="manager">Query to be executed.</param>
            <returns>IEnumerable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformGrouping(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PredicateBuilder(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates predicate with the given filter criteria.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Value can be either AND or OR.</param>
            <param name="paramExpression">Parameter expression.</param>
            <param name="type">Specifies the source type.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IEnumerable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.GetDataType(System.Collections.IEnumerable,System.Type,System.String)">
            <summary>
            Returns data type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.GetColumnType(System.Collections.IEnumerable,System.String,System.Type)">
            <summary>
            Returns column type.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformSkip(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.EnumerableOperation.PerformTake(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.IHttpHandler">
            <summary>
            Interface for http handler used by data manager.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpHandlerBase">
            <summary>
            Bas class for http handler used by data manager.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.HttpHandlerBase.GetClient">
            <summary>
            Returns http client.
            </summary>
            <returns>HttpClient</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpHandler">
            <summary>
            Handles HttpClient instance creation. Also build and sends HttpMessages request.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.HttpMessageContent">
            <summary>
            Derived HttpMessageContent class to prepare or modify the multipart type requests.
            Reference from the https://github.com/aspnet/AspNetWebStack/blob/master/src/System.Net.Http.Formatting/HttpMessageContent.cs to prepare a HttpContent extension.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.FilterBehavior">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ColumnFilter">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ColumnFilter.Value">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ColumnFilter.DisplayText">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortColumn">
            <summary>
            Defines the sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortColumn.ColumnName">
            <summary>
            Specifies the column name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortColumn.SortDirection">
            <summary>
            Specifies the sort direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicClass">
            <summary>
            Defines the dynamic class.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.DynamicProperty">
            <summary>
            Specifies the dynamic property.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.GroupContext">
            <summary>
            Defines the group context class.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ListSortDirection">
            <summary>
             Specifies the direction of a sort operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ListSortDirection.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.ListSortDirection.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortOrder">
            <summary>
            Sepcifies the sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.None">
            <summary>
            No sort order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Data.SortOrder.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortedColumn">
            <summary>
            Defines the sort column.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortedColumn.Field">
            <summary>
            Specifies the field to sort.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortedColumn.Direction">
            <summary>
            Specifies the sort order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Data.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.IsComplexType(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Blazor.Data.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Data.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Blazor.Data.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'.
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'.
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image).</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image).
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'.
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image).</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.Query">
            <summary>
            Provides methods to generate query which can be executed against data source using <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/>.
            </summary>
            <remarks>Methods in this class are chainable.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Queries">
            <summary>
            Provides various method that allow user to generate query.
            These queries is used by <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/> to process given data source and returns resultant records.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Key">
            <summary>
            Specifies the primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.FKey">
            <summary>
            Specifies the foreign key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.FromTable">
            <summary>
            Specifies the table name.
            </summary>
            <remarks>Table name is used by the remote adaptors.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Lookups">
            <summary>
            Specifies the lookup table names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Expands">
            <summary>
            Specifies the relation table/resource names.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SortedColumns">
            <summary>
            Gets the sort column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.GroupedColumns">
            <summary>
            Gets the group column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SubQuerySelector">
            <summary>
            Specifies the sub query details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.SubQuery">
            <summary>
            Specifies the sub query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IsChild">
            <summary>
            Specifies the presence of child.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Params">
            <summary>
            Gets the additional parameters to be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IsCountRequired">
            <summary>
            Specifies that count value is required in responses from remote services.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.DataManager">
            <summary>
            Gets the data manager instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.Distincts">
            <summary>
            Gets the list of distinct values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.Query.IdMapping">
            <summary>
            Gets the id mapping value used for child data source process.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.From(System.String)">
            <summary>
            Adds the table or resource name.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Page(System.Int32,System.Int32)">
            <summary>
            Sets the current page index and page size.
            </summary>
            <param name="pageIndex">Specifies the current page.</param>
            <param name="pageSize">Specifies the page size.</param>
            <returns>Query.</returns>
            <remarks>Use this method to get chunk of records from the given data source.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Take(System.Int32)">
            <summary>
            Sets the take index.
            </summary>
            <param name="pageSize">Maximum index of the record.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Skip(System.Int32,System.Int32)">
            <summary>
            Sets the current page index and page size.
            </summary>
            <param name="pageIndex">Specifies the current page.</param>
            <param name="pageSize">Specifies the page size.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Skip(System.Int32)">
            <summary>
            Sets the skip index.
            </summary>
            <param name="skip">Number of records to skip.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Range(System.Int32,System.Int32)">
            <summary>
            Gets the range of records.
            </summary>
            <param name="start">Range start index.</param>
            <param name="end">Range end index.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Select(System.Collections.Generic.List{System.String})">
            <summary>
            Selects the given fields from data source.
            </summary>
            <param name="fieldNames">List of fields to select.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(System.String,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="fieldName">Specifies the field name.</param>
            <param name="operator">Specifies the operator.</param>
            <param name="value">Specifies the filter value.</param>
            <param name="ignoreCase">Performs case sensitive filter.</param>
            <param name="ignoreAccent">Ignore accents/diacritic words during filtering.</param>
            <returns>Query.</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(Syncfusion.Blazor.Data.WhereFilter)">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="predicate">Specifies the predicate to be used.</param>
            <returns>Query.</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Where(System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter})">
            <summary>
            Filters the records with the given query.
            </summary>
            <param name="predicates">Specifies the list of predicates to be used.</param>
            <returns>Query</returns>
            <remarks>Multiple Where method can be chained to create complex filter criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Search(System.String,System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the records with the given query.
            </summary>
            <param name="searchKey">Specifies the search key.</param>
            <param name="fieldNames">Specifies the field names.</param>
            <param name="operator">Specifies the search operator.</param>
            <param name="ignoreCase">Performs case sensitive search.</param>
            <param name="ignoreAccent">Ignore accents/diacritic words during searching.</param>
            <returns></returns>
            <remarks>Multiple Search method can be chained to create complex search criteria.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.RequiresCount">
            <summary>
            Specifies that count is expected in remote service response.
            </summary>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Sort(System.String,System.String)">
            <summary>
            Sorts the data source.
            </summary>
            <param name="name">Specifies the sort name.</param>
            <param name="direction">Specifies the sort direction.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.Collections.Generic.List{System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Groups the data source.
            </summary>
            <param name="fieldNames">Specifies the column names to group.</param>
            <param name="groupFormat">Specifies the group format.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.String)">
            <summary>
            Groups the data source.
            </summary>
            <param name="fieldName">Specifies the column name.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Group(System.String,System.String)">
            <summary>
            Groups the data source.
            </summary>
            <param name="fieldName">Specifies the column name.</param>
            <param name="columnFormat">Specifies the column format.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Aggregates(System.String,System.String)">
            <summary>
            Performs the aggregate operation in the aggregate type.
            </summary>
            <param name="field">Specifies the field name.</param>
            <param name="type">Specifies the aggregate type.</param>
            <returns>Query.</returns>
            <remarks>Multiple aggregation can be performed by chaining Aggregates method.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)">
            <summary>
            Adds additional parameters to the HTTP request sent by <see cref="T:Syncfusion.Blazor.Data.SfDataManager"/>.
            </summary>
            <param name="key">Key value.</param>
            <param name="value">Additional parameter value.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Distinct(System.Collections.Generic.List{System.String})">
            <summary>
            Gets the distinct records of the given field from the data source.
            </summary>
            <param name="fieldNames">List of field names.</param>
            <returns>Query.</returns>
            <remarks>Applicable only for ODataV4Adaptor.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Expand(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the relational tables to be eager loaded.
            </summary>
            <param name="fieldNames">List of relational table names.</param>
            <returns>Query.</returns>
            <remarks>Given table names should be eager loaded. Lazy loading is not supported.</remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.Clone">
            <summary>
            Performs deep cloning of the given Query.
            </summary>
            <returns>Query.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.Query.IsEqual(Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.Data.Query)">
            <summary>
            Compares given Query instance by value.
            </summary>
            <param name="source">Source Query instance.</param>
            <param name="destination">Destination Query instance.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryConverter">
            <summary>
            Converts Query class to and from string respectively.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source.
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable();. </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as,. </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetLambdaWithComplexPropertyNullCheck(System.Collections.IEnumerable,System.String,System.Linq.Expressions.ParameterExpression,System.Type)">
            <summary>
            Generates lambda expression for the complex properties.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="paramExpression"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property.
            </summary>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,Syncfusion.Blazor.Data.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression.
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="propertyName"></param>
            <param name="constValue"></param>
            <param name="filterType"></param>
            <param name="filterBehaviour"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Select``1(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single and multiple property value.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType">Type.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetQueryableSumMethod(System.Type)">
            <summary>
            Get the exact Sum method from Queryable based on body type.
            </summary>
            <param name="bodyType"></param>
            <returns>exact method info.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.GetQueryableAverageMethod(System.Type)">
            <summary>
            Get the exact Average method from Queryable based on body type.
            </summary>
            <param name="bodyType"></param>
            <returns>exact method info.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType">Type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined.
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Blazor.Data.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName">Name of the property.</param>
            <param name="value"></param>
            <param name="filterType"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda.
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext db = new DataClasses1DataContext();.
            <para></para>            var orders = db.Orders.Skip(0).Take(100).ToList();.
            <para></para>            var queryable = orders.AsQueryable();.
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);.
            <para></para>            var binaryExp = queryable.Predicate(parameter,.
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);.
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExp);.
            <para></para>            foreach (var order in filteredOrders).
            <para></para>            {.
            <para></para>                Console.WriteLine(order);.
            <para></para>            }.
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,.
            <para></para>
            <para></para>            IQueryable queryable = nw.Orders.AsQueryable();.
            <para></para>            var parameter = queryable.Parameter();.
            <para></para>            var exp1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);.
            <para></para>            var exp2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);.
            <para></para>            var andExp = exp2.OrPredicate(exp1);.
            <para></para>            var filters = queryable.Where(parameter, andExp);.
            <para></para>            foreach (Orders item in filters).
            <para></para>            {.
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);.
            <para></para>            }.
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="predicateExpression"></param>
        </member>
        <member name="T:Syncfusion.Blazor.Data.QueryableOperation">
            <summary>
            DataOperation class that performs data operation in IQueryable type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.Execute``1(System.Linq.IQueryable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="manager">Query to be executed.</param>
            <returns>IQueryable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformGrouping``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSkip``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformTake``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSearching``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IQueryable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IQueryable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSelect(System.Linq.IQueryable,System.Collections.Generic.List{System.String})">
            <summary>
            Selects the fields from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="select">Fields to select.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.QueryableOperation.PerformSelect``1(System.Linq.IQueryable,System.Collections.Generic.List{System.String})">
            <summary>
            Selects the fields from data source.
            </summary>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <param name="dataSource">Input data source.</param>
            <param name="select">Fields to select.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Data.SortDescription">
            <summary>
             Defines the direction and the property name to be used as the criteria for
             sorting a collection.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.#ctor(System.String,Syncfusion.Blazor.Data.ListSortDirection)">
            <summary>
            Initializes a new instance of the System.ComponentModel.SortDescription structure.
            </summary>
            <param name="propertyName">The name of the property to sort the list by.</param>
            <param name="direction">The sort order.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.op_Inequality(Syncfusion.Blazor.Data.SortDescription,Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares two System.ComponentModel.SortDescription objects for value inequality.
            </summary>
            <param name="sd1">The first instance to compare.</param>
            <param name="sd2">The second instance to compare.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.op_Equality(Syncfusion.Blazor.Data.SortDescription,Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares two System.ComponentModel.SortDescription objects for value equality.
            </summary>
            <param name="sd1">The first instance to compare.</param>
            <param name="sd2">The second instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortDescription.Direction">
            <summary>
            Gets or sets a value that indicates whether to sort in ascending or descending
                order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Data.SortDescription.PropertyName">
            <summary>
            Gets or sets the property name being used as the sorting criteria.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.Equals(System.Object)">
            <summary>
            Compares the specified instance and the current instance of System.ComponentModel.SortDescription
                for value equality.
            </summary>
            <param name="obj">The System.ComponentModel.SortDescription instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.Equals(Syncfusion.Blazor.Data.SortDescription)">
            <summary>
            Compares the specified instance and the current instance of System.ComponentModel.SortDescription
                for value equality.
            </summary>
            <param name="other">The System.ComponentModel.SortDescription instance to compare.</param>
            <returns>true.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Data.SortDescription.GetHashCode">
            <summary>
            Returns the hash code.
            </summary>
            <returns>int.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.BaseComponent">
            <summary>
            A Base Component for all the Syncfusion Blazor UI components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.LocaleText">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.ID">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.IsRendered">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.ModelType">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataManager">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.TemplateClientChanges">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.UniqueId">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataContainer">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.BaseComponent.DataHashTable">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.OnInitRenderAsync">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.DataBind(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Trigger(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.UpdateModel(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.ErrorHandling(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.DataProcess(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Insert(System.String,System.String,System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Update(System.String,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.Remove(System.String,System.String,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.BatchUpdate(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.BaseComponent.UpdateTemplate(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.DataManager">
            <summary>
            The DataManager is a data management component used for performing data operations in applications.
            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.ServiceProvider">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BaseAdaptor">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.HttpClientInstance">
            <summary>
            Specifies the HttpClient instance to be used  by DataManager.
            </summary>
            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Url">
            <summary>
            Specifies the endpoint URL. DataManager requests this URL when data is needed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.AdaptorInstance">
            <summary>
            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.
            </summary>
            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.
            Injecting services into custom adaptor class, is not supported while using this approach.
            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Adaptor">
            <summary>
            Gets or sets the data adaptor to be used by DataManager.
            <list type="bullet">
            <item>
            <term>BlazorAdaptor</term>
            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>
            </item>
            <item>
            <term>ODataAdaptor</term>
            <description>
            OData Adaptor provies ability to consume and manipulate data from OData services.
            </description>
            </item>
            <item>
            <term>ODataV4Adaptor</term>
            <description>
            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services
            </description>
            </item>
            <item>
            <term>WebApiAdaptor</term>
            <description>
            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.
            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor
            </description>
            </item>
            <item>
            <term>UrlAdaptor</term>
            <description>
            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.
            </description>
            </item>
            <item>
            <term>RemoteSaveAdaptor</term>
            <description>
            Remote Save Adaptor is used for binding JSON data.
            It interacts with remote services only for CRUD operations.
            </description>
            </item>
            <item>
            <term>CustomAdaptor</term>
            <description>
            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component
            extended from DataAdaptor class.
            </description>
            </item>
            <item>
            <term>JsonAdaptor</term>
            <description>
            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DataAdaptor">
            <summary>
            Holds adaptor instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DotNetObjectRef">
            <summary>
            Holds dotnet instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.InsertUrl">
            <summary>
            Specifies the insert URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Insert method is called, request will be made to InsertUrl.
            If InsertUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RemoveUrl">
            <summary>
            Specifies the remove URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Remove method is called, request will be made to RemoveUrl.
            If RemoveUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.UpdateUrl">
            <summary>
            Specifies the update URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Update method is called, request will be made to UpdateUrl.
            If UpdateUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CrudUrl">
            <summary>
            Specifies the CRUD URL.
            </summary>
            <remarks>Applicable for remote adaptors.
            When Insert, Remove or Update method is called, request will be made to CrudUrl.
            If CrudUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BatchUrl">
            <summary>
            Specifies the batch url.
            </summary>
            <remarks>Applicable for remote adaptors.
            When SaveChanges method is called, request will be made to BatchUrl.
            If BatchUrl is not provided, Url is used as fallback.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Json">
            <summary>
            Specifies the IEnumerable collection. This data could be queried and manipulated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Headers">
            <summary>
            Specifies the key/value pair of headers.
            </summary>
            <remarks>
            Use Headers to add any custom headers to the request made by DataManager.
            Users can also send authentication bearer token using Headers property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Accept">
            <summary>
            Specifies the accept type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Data">
            <summary>
            Specifies the IEnumerale data.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.TimeTillExpiration">
            <summary>
            Specifies the time limit to clear the cached data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CachingPageSize">
            <summary>
            Specifies the caching page size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.EnableCaching">
            <summary>
            Enables data caching.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RequestType">
            <summary>
            Specifies the request type for sending data fetching.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Key">
            <summary>
            Specifies the primary key value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.CrossDomain">
            <summary>
            When true, then indicates that the request is a cross-domain request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Jsonp">
            <summary>
            Specifies the jsonp request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.DataType">
            <summary>
            Specifies the data type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Offline">
            <summary>
            Enables offline mode in datamanager.
            </summary>
            <remarks>
            Applicable for remote data source. If offline is true then initial request will be made to fetch
            data. Further actions will be handled at the in-memory data and no more request will be made to the service.
            Cached data is stored in the JSON property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.RequiresFormat">
            <summary>
            Sepcifies requires format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.guid">
            <summary>
            unique identifier.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.UniqueGuid">
            <summary>
            unique identifier
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.Parent">
            <summary>
            Parent component of DataManager.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BaseParent">
            <summary>
            Parent component of DataManager.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.ChildContent">
            <summary>
            Defines the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.UriHelper">
            <summary>
            Gets navigation manager to get base url.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManager.BaseUri">
            <summary>
            Gets the Base URL.
            </summary>
            <remarks>BaseUri will be used to get absolute of Url, InsertUrl, UpdateUrl and RemoveUrl properties.</remarks>
        </member>
        <member name="F:Syncfusion.Blazor.DataManager.HttpHandler">
            <summary>
            Specifies the http client handler.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ShouldSerializeJson">
            <summary>
            If returns true, Json property will be serialized.
            </summary>
            <returns>bool.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQuery``1(Syncfusion.Blazor.Data.Query)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class.</typeparam>
            <param name="query">Query class which will be executed against data source.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQueryAsync``1(Syncfusion.Blazor.Data.Query)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class.</typeparam>
            <param name="query">Query class which will be executed against data source.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQuery``1(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class</typeparam>
            <param name="queries">Query class which will be executed against data source.</param>
            <returns>Task</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.ExecuteQueryAsync``1(Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes given query and returns resultant data.
            </summary>
            <typeparam name="T">Type of the model class</typeparam>
            <param name="queries">Query class which will be executed against data source.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.BeforeSend(System.Net.Http.HttpRequestMessage)">
            <summary>
            Invoked before sending http request.
            </summary>
            <param name="request">HttpRequestMessage instance.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Insert``1(System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Performs the new item add operation.
            </summary>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.InsertAsync``1(System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Int32)">
            <summary>
            Performs the new item add operation.
            </summary>
            <param name="data">New item to be added.</param>
            <param name="tableName">Table name to insert new item.</param>
            <param name="query">Query class instance.</param>
            <param name="position">Position to insert the new item.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Update``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Performs the update operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.UpdateAsync``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Performs the update operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="data">Specifies the updated record.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <param name="original">Specifies the original data. Uses this original data for sending changed items alone to the server.</param>
            <param name="updateProperties">Specifies the field names to be updated.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Remove``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Performs the remove operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.RemoveAsync``1(System.String,System.Object,System.String,Syncfusion.Blazor.Data.Query)">
            <summary>
            Performs the remove operation.
            </summary>
            <param name="keyField">Specifies the primary key.</param>
            <param name="value">Specifies the primary key field value.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query instance.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.SaveChanges``1(System.Object,System.Object,System.Object,System.String,System.Nullable{System.Int32},System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Performs the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query class instance.</param>
            <param name="Original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.SaveChangesAsync``1(System.Object,System.Object,System.Object,System.String,System.Nullable{System.Int32},System.String,Syncfusion.Blazor.Data.Query,System.Object)">
            <summary>
            Performs the batch update operation. Enables user to perform add, update and remove items from data source in a single request.
            </summary>
            <param name="changed">Specifies the changed records.</param>
            <param name="added">Specifies the added records.</param>
            <param name="deleted">Specifies the deleted records.</param>
            <param name="keyField">Specifies the primary key field.</param>
            <param name="dropIndex">Specifies the record position, from which new records will be added.</param>
            <param name="tableName">Table name of the update item.</param>
            <param name="query">Query class instance.</param>
            <param name="Original">Specifies the original data. Uses this original data for sending change items alone to the server.</param>
            <returns>object.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Dispose">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataManager.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.DataManagerRequest">
            <summary>
            Defines the members of the query.
            </summary>
            <remarks>DataManagerRequest is used to model bind posted data at server side.</remarks>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Skip">
            <summary>
            Specifies the records to skip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Take">
            <summary>
            Specifies the records to take.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.antiForgery">
            <summary>
            Specifies the anti-forgery key.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.RequiresCounts">
            <summary>
            Sepcifies that the count is required in response.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Table">
            <summary>
            Specifies the table name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.IdMapping">
            <summary>
            Specifies the parent id mapping value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Group">
            <summary>
            Specifies the grouped column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Select">
            <summary>
            Specifies the select column details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Expand">
            <summary>
            Specifies the relational table names to be eagerloaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Sorted">
            <summary>
            Speccifies the sort criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Search">
            <summary>
            Specifies the search criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Where">
            <summary>
            Specifies the filter criteria.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Aggregates">
            <summary>
            Specifies the aggregate details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Params">
            <summary>
            Specifies additional parameters.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.Distinct">
            <summary>
            Specifies the field names to find distinct values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.GroupByFormatter">
            <summary>
            Holds field and format method to handle group by format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.ServerSideGroup">
            <summary>
            Specifies that perform in-built grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.RequiresFilteredRecords">
            <summary>
            Sepcifies that the filtered records is required in response.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.LazyLoad">
            <summary>
            Specifies that perform lazy load grouping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.DataManagerRequest.LazyExpandAllGroup">
            <summary>
            Specifies that to perform expand all for lazy load grouping.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataAdaptor">
            <summary>
            Abstract class for Data adaptors.
            </summary>
            <remarks>
            Extend DataAdaptor component while creating custom adaptor component. DataAdaptor component is extended from
            <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase"></see> so that
            services can be accessed from <see cref="P:Microsoft.AspNetCore.Components.OwningComponentBase.ScopedServices"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataAdaptor`1">
            <summary>
            Abstract class for Data adaptors.
            </summary>
            <remarks>
            Extend DataAdaptor{T} component while creating custom adaptor component. DataAdaptor{T} component is extended from
            <see cref="T:Microsoft.AspNetCore.Components.OwningComponentBase`1"></see> so that
            services can be accessed from <see cref="P:Microsoft.AspNetCore.Components.OwningComponentBase`1.Service"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Read(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.ReadAsync(Syncfusion.Blazor.DataManagerRequest,System.String)">
            <summary>
            Performs data Read operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Insert(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.InsertAsync(Syncfusion.Blazor.DataManager,System.Object,System.String)">
            <summary>
            Performs Insert operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Remove(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.RemoveAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Remove operation asynchronously..
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.Update(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.UpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.String,System.String)">
            <summary>
            Performs Update operation asynchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.BatchUpdate(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations synchronously.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataAdaptor`1.BatchUpdateAsync(Syncfusion.Blazor.DataManager,System.Object,System.Object,System.Object,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Performs Batch CRUD operations asynchronously.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.DataOperations">
            <summary>
            DataOperation class that performs data operation in IEnumerable and IQueryable type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="query">Query to be executed.</param>
            <returns>IEnumerable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IEnumerable - filtered records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute``1(System.Collections.Generic.IEnumerable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="query">Query to be executed.</param>
            <returns>IEnumerable - resultant records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSelect(System.Collections.IEnumerable,System.Collections.Generic.List{System.String})">
            <summary>
            Selected the given field names alone from the data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="select">List of fields to select.</param>
            <returns>IEnumerale.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IEnumerable - filtered records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.Execute``1(System.Linq.IQueryable{``0},Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source against which the query to be executed.</param>
            <param name="query">Query to be executed.</param>
            <returns>IQueryable - resultant records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformGrouping``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Groups data source by the given list of column names.
            </summary>
            <param name="dataSource">Input data source to be grouped.</param>
            <param name="grouped">List of column names by which rows will be grouped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SortedColumn})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSorting``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the data source using the given sort descriptor and returns the sorted records.
            </summary>
            <param name="dataSource">Data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable - sorted records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSkip``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Skip the given number of records from data source and returns the resultant records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="skip">Number of records to be skipped.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IQueryable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformTake``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Take the given number of records from data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="take">Number of records to be taken.</param>
            <typeparam name="T">Type of the data source elements.</typeparam>
            <returns>IEnumerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSearching``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IQueryable - searched records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformFiltering``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String)">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Filter merge condition. Value can be either AND or OR.</param>
            <returns>IQueryable - filtered records.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.DataOperations.PerformSelect``1(System.Linq.IQueryable{``0},System.Collections.Generic.List{System.String})">
            <summary>
            Selected the given field names alone from the data source.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="select">List of fields to select.</param>
            <returns>IQueryable.</returns>
            <typeparam name="T">Type of the data source elements.</typeparam>
        </member>
        <member name="T:Syncfusion.Blazor.DynamicObjectOperation">
            <summary>
            DataOperation class that performs data operation in DynamicObject type data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformDataOperations(System.Collections.IEnumerable,Syncfusion.Blazor.DataManagerRequest)">
            <summary>
            Executes the query against the given data source and returns the resultant records.
            </summary>
            <param name="DataSource">Input data source.</param>
            <param name="queries">Query to be executed against data source.</param>
            <returns>IEnumerable - resultant records.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformSorting(System.Linq.IQueryable,System.Collections.Generic.List{Syncfusion.Blazor.Data.Sort})">
            <summary>
            Sorts the given data source.
            </summary>
            <param name="dataSource">Input data source to be sorted.</param>
            <param name="sortedColumns">List of sort criteria.</param>
            <returns>IQuerable.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformFiltering(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Apply the given filter criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Input data source.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Condition to merge two filter criteria.</param>
            <param name="columnTypes">Type collection of each property in data source.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PerformSearching(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.SearchFilter},System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Apply the given search criteria against the data source and returns the filtered records.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="searchFilter">List of search criteria.</param>
            <returns>IEnumerable - searched records.</returns>
            <param name="columnTypes">Type collection of each property in data source.</param>
        </member>
        <member name="M:Syncfusion.Blazor.DynamicObjectOperation.PredicateBuilder(System.Collections.IEnumerable,System.Collections.Generic.List{Syncfusion.Blazor.Data.WhereFilter},System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Generates predicate from the filter criteria.
            </summary>
            <param name="dataSource">Data source to be filtered.</param>
            <param name="whereFilter">List of filter criteria.</param>
            <param name="condition">Condition to merge two filter criteria.</param>
            <param name="paramExpression">Parameter expression.</param>
            <param name="columnTypes">Type collection of each property in data source.</param>
            <returns>Expression.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.isDiagramRendered">
            <summary>
            This member is used only to prevent raising JS interop call for dependent controls (i.e. overview) before rendered the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.LocaleText">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.ID">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.ModelType">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataManager">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.TemplateClientChanges">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.UniqueId">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataContainer">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.SfBaseExtension.DataHashTable">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.OnInitRenderAsync">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.DataBind(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.Trigger(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.UpdateModel(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.DataProcess(System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfBaseExtension.UpdateTemplate(System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.EventData">
            <summary>
            Represents the event argument data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SfDataBoundComponent.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SfDataBoundComponent.UpdateProperty``1(System.String,``0,``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Processing the property value changes and invoking the events for two-way bindings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BasicShapeMargin">
            <summary>
            Specifies the space around the basic shape.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
              //Initialize node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
             {
               //Creates a basic shape node
               new DiagramNode()
               {
                Id="node1",
                //Size of the node
                Height=100,
                Width=100,
                Shape=new DiagramShape (){Type=Shapes.Basic,BasicShape=BasicShapes.Rectangle,Margin = new BasicShapeMargin(){ Top = 10, Left = 10, Bottom = 10, Right = 10} }
                }
              };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.BasicShapeMargin.#ctor">
            <summary>
            Specifies the space around the basic shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CancelMargin">
            <summary>
            Represents the space around the cancel port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CancelMargin.#ctor">
            <summary>
            Represents the space around the cancel port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorAnnotationDragLimit">
            <summary>
            It allows the user to limit the dragging of Connector Annotation to a certain distance.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                {
                    new DiagramConnectorAnnotation()
                    {
                     Content = "Annotation", Constraints = AnnotationConstraints.Select | AnnotationConstraints.Drag,
                     DragLimit = new ConnectorAnnotationDragLimit() { Left = 10, Top = 10, Right = 10, Bottom = 10 }
                     },
                 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorAnnotationDragLimit.#ctor">
            <summary>
            It allows the user to limit the dragging of Connector Annotation to a certain distance.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeAnnotationDragLimit">
            <summary>
            Specifies whether the node annotation can be moved or not.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
                protected override void OnInitialized()
                {
                  // A node is created and stored in the node array.
                  DiagramNode Node = new DiagramNode()
                  {
                     // Position of the node
                     OffsetX = 250,
                     OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    // Initialize port collection
                    Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                    {
                      // An annotation is created and stored in an Annotation collection of Node.
                      new DiagramNodeAnnotation() { Content = "Annotation",
                      Constraints=  AnnotationConstraints.Select|AnnotationConstraints.Drag,
                      DragLimit = new NodeAnnotationDragLimit(){Top = 30, Left = 0 ,Right = 20, Bottom = 20 } }
                     }
                   };
                  NodeCollection.Add(Node);
                 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeAnnotationDragLimit.#ctor">
            <summary>
            Specifies whether the node annotation can be moved or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorAnnotationMargin">
            <summary>
            Specifies the space around the connector annotation.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                 ConnectorCollection = new ObservableCollection<DiagramConnector>();
                 DiagramConnector Connector = new DiagramConnector()
                 {
                    SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                    TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                    Type = Segments.Orthogonal,
                    Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7" },
                    Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                    {
                      new DiagramConnectorAnnotation() { Content = "Annotation length will be varied", Width = 50, Height = 50 ,Margin = new ConnectorAnnotationMargin(){ Left=10} },
                    }
                  };
                  ConnectorCollection.Add(Connector);
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorAnnotationMargin.#ctor">
            <summary>
            Specifies the space around the connector annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorMargin">
            <summary>
            Specifies the space around the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                 DiagramConnector DiagramConnector = new DiagramConnector()
                 {
                    SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                    TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                     Margin = new ConnectorMargin()
                    {
                      Bottom = 10,
                      Top = 10,
                      Left = 10,
                      Right = 10
                     }
                   };
                   ConnectorCollection.Add(DiagramConnector);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorMargin.#ctor">
            <summary>
            Specifies the space around the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUserHandleMargin">
            <summary>
            Represents the space around the user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
                // Defines diagram's nodes collection
                public ObservableCollection<DiagramNode> NodeCollection { get; set; }
                // Defines diagram's SelectedItems
                public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
                ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
                protected override void OnInitialized()
                {
                    //Creating the user handle for cloning the objects
                     DiagramUserHandle CloneHandle = new DiagramUserHandle()
                      {
                        //Name of the user handle
                        Name = "clone",
                        //Set pathdata for userhandle
                        PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                        //set margin to the user handle
                        Margin = new DiagramUserHandleMargin() { Top = 10, Bottom = 10, Left = 20, Right = 0 }
                        };
                        //Add user handle to the user handle collection
                        UserHandles = new ObservableCollection<DiagramUserHandle>()
                        {
                         CloneHandle
                        };
                        SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                         {
                          //Enable user handle for selected items...
                          Constraints = SelectorConstraints.UserHandle,
                          UserHandles = this.UserHandles
                         };
                         NodeCollection = new ObservableCollection<DiagramNode>();
                         DiagramNode DiagramNode = new DiagramNode()
                         {
                           Id = "node1",
                           OffsetX = 100,
                           OffsetY = 100,
                           Width = 100,
                           Height = 100,
                           Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                         };
                        NodeCollection.Add(DiagramNode);
                       }
                 }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUserHandleMargin.#ctor">
            <summary>
            Represents the space around the user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FailureMargin">
            <summary>
            Represents the space around the failure port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FailureMargin.#ctor">
            <summary>
            Represents the space around the failure port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeAnnotationMargin">
            <summary>
            Represents the space around the annotation content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in the node array.
                DiagramNode Node = new DiagramNode()
                {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    // Initialize port collection
                    Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                   {
                      // An annotation is created and stored in an Annotation collection of Node.
                      new DiagramNodeAnnotation() { Content = "Annotation",
                      //set margin to label
                      Margin = new NodeAnnotationMargin(){ Top = 30, Left = 10, Bottom = 0, Right = 0}}
                    }
                  };
                  NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeAnnotationMargin.#ctor">
            <summary>
            Represents the space around the annotation content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeMargin">
            <summary>
            Sets the outer space for a node on all the four sides. By default, the margin is set to 0 in all the four sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 250,
                       OffsetY = 250,
                       Width = 100,
                       Height = 100,
                       Margin = new NodeMargin()
                       {
                           Bottom = 20,
                           Left = 20,
                           Right = 20,
                           Top = 20
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeMargin.#ctor">
            <summary>
            Sets the outer space for a node on all the four sides. By default, the margin is set to 0 in all the four sides.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortMargin">
            <summary>
            Represents the space from the actual offset values of the port.
            </summary>
            <remarks>
            By default, it will be 0 from all sides. The following code shows how to define PortMargin and its properties.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes collection.
               DiagramNode Node = new DiagramNode()
               {
                   // Position of the node
                   OffsetX = 250,
                   OffsetY = 250,
                   // Size of the node
                   Width = 100,
                   Height = 100,
                   Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                   // Initialize port collection
                   Ports = new ObservableCollection<DiagramPort>() {
                   new DiagramPort() {
                       Id = "port1", Visibility = PortVisibility.Visible,
                       //Set the style for the port
                       Style= new PortShapeStyle(){ Fill="gray"},
                       //set the margin to the port
                       Margin = new PortMargin{Top= 10,Bottom=0,Left=10,Right=0}
                       }
                     },
                 };
                 NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PortMargin.#ctor">
            <summary>
            Represents the space from the actual offset values of the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SuccessMargin">
            <summary>
            Represents the space around the object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SuccessMargin.#ctor">
            <summary>
            Represents the space around the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CancelOffset">
            <summary>
            Represents the position of the cancel port.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">CancelOffset is used to set the fraction relative to the parent that represents the position of the Cancel port. Fraction value ranges from 0 to 1.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the cancel port will be position at the top left corner of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the cancel port will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the cancel port will be position at the bottom right corner of the node.  </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
              {
                Type = Shapes.Bpmn,
                BpmnShape = BpmnShapes.Activity,
                //Sets the activity to subprocess
                Activity = new DiagramBpmnActivity()
                {
                  Activity = BpmnActivities.SubProcess,
                  //Sets collapsed to true and type to Transaction
                  SubProcess = new DiagramBpmnSubProcess()
                  {
                     //Collapsed = true,
                     Type = BpmnSubProcessTypes.Transaction,
                     //Sets offset and visible for cancel
                     Transaction = new DiagramBpmnTransactionSubProcess()
                     {
                        Cancel = new CancelSubEvent() { Visible = true, Offset = new BpmnSubEventOffset() { X = 0, Y = 0 } },
                     }
                   },
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CancelOffset.#ctor">
            <summary>
            Represents the position of the cancel port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FailureOffset">
            <summary>
            Represents the position of the failure port.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">FailureOffset is used to set the fraction relative to the parent that represents the position of the Failure port. Fraction value ranges from 0 to 1.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the failure port will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the failure port will be position at the center of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the failure port will be position at the bottom right corner of the node.  </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
             {
              Type = Shapes.Bpmn,
              BpmnShape = BpmnShapes.Activity,
              //Sets the activity to subprocess
              Activity = new DiagramBpmnActivity()
              {
                Activity = BpmnActivities.SubProcess,
                //Sets collapsed to true and type to Transaction
                SubProcess = new DiagramBpmnSubProcess()
                {
                  //Collapsed = true,
                  Type = BpmnSubProcessTypes.Transaction,
                  //Sets offset for cancel
                  Transaction = new DiagramBpmnTransactionSubProcess()
                  {
                    Failure = new FailureSubEvent() { Offset = new BpmnSubEventOffset() { X = 0, Y = 0 } }
                  }
                },
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FailureOffset.#ctor">
            <summary>
            Represents the position of the failure port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SuccessOffset">
            <summary>
            Represents the point in a diagram offset for a node/connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SuccessOffset.#ctor">
            <summary>
            Initialize the point in a diagram offset for a node/connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorDisplacementPoint">
            <summary>
            Represents the point where the connector annotation should be positioned from its actual position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorDisplacementPoint.#ctor">
            <summary>
            Represents the point where the connector annotation should be positioned from its actual position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorSourcePoint">
            <summary>
            Represents the Point where the source point of the connector should be placed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //...
               DiagramConnector DiagramConnector = new DiagramConnector()
               {
                  // Set the source point of the connector
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                };
               //...
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorSourcePoint.#ctor">
            <summary>
            Represents the Point where the source point of the connector should be placed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorTargetPoint">
            <summary>
            Represents the Point where the target point of the connector should be placed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //...
               DiagramConnector DiagramConnector = new DiagramConnector()
               {
                 // Set the target point of the connector
                 SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                 TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                };
               //...
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorTargetPoint.#ctor">
            <summary>
            Represents the Point where the target point of the connector should be placed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FirstSegmentPoint">
            <summary>
            Represents the first control point of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FirstSegmentPoint.#ctor">
            <summary>
            Represents the first control point of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SecondSegmentPoint">
            <summary>
            Represents the second control point of the connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SecondSegmentPoint.#ctor">
            <summary>
            Represents the second control point of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.StraightSegmentPoint">
            <summary>
            Represents the control point of the straight line connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.StraightSegmentPoint.#ctor">
            <summary>
            Represents the control point of the straight line connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CancelSubEvent">
            <summary>
            Represents the event within another subprocess.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 100, OffsetY = 100,
                       // Size of the node
                       Width = 100, Height = 100,
                       // Unique id of the node
                       Id = "node1",
                       //Defines the type to BPMN and shape to activity
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           //Sets the activity to subprocess
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               //Sets collapsed to true and type to Transaction
                               SubProcess = new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true,
                                   Type = BpmnSubProcessTypes.Transaction,
                                   //Sets offset and visible for cancel and offset for failure
                                   Transaction = new DiagramBpmnTransactionSubProcess()
                                   {
                                       Cancel = new CancelSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                                       Failure = new FailureSubEvent(){ Offset = new BpmnSubEventOffset(){ X = 0.75, Y = 1}}
                                   }
                               },
                           }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CancelSubEvent.#ctor">
            <summary>
            Represents the event within another subprocess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Annotations">
            <summary>
            Represents to connect an annotation element to the SubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Event">
            <summary>
            Gets or sets the type of BpmnEvent. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Height">
            <summary>
            Gets or sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.HorizontalAlignment">
            <summary>
            Represents how to horizontally align a node concerning its parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Id">
            <summary>
            Specifies the Id of the BpmnSubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Margin">
            <summary>
            Specifies the space to be left between the node and its immediate parent. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Offset">
            <summary>
            Specifies the position of the sub-event. By default, it is set to 0.5 in X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Ports">
            <summary>
            Specifies the collection of connection points of the sub-events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Trigger">
            <summary>
            Specifies the type of event trigger. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.VerticalAlignment">
            <summary>
            Represents how to vertically align a node with respect to its immediate parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Visible">
            <summary>
            Specifies the visibility of the sub-event. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.CancelSubEvent.Width">
            <summary>
            Gets or sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity">
            <summary>
            Represents the task that is performed in a business process.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">There are two types of activities. They are listed as follows:</td>
            </tr>
            <tr>
            <td style = "border: none">1.Task: This occurs within a process and it is not broken down to a finer level of detail.</td>
            </tr>
            <tr>
            <td style = "border: none">2.Subprocess: This occurs within a process and it is broken down to a finer level of detail.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                 new DiagramNode()
                 {
                   //Position of the node
                   OffsetX = 100, OffsetY = 100,
                   //Size of the node
                   Width = 100, Height = 100,
                   //Unique Id of the node
                   Id = "node1",
                   //sets the type of shape to Bpmn and shape to activity
                   Shape = new DiagramShape()
                   {
                     Type = Shapes.Bpmn,
                     BpmnShape = BpmnShapes.Activity,
                     //Sets the activity type to task
                     Activity = new DiagramBpmnActivity(){ Activity = BpmnActivities.Task },
                    }
                   }
                };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.#ctor">
            <summary>
            Represents the task that is performed in a business process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.Activity">
            <summary>
            Specifies the type of activity to be performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.SubProcess">
            <summary>
            Specifies the group of tasks that are used to hide or reveal details of an additional level using the collapsed property.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
                 {
                    //Sets type to Bpmn and shape to Activity
                    Type = Shapes.Bpmn, BpmnShape=BpmnShapes.Activity,
                    Activity=new DiagramBpmnActivity()
                    {
                        //Sets activity to subprocess
                        Activity = BpmnActivities.SubProcess,
                        // Set collapsed of subprocess to true
                        SubProcess = new DiagramBpmnSubProcess() { Collapsed = true }
                    },
                  }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.Task">
            <summary>
            Specifies the type of task such as sending, receiving, etc. By default, the task is set to None.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
                 {
                    Type = Shapes.Bpmn, BpmnShape=BpmnShapes.Activity,
                    //Sets activity to Task
                    Activity = new DiagramBpmnActivity()
                    {
                        Activity = BpmnActivities.Task,
                        //Sets the type of the task to Send
                        Task = new DiagramBpmnTask() { Type = BpmnTasks.Send }
                     }
                  }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation">
            <summary>
            Represents to connect an annotation element to the BPMN node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A BPMN object can be associated with a text annotation that does not affect the flow but gives details about objects within a flow. The annotation element can be switched from a BPMN node to another BPMN node simply by dragging the source end of the annotation connector into the other BPMN node.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              //Initialize the node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                 new DiagramNode()
                 {
                    //Position of the node
                    OffsetX = 100,
                    OffsetY = 100,
                    //Size of the node
                    Width = 100,
                    Height = 100,
                    //Unique Id of the node
                    Id = "node1",
                    //Sets type as BPMN and shape as DataObject
                    Shape = new DiagramShape()
                    {
                      Type = Shapes.Bpmn,
                      BpmnShape=BpmnShapes.DataObject,
                      //Sets collection as true when Dataobject is not a Single instance
                      DataObject=new DiagramBpmnDataObject()
                      {
                        Collection=true,
                        Type=BpmnDataObjects.Input
                      }
                     },
                     //Sets the id, angle, and text for the annotation
                     Annotations=new ObservableCollection<DiagramNodeAnnotation>()
                     {
                     new DiagramNodeAnnotation()
                     {
                        Id="Left",
                        RotateAngle=45,
                        Content="Left"
                      }
                    }
                 },
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.#ctor">
            <summary>
            Represents to connect an annotation element to the BPMN node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Angle">
            <summary>
            Sets the angle between the BPMN shape and the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Height">
            <summary>
            Sets the height of the text annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Id">
            <summary>
            Sets the id of the BPMN sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Length">
            <summary>
            Specifies the distance between the Bpmn shape and the annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Text">
            <summary>
            Specifies the additional information about the flow object in a BPMN process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation.Width">
            <summary>
            Sets the width of the text annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject">
            <summary>
            Represents the behavior of the Bpmn data object.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A data object represents information flowing through the process, such as data placed into the process, data resulting from the process, data that needs to be collected, or data that must be stored. To define a DataObject, set the shape to DataObject and the type of property defines whether data is an input or output. Users can create multiple instances of the data object with the collection property of data.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram ID="Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             //Initialize the node collection with node
             ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
             {
               new DiagramNode()
               {
                 //Position of the node
                 OffsetX = 100,
                 OffsetY = 100,
                 //Size of the node
                 Width = 100,
                 Height = 100,
                 //Unique Id of the node
                 Id = "node1",
                 //Sets type to Bpmn and shape to DataObject
                 Shape = new DiagramShape()
                 {
                    Type = Shapes.Bpmn,
                    BpmnShape=BpmnShapes.DataObject,
                    //Sets collection to true when Dataobject is not a Single instance
                    DataObject=new DiagramBpmnDataObject()
                    {
                      Collection=true,
                      Type=BpmnDataObjects.Input
                     }
                  }
                 },
                };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject.#ctor">
            <summary>
            Represents the behavior of the Bpmn data object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject.Collection">
            <summary>
             Specifies whether the data object is a collection or not. By default, it is set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnDataObject.Type">
            <summary>
            Specifies whether the data is an input or output. By default, it is set to None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent">
            <summary>
            Represents something happens during a business process and it is notated with a circle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The type of events are as follows:</td>
            </tr>
            <tr>
            <td style = "border: none">•    Start - indicates the beginning of the process and every business process starts with an event.</td>
            </tr>
            <tr>
            <td style = "border: none">•    Intermediate - indicates the middle of the process.</td>
            </tr>
            <tr>
            <td style = "border: none">•    End - indicates the beginning of the process and every business process ends with an event.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                  new DiagramNode()
                  {
                    //Position of the node
                    OffsetX = 100, OffsetY = 100,
                    //Size of the node
                    Width = 100, Height = 100,
                    //Unique Id of the node
                    Id = "node1",
                    Shape = new DiagramShape()
                    {
                       //Sets type to Bpmn and shape to Event
                       Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                       // Set the event type to End
                       Event = new DiagramBpmnEvent() { Event = BpmnEvents.End }
                     }
                    }
                };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent.#ctor">
            <summary>
            Represents something happens during a business process and it is notated with a circle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent.Event">
            <summary>
            It allows the user to define the type of event. The default value of the event is Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnEvent.Trigger">
            <summary>
            Specifies the type of trigger. By default, it is set to None.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[//...
                Shape = new DiagramShape()
                {
                   //Sets type to Bpmn and shape to Event
                   Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                   // Set the event type to NonInterruptingIntermediate and set the trigger as message
                   Event = new DiagramBpmnEvent() { Event = BpmnEvents.NonInterruptingIntermediate, Trigger = BpmnTriggers.Message }
                 }
                //...
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnGateway">
            <summary>
            Represents to control the flow of a process and it is represented as a diamond shape.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">To create a gateway, the shape property of the node should be set to “Gateway” and the Gateway property can be set with any of the appropriate gateways.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
               @code{
                //Initialize the node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                  new DiagramNode()
                  {
                    //Position of the node
                    OffsetX = 100, OffsetY = 100,
                    //Size of the node
                    Width = 100, Height = 100,
                    //Unique Id of the node
                    Id = "node1",
                    Shape = new DiagramShape()
                    {
                        //Sets type to Bpmn and shape to Gateway
                        Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Gateway,
                        //Sets type of the gateway to None
                        Gateway = new DiagramBpmnGateway(){Type = BpmnGateways.None}
                    }
                   }
                 };
                }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnGateway.#ctor">
            <summary>
            Represents to control the flow of a process and it is represented as a diamond shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnGateway.Type">
            <summary>
            Specifies the type of BpmnGateway. By default, the Gateway will be set to None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent">
            <summary>
            Represents the event placed within another subprocess.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Users can set an event to a subprocess with the event and trigger the properties of the subprocess. The Type property of the subprocess allows you to define the type of subprocess.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
             @code {
             //Initialize the node collection with node
             ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
             {
               new DiagramNode()
              {
                 // Position of the node
                 OffsetX = 100, OffsetY = 100,
                 // Size of the node
                 Width = 100, Height = 100,
                 // Unique id of the node
                 Id = "node1",
                 //Defines the type to BPMN and shape to activity
                 Shape = new DiagramShape()
                 {
                    Type = Shapes.Bpmn,
                    BpmnShape = BpmnShapes.Activity,
                    //Sets the activity to subprocess
                    Activity = new DiagramBpmnActivity()
                    {
                       Activity = BpmnActivities.SubProcess,
                       //Sets collapsed to true and type to Transaction
                       SubProcess = new DiagramBpmnSubProcess()
                       {
                          Collapsed = true,
                          Type = BpmnSubProcessTypes.Transaction,
                          //Sets offset and visible for cancel and offset for failure
                          Transaction = new DiagramBpmnTransactionSubProcess()
                           {
                             Cancel = new CancelSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                             Failure = new FailureSubEvent(){ Offset = new BpmnSubEventOffset(){ X = 0.75, Y = 1}}
                            }
                       },
                    }
                   }
                  }
                 };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.#ctor">
            <summary>
            Represents the event placed within another subprocess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Annotations">
            <summary>
            Represents to connect an annotation element to the BpmnSubEvent.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A BpmnSubEvent can be associated with a text annotation that does not affect the flow but gives details about objects within a flow.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Event">
            <summary>
            Gets or sets the type of BpmnEvent. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Height">
            <summary>
            Gets or sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.HorizontalAlignment">
            <summary>
            Represents how to horizontally align a node concerning its parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Id">
            <summary>
            Specifies the Id of the BpmnSubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Margin">
            <summary>
            Specifies the space to be left between the node and its immediate parent. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Offset">
            <summary>
            Specifies the position of the sub-event. By default, it is set to 0.5 in X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Ports">
            <summary>
            Specifies the collection of connection points of the sub-events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Trigger">
            <summary>
            Specifies the type of event trigger. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.VerticalAlignment">
            <summary>
            Represents how to vertically align a node concerning its immediate parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Visible">
            <summary>
            Specifies the visibility of the sub-event. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubEvent.Width">
            <summary>
            Gets or sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess">
            <summary>
            This occurs within a process and it is broken down to a finer level of detail.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
              //Initialize the node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                new DiagramNode()
                {
                  //Position of the node
                  OffsetX = 100, OffsetY = 100,
                  //Size of the node
                  Width = 100, Height = 100,
                  //unique id of the node
                  Id = "node1",
                  //Defines the type to BPMN and shape to activity
                  Shape = new DiagramShape()
                  {
                    Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                    //Sets the activity to subprocess
                    Activity=new DiagramBpmnActivity()
                    {
                      Activity = BpmnActivities.SubProcess,
                      //sets collapsed and ad hoc to true
                      SubProcess = new DiagramBpmnSubProcess()
                      {
                        Collapsed = true,
                        Adhoc = true
                       },
                     }
                    }
                  },
                };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.#ctor">
            <summary>
            This occurs within a process and it is broken down to a finer level of detail.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Adhoc">
            <summary>
            Specifies whether the subprocess is without any prescribed order or not.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Specifies a subprocess is a group of tasks that are executed in any order or skipped to fulfill the end condition and set it with the Ad-hoc property of the subprocess.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = BpmnActivities.SubProcess,
                      //sets collapsed and ad hoc to true
                      SubProcess = new DiagramBpmnSubProcess()
                      {
                        Collapsed = true,
                        Adhoc = true
                       },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Boundary">
            <summary>
            Represent the type of task that is being processed.
            </summary>
            <remarks>
            The Boundary property of the subprocess allows you to define the type of boundary.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = BpmnActivities.SubProcess,
                //Sets collapsed to true and boundary to Call
                SubProcess = new DiagramBpmnSubProcess()
                {
                  Collapsed = true,
                  Boundary = BpmnBoundary.Call
                },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Collapsed">
            <summary>
            Specifies whether the shape is collapsed or not. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Compensation">
            <summary>
            Specifies whether the task is triggered as compensation for another task.
            </summary>
            <remarks>
            Compensation is triggered when the operation is partially failed and enabled it with the compensation property of the task and the subprocess.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = new DiagramBpmnActivity()
                   {
                     Activity = BpmnActivities.Task,
                     //set compensation to true
                     Task=new DiagramBpmnTask()
                     {
                       Compensation = true,
                     },
                    }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Events">
            <summary>
            It allows the user to define the type of event. The default value of the event starts.
            </summary>
            <remarks>
            Event SubProcess has placed within another subprocess that part of the normal flow of its parent process is not.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Loop">
            <summary>
            Specifies the task that is internally being looped and allows users to define the type of loop. The default value for Loop is None.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Activity = BpmnActivities.SubProcess,
                //Sets collapsed to true and loop to standard
                SubProcess=new DiagramBpmnSubProcess()
                {
                  Collapsed = true,
                  Loop = BpmnLoops.Standard,
                },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Processes">
            <summary>
            Specifies an array collection that defines the children's values for the Bpmn subprocess.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[SubProcess = new DiagramBpmnSubProcess() {
                Collapsed = false,
                Type = BpmnSubProcessTypes.Event,
                Processes = new string[] { "Start", "End", "Node1" }
                }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Transaction">
            <summary>
            Specifies the transaction of the subprocess.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The transaction is a set of activities that logically belong together that all contained activities must complete their parts of the transaction otherwise, the process is failed. The execution result of a transaction is one of the following.</td>
            </tr>
            <tr>
            <td style = "border: none">�    Successful Completion.</td>
            </tr>
            <tr>
            <td style = "border: none">�    Unsuccessful Completion (Cancel).</td>
            </tr>
            <tr>
            <td style = "border: none">�    Hazard (Exception).</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//Sets collapsed to true and type to Transaction
                SubProcess = new DiagramBpmnSubProcess()
                {
                    Collapsed = true,
                    Type = BpmnSubProcessTypes.Transaction,
                    //Sets offset and visible for cancel and offset for failure
                    Transaction = new DiagramBpmnTransactionSubProcess()
                     {
                        Cancel = new CancelSubEvent() { Visible = true, Offset = new BpmnSubEventOffset() { X = 0.25, Y = 1 } },
                        Failure = new FailureSubEvent() { Offset = new BpmnSubEventOffset() { X = 0.75, Y = 1 } }
                     }
                 },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnSubProcess.Type">
            <summary>
            Specifies the type of BpmnSubProcess. The default value for type is None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnTask">
            <summary>
            This occurs within a process and it is not broken down to a finer level of detail.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The task property of the node allows you to define the type such as sending, receiving, user-based tasks, etc. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              //Initialize the node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                new DiagramNode()
                {
                  //Position of the node
                  OffsetX = 100, OffsetY = 100,
                  //Size of the node
                  Width = 100, Height = 100,
                  //Unique Id of the node
                  Id = "node1",
                  //sets the type of shape to Bpmn and shape to activity
                  Shape = new DiagramShape()
                  {
                    Type = Shapes.Bpmn,
                    BpmnShape = BpmnShapes.Activity,
                    //Sets the activity type to task
                    Activity = new DiagramBpmnActivity(){ Activity = BpmnActivities.Task },
                   }
                 }
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.#ctor">
            <summary>
            This occurs within a process and it is not broken down to a finer level of detail.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Call">
            <summary>
            Specifies whether the task is global or not. By default, it is set false.
            </summary>
            <remarks>
            The task property of the node allows you to define the type such as sending, receiving, user-based tasks, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity=new DiagramBpmnActivity()
                  {
                    Activity = BpmnActivities.Task,
                    //Sets call to true
                    Task = new DiagramBpmnTask()
                    {
                      Call = true,
                    },
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Compensation">
            <summary>
            Specifies whether the task is triggered as compensation for another task.
            </summary>
            <remarks>
            Compensation is triggered when the operation is partially failed and enabled it with the compensation property of the task.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Activity=new DiagramBpmnActivity()
                  {
                    Activity = BpmnActivities.Task,
                    //set compensation to true
                    Task = new DiagramBpmnTask()
                    {
                     Compensation=true,
                    },
                   }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Loop">
            <summary>
            Specifies the task that is internally being looped and allows users to define the type of loop. The default value for Loop is None.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTask.Type">
            <summary>
            Specifies the type of Task. The default value for type is None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess">
            <summary>
            Specifies the behavior of the BpmnTransactionSubProcess.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The transaction is a set of activities that logically belong together that all contained activities must complete their parts of the transaction otherwise, the process is failed. The execution result of a transaction is one of the following </td>
            </tr>
            <tr>
            <td style = "border: none">•    Successful Completion. </td>
            </tr>
            <tr>
            <td style = "border: none">•    Unsuccessful Completion (Cancel). </td>
            </tr>
            <tr>
            <td style = "border: none">•    Hazard (Exception). </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
                //Initialize the node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                  new DiagramNode()
                  {
                    // Position of the node
                    OffsetX = 100, OffsetY = 100,
                    // Size of the node
                    Width = 100, Height = 100,
                    // Unique id of the node
                    Id = "node1",
                    //Defines the type to BPMN and shape to activity
                    Shape = new DiagramShape()
                    {
                      Type = Shapes.Bpmn,
                      BpmnShape = BpmnShapes.Activity,
                      //Sets the activity to subprocess
                      Activity = new DiagramBpmnActivity()
                      {
                        Activity = BpmnActivities.SubProcess,
                        //Sets collapsed to true and type to Transaction
                        SubProcess = new DiagramBpmnSubProcess()
                        {
                          Collapsed = true,
                          Type = BpmnSubProcessTypes.Transaction,
                          //Sets offset and visible for cancel and offset for failure
                          Transaction = new DiagramBpmnTransactionSubProcess()
                          {
                            Cancel = new CancelSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                            Failure = new FailureSubEvent(){ Offset = new BpmnSubEventOffset(){ X = 0.75, Y = 1}}
                           }
                        },
                       }
                     }
                    }
                  };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.#ctor">
            <summary>
            Specifies the behavior of the BpmnTransactionSubProcess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.Cancel">
            <summary>
            Specifies the size and position of the cancel port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.Failure">
            <summary>
            Specifies the size and position of the failure port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBpmnTransactionSubProcess.Success">
            <summary>
            Specifies the size and position of the success port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity">
            <summary>
            Represents the behavior of the UMLActivity Classifier Multiplicity connection defaults.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The Multiplicity property in UML allows you to specify a large number of elements or some collection of elements. By default, the multiplicity will be considered as OneToOne. The type of multiplicity is as follows. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   OneToOne. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   ManyToOne. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   OneToMany.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   ManyToMany.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                   //...
                 Shape = new DiagramConnectorShape()
                 {
                     Type = ConnectionShapes.UmlClassifier,
                     //Set a relationship for connector
                     Relationship = ClassifierShape.Dependency,
                     Multiplicity = new DiagramClassifierMultiplicity()
                      {
                        //Set multiplicity type
                        Type = Multiplicity.OneToMany,
                        //Set source label to connector
                        Source = new SourceMultiplicityLabel()
                         {
                           Optional = true,
                           LowerBounds = "89",
                           UpperBounds = "67"
                          },
                          //Set target label to a connector
                          Target = new TargetMultiplicityLabel()
                          {
                            Optional = true,
                            LowerBounds = "78",
                            UpperBounds = "90"
                           }
                      }
                  },
                 //...
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.#ctor">
            <summary>
            Represents the behavior of the UMLActivity Classifier Multiplicity connection defaults.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.Source">
            <summary>
            Specifies the source label to a connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.Target">
            <summary>
            Specifies the target label to a connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClassifierMultiplicity.Type">
            <summary>
            Specifies the type of Classifier multiplicity. By default, it is set to OneToOne.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnector">
            <summary>
            A path between two points, like nodes or ports.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">A connector is a piece of a path in the diagram, connecting two points. The points might be nodes, ports, etc., A connector is created using a source point and a target point. The connector might contain decorators, which distinguish the target point from the source point. A connector can be straight or orthogonal. </td>
            </tr>
            <tr>
            <td style = "border: none">The following code demonstrates, how to define the DiagramConnector and its properties.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
                //Defines diagram's connector collection
                public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
                protected override void OnInitialized()
                {
                  DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                     // Set the source and target point of the connector
                     SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                     TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                     // Type of the connector segemnts
                     Type = Segments.Straight,
                   };
                   //Add the connector into connectors' collection.
                   ConnectorCollection.Add(DiagramConnector);
                 }
             }
            ]]>
            </code>
            </example>
            <summary>
            Represents the objects used to create link between two points, nodes or ports to represent the relationships between them.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnector.#ctor">
            <summary>
            A path between two points, like nodes or ports.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.AddInfo">
            <summary>
            It allows the user to store additional information about the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramConnector()
             {
                //Define the addInfo value.
                AddInfo = "Central Connector",
              };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Annotations">
            <summary>
            Defines the collection of textual annotations of connectors.
            </summary>
            <remarks>
            Annotation can be customized as per the user's preference by adding font color, border color, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramConnector()
             {
               Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                {
                //A annotation is created and stored in Annotations collection of connector.
                new DiagramConnectorAnnotation() { Content = "Connector" }
                 }
              };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.BridgeSpace">
            <summary>
            Defines the width for line bridging.
            </summary>
            <remarks>
            At points of intersection, line bridging creates a bridge to crossover the other connectors. The bridgeSpace defines the width for line bridging. However, Beizer does not support line bridging. Bridging can be enabled by including the “DiagramConstraints.Bridging” constraint.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//Enable the bridging constraint for diagram.
            public DiagramConstraints DiagramConstraints = DiagramConstraints.Bridging;
            DiagramConnector DiagramConnector1 = new DiagramConnector()
            {
              SourcePoint = new ConnectorSourcePoint() { X = 200, Y = 200 },
              TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 }
             };
             DiagramConnector DiagramConnector2 = new DiagramConnector()
             {
               SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
               TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 }
              };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.ConnectionPadding">
            <summary>
            Sets padding value to the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Constraints">
            <summary>
            Certain behavior of connectors are enabled or disabled using constraints.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.CornerRadius">
            <summary>
            Corner radius allows creating objects with rounded corners.By default, the value of the corner radius is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.DragSize">
            <summary>
            Defines the size of a drop symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SymbolInfo">
            <summary>
            Defines the information of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.ExcludeFromLayout">
            <summary>
            Defines whether the connector should be automatically positioned or not.
            </summary>
            <remarks>
            ExcludeFromLayout is a Boolean type. By default, ExcludeFromLayout is false. It can be enabled by setting the Boolean to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.FixedUserHandles">
            <summary>
            It allows the user to store the collection of fixed user handles of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Flip">
            <summary>
            Turns over or translates the connector according to the specified type.
            </summary>
            <remarks>
            Flip can be set to None, Horizontal, Vertical, Both according to the user’s perception.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.HitPadding">
            <summary>
            Sets padding like space around the edges of the connector, such that selection for connector might be easy.By default, the value of HidPadding is 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Id">
            <summary>
            Sets each connector with a unique identity.
            </summary>
            <remarks>
            The Id of each connector should be unique if-else overlap over the connectors might occur.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Margin">
            <summary>
            Sets/Gets the margin of the element.By default, the value of the Margin is 0 in all four sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.PreviewSize">
            <summary>
            Defines the size of the symbol before dragging into the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Segments">
            <summary>
            Specifies the collection of diagram connector segments.
            </summary>
            <remarks>
            The Segments can be set to Straight, Orthogonal, Beizer, or Polyline. By default, the segments are straight.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Shape">
            <summary>
            Defines the shape of the connector segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourceDecorator">
            <summary>
            Defines the source decorator of the connector.
            </summary>
            <remarks>
            The width, height, style, pivot, etc., of the SourceDecorator, can be set as per the user’s requirement.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourceID">
            <summary>
            Sets the source node id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourcePadding">
            <summary>
            Defines the space between the source node  and the source connector end. By default, the value is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourcePoint">
            <summary>
            Sets the beginning point of the connector.
            </summary>
            <remarks>
            The SourcePoint for the connector is set on X, Y. X defines the space from left and Y defines the space from the top. By default, the X and Y are set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.SourcePortID">
            <summary>
            Defines the port id to which the connector’s source point is to be connected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Style">
            <summary>
            Defines the appearance of the connection.
            </summary>
            <remarks>
            The appearance of the connector can be customized according to the user’s perception. For example, the border color, border width, fill color of the connector can be set as per the user’s requirement.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetDecorator">
            <summary>
            Defines the target decorator of the connector.
            </summary>
            <remarks>
            The width, height, style, pivot, etc., of the TargetDecorator, can be set as per the user’s requirement.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetID">
            <summary>
            Sets the target node/connector object of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetPadding">
            <summary>
            Sets the target padding of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetPoint">
            <summary>
            Sets the end point of the connector.
            </summary>
            <remarks>
            The TargetPoint for the connector is set on X, Y. X defines the space from left and Y defines the space from the top. By default, the X and Y are set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.TargetPortID">
            <summary>
            Defines the port id to which the connector’s target point is to be connected.
            </summary>
            <remarks>
            The TargetPortID is a string type. By default, the TargetPortID is empty.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Tooltip">
            <summary>
            Tooltip is a message displayed over the connector when hovered.
            </summary>
            <remarks>
            The message to be displayed can be set in the Content of the tooltip property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Type">
            <summary>
            Defines the type of connector segment.
            </summary>
            <remarks>
            The Type can be set to Straight, Orthogonal, Beizer, or Polyline. By default, the segments are straight.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.Visible">
            <summary>
            Sets the visibility of the connector segment.
            </summary>
            <remarks>
            Visible is a Boolean type. By default, visible is set to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnector.ZIndex">
            <summary>
            Sets the stack and z-order of the connector.
            </summary>
            <remarks>
            The ZIndex is a number type. The connector with higher stack order is always at the top of all the connectors.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnector.BeginUpdate">
            <summary>
            Prevents redrawing of model on the client side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnector.EndUpdate">
            <summary>
            Enable redrawing of model on the client side.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation">
            <summary>
            Represents the block of text displayed over the connector.
            </summary>
            <remarks>
            Annotation is used to present some textual data for the connector which can be edited at runtime. Multiple annotations can be added to the connector. Users can able to modify the annotation style, visibility, width, height, and content of the annotation through code or visually.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
             //Defines diagram's connector collection
             public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
             protected override void OnInitialized()
             {
                ConnectorCollection = new ObservableCollection<DiagramConnector>();
                DiagramConnector Connector = new DiagramConnector()
               {
                  SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                  TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                  Type = Segments.Orthogonal,
                  Style = new ConnectorShapeStyle()
                  {StrokeColor = "#6BA5D7”},
                  Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                  {
                    //An annotation is created and stored in the Annotation collection of the connector.
                    new DiagramConnectorAnnotation () {Content = "Annotation" }
                  }
                };
                ConnectorCollection.Add(Connector);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.#ctor">
            <summary>
            Represents the block of text displayed over the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.AddInfo">
            <summary>
            Specifies the additional information about annotation.
            </summary>
            <remarks>
            Enables the user to store data of any datatype. It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class AddInfo{
            public string Description{get, set}
            }
             // An annotation is created and stored in an Annotation collection of the Connector.
             Annotations = new ObservableCollection<DiagramConnectorAnnotation>() {
             new DiagramConnectorAnnotation()
             Content = "Annotation"
             AddInfo = new AddInfo() { Description = “Annotation1”}
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Alignment">
            <summary>
            Specifies the position of the label based on the segment alignment.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Specifies the position of the label based on the segment alignment. </td>
            </tr>
            <tr>
            <td style = "border: none"> 1.  Center - Aligns the annotation at the center of a connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> 2.  Before - Aligns the annotation before a connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> 3.  After - Aligns the annotation after a connector segment.</td>
            </tr>
            <tr>
            <td style = "border: none"> By default, the alignment is set as the center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.AnnotationType">
            <summary>
             This property allows the users to define a type of annotation template.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the value of the Annotation. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   String - Annotation template to be in the string. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Template - Annotation template to be in HTML Content.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Constraints">
            <summary>
            The constraints property allows the user to enable or disable certain behaviors of the label. For instance, the user can disable annotation editing and able to make it as read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Content">
            <summary>
            Gets or sets the textual description of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Displacement">
            <summary>
            The Displacement property allows the user to dislocate the annotation from its original place by the given value.
            </summary>
            <remarks>
            By default, the annotation will be in the center of the connector path. When the user assigns value to the Displacement property, the annotation will be displaced from its position by displacement value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.DragLimit">
            <summary>
            This property allows the user to limit the dragging of connector label to a certain distance. By default, it is set to 20 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[// An annotation is created and stored in the Annotation collection of the connector.
            Annotations = new ObservableCollection<DiagramConnectorAnnotation>() {
            new DiagramConnectorAnnotation()
            Content = "Annotation"
            DragLimit = new DiagramConnectorAnnotationDragLimit() { Top = 20, Left = 20 ,Right = 20, Bottom = 20}
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Height">
            <summary>
            Gets or sets the height of the annotations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.HorizontalAlignment">
            <summary>
            Describes how an annotation element is horizontally positioned or stretched within a connector. the characteristics of its immediate parent.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the Horizontal Alignment of the annotation</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the connector</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the connector</td>
            </tr>
            <tr>
            <td style = "border: none">By default, HorizontalAlignment is set to center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Hyperlink">
            <summary>
            This property allows the user to add a hyperlink to the connector label.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Id">
            <summary>
            Returns the unique id of an Annotation.  .
            </summary>
            <remarks>
            Annotation Id needs to be unique to use. When creating a label, the user should not provide the same id to other labels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Margin">
            <summary>
            Specifies the space around the annotation content. The default values for the Margin are set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Annotations = new ObservableCollection<DiagramConnectorAnnotation> ()
            {
              //An annotation is created and stored in the Annotations collection of Connector.
              new DiagramConnectorAnnotation()
              {
               Content = "Annotation),
               Margin = new ConnectorAnnotationMargin() { Top = 0, Left = 0, Bottom = 0, Right = 0 }
              }
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Offset">
            <summary>
            Specifies the position of the label relative to the bounds of the connector. The default value for offset is set to 0.5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.RotateAngle">
            <summary>
            Gets or sets the rotation angle of the label.
            </summary>
            <remarks>
            Connector labels can be rotated either by code-behind or mouse interaction. By default, the rotate angle will be 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.SegmentAngle">
            <summary>
            This property allows the user to rotate the annotation based on the connector segment direction.
            </summary>
            <remarks>
            By default, the annotation will be rotated in the connector path. When the user assigns value to the SegmentPath property, the annotation will be rotated from its position based on the connector segment direction.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Style">
            <summary>
            Defines the appearance of the text.
            </summary>
            <remarks>
            Users can change the font style of the label with the font specific properties such as  font family, font size, font color, bold, etc., The fill and border appearances of the text can also be customized with appearance specific properties of label such as fill color, border color, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Template">
            <summary>
            This property represents the template’s content of the label. The User can define any HTML content as a template.
            </summary>
            <remarks>
            Users can set the label content as a template instead of textual content or hyperlink, by using template property. For that SVG or HTML content should be defined as a string in an annotation’s template property. By default, it is undefined.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Type">
            <summary>
            This property is used to define the positioning behavior of the annotation. It can be either “Shape” or “Path”.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the Type property of the annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   shape - sets the annotation type to shape.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Path – sets the annotation type to the path.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.VerticalAlignment">
            <summary>
            Describes how an annotation element is vertically positioned or stretched within a connector.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the vertical alignment of the annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Top - Aligns the diagram element at the top of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Bottom - Aligns the diagram element at the bottom of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Center - Aligns the diagram element at the center of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Auto - Aligns the diagram element based on the characteristics of the connector.</td>
            </tr>
            <tr>
            <td style = "border: none">By default, VerticalAlignment is set to center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Visibility">
            <summary>
            specifies the visibility of the annotation.
            </summary>
            <remarks>
            By default, visibility is set to true. If the visibility is false, then the connector annotation will not be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation.Width">
            <summary>
            Gets or sets the width of an annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment">
            <summary>
            Specifies the collection connector segment that may have types like Straight, Orthogonal, Beizer.
            </summary>
            <remarks>
            The connector segment can be customized as per the user’s perception. The available connector segment types are Straight, Orthogonal, Beizer.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
             {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                   SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 200 },
                   TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 200 },
                   Segments = new ObservableCollection<DiagramConnectorSegment>()
                  {
                    //Create a new segment with length and direction
                    new DiagramConnectorSegment()
                    {
                      Length = 100,
                      Type = Segments.Orthogonal,
                      Direction = Direction.Right,
                    },
                 }
                };
               ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.#ctor">
            <summary>
            Defines the type of segment. To create a connector segment, specify the source point and target point. Hence a connector of Straight type is formed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.AllowDrag">
            <summary>
            Defines whether the connector can be draggable or not.
            </summary>
            <remarks>
            AllowDrag is of type Boolean. By default, AllowDrag is true. All the connectors are draggable unless the AllowDrag of it is set to false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Direction">
            <summary>
            Sets the direction of the orthogonal segment.
            </summary>
            <remarks>
            By default, the value of the Direction is null. The Direction of the connector segment can be set to Top, Left, Bottom, or Right.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Length">
            <summary>
            Sets the length of the orthogonal connector segment.
            </summary>
            <remarks>
            By default, the value of Length is 0 and it is applicable only for the orthogonal segment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Point">
            <summary>
            Sets the control point of the Bezier segment.
            </summary>
            <remarks>
            It applies only to the Bezier segment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Point1">
            <summary>
            Sets the first control point of the connector segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Point2">
            <summary>
            Sets the second control point of the connector segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Type">
            <summary>
            Defines the type of connector segment.
            </summary>
            <remarks>
            The connector segments can be of Orthogonal, Straight, Beizer types.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Vector1">
            <summary>
            Defines the length and angle between the source point and the first control point.
            </summary>
            <remarks>
            It applies only to the Bezier segment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorSegment.Vector2">
            <summary>
            Defines the length and angle between the target point and the second control point.
            </summary>
            <remarks>
            It applies only to the Bezier segment.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorShape">
            <summary>
            Defines the shape of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
             public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
             protected override void OnInitialized()
             {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 200 },
                  TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 200 },
                  //Sets the type to Bpmn, flow to Association and association to bidirectional
                  Shape = new DiagramConnectorShape()
                  {
                    Type = ConnectionShapes.Bpmn,
                    BpmnFlow = BpmnFlows.Association,
                    Association = BpmnAssociationFlows.Directional
                  }
                };
               ConnectorCollection.Add(DiagramConnector);
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.#ctor">
            <summary>
            Defines the shape of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Association">
            <summary>
            Sets the BPMN Flow Type as Association.
            </summary>
            <remarks>
            The diagram connector shape can be set to the association by setting the BPMNFlow property to the association. Types of the association are Directional, BiDirectional, Default.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
               //Sets the type to Bpmn, flow to Association and association to bidirectional
               Shape=new DiagramConnectorShape()
               {
                Type = ConnectionShapes.Bpmn,
                BpmnFlow = BpmnFlows.Association,
                Association = BpmnAssociationFlows.BiDirectional
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.AssociationType">
            <summary>
            Defines the type of connector shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.BpmnFlow">
            <summary>
            It defines whether the connector can act as a normal connector or BPMN flow.
            </summary>
            <remarks>
            The BPMNFlow can be set to Association, Sequence, or Message.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.ExceptionFlowHeight">
            <summary>
            Defines the height of exception flow.
            </summary>
            <remarks>
            By default, the value of ExceptionHeightFlow is 50.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Message">
            <summary>
            The message flow represents the flow of messages between two points.
            </summary>
            <remarks>
            The BPMN Flow Type can be set to Message. The types of message flow are Initiating, NonInitiating, and Default.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
             // Start and endpoint of the connector
             SourcePoint=new ConnectorSourcePoint() { X = 100,Y = 200},
             TargetPoint=new ConnectorTargetPoint() { X = 300,Y = 200},
             //Sets type to Bpmn, flow to Message, and message to InitiatingMessage
             Shape=new DiagramConnectorShape()
             {
                Type = ConnectionShapes.Bpmn,
                BpmnFlow = BpmnFlows.Message,
                Message = BpmnMessageFlows.InitiatingMessage
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Multiplicity">
            <summary>
            Defines the type of classifier multiplicity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Relationship">
            <summary>
            Represents the relationship for UML Classifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Sequence">
            <summary>
            The sequence flow represents a solid graphic flow segment.
            </summary>
            <remarks>
            This sets the BPMN Flow Type as Sequence. The types of sequences are Normal, Conditional, and Default.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
               //Sets type to Bpmn, flow to Sequence, and sequence to Conditional
               Shape=new DiagramConnectorShape()
               {
                 Type = ConnectionShapes.Bpmn,
                 BpmnFlow = BpmnFlows.Sequence,
                 Sequence = BpmnSequenceFlows.Default
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.Type">
            <summary>
            Defines the type of connector shape.
            </summary>
            <remarks>
            The connector shape can be set to None, BPMN, UMLActivity or UMLClassifier.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramConnector Connector = new DiagramConnector()
            {
             //Unique Id of the connector
             Id="connector1",
             // Start and end point of the connector
             SourcePoint=new ConnectorSourcePoint() { X = 100,Y = 200},
             TargetPoint=new ConnectorTargetPoint() { X = 300,Y = 200},
             //Sets type to Bpmn
             Shape=new DiagramConnectorShape()
              {
               Type = ConnectionShapes.Bpmn,
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorShape.UmlActivityFlow">
            <summary>
            Defines the type of connector shape as UMLActivity.
            </summary>
            <remarks>
            The UMLActivityFlow can be set to either Basic or Action.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings">
            <summary>
            It is a built-in menu loaded with few features which open when right-clicked.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram @ref="@Diagram" Nodes="@NodeCollection">
            // Defines context menu and set the ShowCustomMenuOnly to false to render the custom context menu along with the default context menu
            <DiagramContextMenuSettings Show = "true" Items="@ContextMenuItemModels" >
            </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
             //Reference to diagram
             SfDiagram Diagram;
             //Defines diagram's nodes collection
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
             protected override void OnInitialized()
             {
                //Create a node
                DiagramNode Node = new DiagramNode()
                {
                  OffsetX = 100,
                  OffsetY = 100,
                  Height = 100,
                  Width = 100,
                  Id = "node1",
                };
                //Add node into node's collection
                NodeCollection.Add(Node);
              }
              // Add the custom context menu items
              List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
              {
              new ContextMenuItemModel()
              {
                 Text ="color",
                 Id="Save",
                  Target =".e-elementcontent",
                  // Add the nested custom context menu items
                 Items = new List<ContextMenuItemModel>()
               {
                new ContextMenuItemModel(){  Text ="Red", Id="Red", },
                new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow", },
                new ContextMenuItemModel(){  Text ="Green", Id="Green", }
                }
                },
              };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings._jsNamespace">
            <summary>
            It is a built-in menu loaded with few features which open when right-clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.Items">
            <summary>
            Defines the items to be displayed in the context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.Show">
            <summary>
            Defines whether to enable or disable the context menu.
            </summary>
            <remarks>
            By default, the Show is set to false. The context menu can be enabled by setting the Show to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.ShowCustomMenuOnly">
            <summary>
            Enables only the custom menu items.
            </summary>
            <remarks>
            By default, the ShowCustomMenuOnly is set to false. The context menu can be enabled by setting the ShowCustomMenuOnly to true.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
              // Define custom menu  <DiagramContextMenuSettings ShowCustomMenuOnly="true">
            </DiagramContextMenuSettings></SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnHybridInitialized">
            <returns> Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree. </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnHybridParametersSet">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnHybridAfterRender(System.Boolean)">
            <returns>  Returns asynchronous operation which is executed when the rendering of all the references to the component are populated. </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramContextMenuSettings.OnAfterRenderAsync(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated </returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCustomCursor">
            <summary>
            Represents which type of cursor has to displayed to the specific action.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCustomCursor.#ctor">
            <summary>
            Represents which type of cursor has to displayed to the specific action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCustomCursor.Action">
            <summary>
            Defines which type of action will take place.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> •   There are several Actions are available such as Drag, Select, ResizeNorth, Rotate, etc.,</td>
            </tr>
            <tr>
            <td style = "border: none">•    Each Action has a specific cursor. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCustomCursor.Cursor">
            <summary>
            Sets or gets the cursor that corresponds to the action taken.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDecorator">
            <summary>
            Represents the connector's start and endpoint decorations.
            </summary>
            <remarks>
            The connector's start and endpoints can be decorated with some customizable shapes such as arrows, circles, diamonds, or path. The start and endpoint of the connector can be decorated with the connector 's source decorator and target decorator properties. The following code shows how the target decorator and its property should be defined.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
                //Defines diagram's connector collection
                public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
                protected override void OnInitialized()
                {
                  DiagramConnector DiagramConnector = new DiagramConnector()
                    {
                     SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                     TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                     TargetDecorator = new ConnectorTargetDecorator()
                     {
                      Shape = DecoratorShapes.Arrow,
                      Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                      },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       //Specify the segment types as straight.
                       Type = Segments.Straight,
                      };
                      ConnectorCollection.Add(DiagramConnector);
                  }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDecorator.#ctor">
            <summary>
            Represents the connector's start and endpoint decorations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Height">
            <summary>
            Gets or sets the height of the decorator. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.PathData">
            <summary>
            Defines the shape of the decorator geometry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Pivot">
            <summary>
            Specifies the position (X, Y) of the decorator to the source or target point of the connector. By default, it is set to X=0,Y=0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Shape">
            <summary>
            This property allows the user to define the shape of the decorator.
            </summary>
            <remarks>
            Start and endpoints of a connector can be decorated with some customizable shapes like arrows, circles, diamonds, or path.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Style">
            <summary>
            Defines the appearance of the decorator.
            </summary>
            <remarks>
            Users can customize the appearance of the source or target decorator by using the property such as StrokeColor, Strokewidth, StrokeDashArray, and Fill.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[TargetDecorator = new ConnectorTargetDecorator()
            {
                Shape = DecoratorShapes.Arrow,
                //Defines the style of decorator
                Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDecorator.Width">
            <summary>
            Gets or sets the width of the decorator.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
            <example>
            <remarks>
            The user handles are icons that are placed around the node or connector to run the frequently used commands.
            </remarks>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                  Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
                  //Defines mouse over tooltip for a connector
                  Tooltip = new ConnectorTooltip()
                  {
                    //Sets the content of the tooltip
                    Content = "Connector1",
                    //Sets the position of the tooltip
                    Position = Syncfusion.Blazor.Popups.Position.BottomRight,
                    //Sets the tooltip position relative to the connector
                    RelativeMode = TooltipRelativeMode.Object
                  }
                };
               ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle.#ctor">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle.Margin">
            <summary>
            Specifies the space that the fixed user handle has to be moved from its actual position.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[   FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() { Id = "user1", Height = 20, Width = 20, Visibility = true,Margin = new UserHandleMargin() { Right = 20, Bottom = 20 }, Offset = new IconOffset() { X = 1, Y = 0 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeFixedUserHandle.Offset">
            <summary>
            Specifies the position of the node fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
            <remarks>
            The user handles are icons that are placed around the node or connector to run the frequently used commands.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px"  Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>() { };
               protected override void OnInitialized()
               {
                 DiagramConnector connector1 = new DiagramConnector()
                 {
                   // Unique name for the connector
                   Id = "connector1",
                   // Source and Target node's name to which connector needs to be connected.
                   SourcePoint = new ConnectorSourcePoint() { X = 200, Y = 100 },
                   TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 },
                   Type = Segments.Orthogonal,
                   FixedUserHandles = new ObservableCollection<DiagramConnectorFixedUserHandle>()
                   {
                    new DiagramConnectorFixedUserHandle() { Id = "user2",Height = 20, Width = 20, Offset = 1,Fill = "red",Visibility = true, Alignment = AnnotationAlignment.After, Displacement ={ X = 10,Y = 10 },CornerRadius = 4, HandleStrokeColor = "green" , HandleStrokeWidth = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                   },
                  };
                 ConnectorCollection.Add(connector1);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.#ctor">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.Offset">
            <summary>
            Specifies the position of the connector fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.Displacement">
            <summary>
            Specifies the displacement of an fixed user handle from its actual position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectorFixedUserHandle.Alignment">
            <summary>
            Specifies the segment alignment of the fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramGradient">
            <summary>
            It allows the user to define and apply the gradient effect.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">There are two types of gradients as follows</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Linear Gradient. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Radial Gradient. </td>
            </tr>
            <tr>
            <td style = "border: none"> The following code demonstrates, how to define the Linear Gradient and its properties.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes array.
               DiagramNode Node = new DiagramNode()
               {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle()
                 {
                    Gradient = new DiagramGradient()
                    {
                     //Start point of linear gradient
                     X1 = 0,
                     Y1 = 0,
                     //End point of linear gradient
                     X2 = 50,
                     Y2 = 50,
                     //Sets an array of stop objects
                     Stops = new ObservableCollection<DiagramsGradientStop>()
                     {
                        new DiagramsGradientStop(){ Color = "white", Offset = 0},
                        new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                      },
                      Type = GradientType.Linear
                    }
                  },
                };
                NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramGradient.#ctor">
            <summary>
            It allows the user to define and apply the gradient effect.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Cx">
            <summary>
            Specifies the center point of the outer circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Cy">
            <summary>
            Specifies the center point of the outer circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Fx">
            <summary>
            Specifies the center point of the inner circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Fy">
            <summary>
            Specifies the center point of the inner circle of the radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Id">
            <summary>
            Specifies the Id of the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.R">
            <summary>
            Specifies the radius of a radial gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Stops">
            <summary>
            Specifies the color and a position, where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Type">
            <summary>
            Specifies the type of gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.X1">
            <summary>
            Specifies the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.X2">
            <summary>
            Specifies the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Y1">
            <summary>
            Specifies the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramGradient.Y2">
            <summary>
            Specifies the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramLayer">
            <summary>
            Represents to organize related shapes on a diagram.
            </summary>
            <remarks>
            A layer is a named category of shapes. By assigning shapes to different layers, the user can selectively view, remove, and lock different categories of shapes.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramLayer.#ctor">
            <summary>
            Represents to organize related shapes on a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.AddInfo">
            <summary>
            Allows the user to store the additional information about the Layer.
            </summary>
            <remarks>
            The additional information can be stored in any type while serializing and can be retrieved whenever the user needs it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Id">
            <summary>
            Specifies the unique id of the layer.
            </summary>
            <remarks>
            Layer Id needs to be unique to use. Users should not provide the same id to another layer.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Lock">
            <summary>
            Enables or disables the editing of objects in a specific layer.
            </summary>
            <remarks>
            This property is used to prevent or allow changes to the element dimension and position.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Objects">
            <summary>
            Specifies objects which are added to a specific layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.Visible">
            <summary>
            Control the visibility of the elements assigned to the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayer.ZIndex">
            <summary>
            Specifies the visual order of the layer.
            </summary>
            <remarks>
            The property specifies the stack order of the layer. A node with greater stack order is always in front of a Layer with a lower stack order.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramLayout">
            <summary>
            Represents the class to arrange the nodes and connectors in a tree structure.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">There are various layout modes available for user`s, they are as follows </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Hierarchical layout </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Organization chart </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Mind Map layout</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Radial tree</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Symmetric layout</td>
            </tr>
            <tr>
            <td style = "border: none">6.   Complex hierarchical tree layout</td>
            </tr>
            <tr>
            <td style = "border: none">The following code demonstrates, how to define the Hierarchical layout and its properties.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram id="diagram" Height="600px" Nodes="@NodeCollection" @ref="@Diagram" Connectors="@ConnectorCollection" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
            </SfDiagram>
            @code {
              SfDiagram Diagram;
              public async Task DownloadDiagram()
              {
             string data = await Diagram.SaveDiagram();
              }
              ObservableCollection<DiagramNode>
                  NodeCollection;
              ObservableCollection<DiagramConnector>
                 ConnectorCollection;
              //Uses layout to auto-arrange nodes on the diagram page
              DiagramLayout LayoutValue = new DiagramLayout()
              {
                   //Sets layout type as HierarchicalTree...
                   Type = LayoutType.HierarchicalTree,
                   VerticalSpacing = 40,
                   HorizontalSpacing = 40,
              };
              //Sets the default properties for nodes
              DiagramNode NodeDefaults = new DiagramNode()
              {
                Height = 40,
                Width = 100,
                //Initializing the default node's shape style
                Style = new NodeShapeStyle() { Fill = "darkcyan", StrokeWidth = 3, StrokeColor = "Black" },
                Annotations = new ObservableCollection<DiagramNodeAnnotation()
                {
                    new DiagramNodeAnnotation() { Style = new AnnotationStyle() { Color = "white", Bold = true }, }
                }
               };
               //Sets the default properties for the connectors
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                 Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
               };
               protected override void OnInitialized()
               {
                 //Initializing node and connectors
                 NodeCollection = new ObservableCollection<DiagramNode>()
                  {  new DiagramNode(){Id="node1",Annotations = new ObservableCollection<DiagramNodeAnnotation>
                     (){new DiagramNodeAnnotation(){Content="Steve-Ceo"}}},
                     new DiagramNode(){Id="node2",Annotations = new ObservableCollection<DiagramNodeAnnotation>
                     (){new DiagramNodeAnnotation(){Content="Kevin-Manager"}}},
                     new DiagramNode(){Id="node3",Annotations = new ObservableCollection<DiagramNodeAnnotation>
                     (){new DiagramNodeAnnotation(){Content="Peter-Manager"}}},
                   };
                  ConnectorCollection = new ObservableCollection<DiagramConnector()
                 {
                    new DiagramConnector(){Id="connector1",SourceID="node1",TargetID="node2"},
                    new DiagramConnector(){Id="connector2",SourceID="node1",TargetID="node3"},
                  };
                }
             }
            ]]>
            </code>
            </example>
            <summary>
            Represents the class to arrange the nodes and connectors in a tree structure.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramLayout.#ctor">
            <summary>
            Represents the class to arrange the nodes and connectors in a tree structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Bounds">
            <summary>
            Aligns the layout within the given bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.ConnectionDirection">
            <summary>
            Specifies the Connection segment direction, by default it`s auto.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following list shows the ConnectionDirection types.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Auto - Defines the first segment direction based on the type of layout </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Orientation - Defines the first segment direction based on the orientation of the layout. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Custom - Defines the first segment direction dynamically by the user.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.ConnectorSegments">
            <summary>
            Specifies whether the segments must be customized based on the layout or not.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following list shows the ConnectionSegments types.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Default - Routes the connectors like a default diagram.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Layout - Routes the connectors based on the type of the layout. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.EnableAnimation">
            <summary>
            Enables/Disables animation option when a node is expanded/collapsed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[protected override void OnInitialized()
            {
             LayoutValue = new DiagramLayout()
             {
              Type = LayoutType.HierarchicalTree,
              VerticalSpacing = 30,
              HorizontalSpacing = 30,
              EnableAnimation = true,
              LayoutInfo = this.LayoutInfo
             };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.EnableRouting">
            <summary>
            Enable / Disable connector routing for the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.FixedNode">
            <summary>
            Sets the name of the node concerning which all other nodes will be translated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.HorizontalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in HorizontalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.ConnectionPointOrigin">
            <summary>
            connect the connector to node without overlapping in automatic layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Arrangement">
            <summary>
            Child nodes will be arranged in linear way Or Non linear way in complex layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.HorizontalSpacing">
            <summary>
            Specifies the space that must be horizontally left between the nodes. It is 30, by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.LayoutInfo">
            <summary>
            Sets the layout properties using node property.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[TreeInfo LayoutInfo = new TreeInfo()
             {
               CanEnableSubTree = true,
               Orientation = SubTreeOrientation.Horizontal
              };
             protected override void OnInitialized()
             {
               LayoutValue = new DiagramLayout()
              {
                Type = LayoutType.HierarchicalTree,
                VerticalSpacing = 30,
                HorizontalSpacing = 30,
                EnableAnimation = true,
                LayoutInfo = this.LayoutInfo
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Margin">
            <summary>
            Specifies the space between the viewport and the layout. By default {left:50, top:50, right:0, bottom:0}.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramLayout LayoutValue = new DiagramLayout()
            {
              Type = LayoutType.ComplexHierarchicalTree,
              HorizontalSpacing = 40,
              VerticalSpacing = 40,
              Orientation = LayoutOrientation.TopToBottom,
              Margin = new LayoutMargin() { Left = 20, Top = 20 },
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.MaxIteration">
            <summary>
            Sets the maximum no of iteration of the layout. It is 30, by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Orientation">
            <summary>
            Specifies the orientation of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Root">
            <summary>
            Specifies the parent node of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.SpringFactor">
            <summary>
            Specifies the edge attraction and vertex repulsion forces. More sibling nodes repel each other.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.SpringLength">
            <summary>
            Sets how long edges should be, ideally of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.Type">
            <summary>
            This type property is used to define the type of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.VerticalAlignment">
            <summary>
            Describes how the layout should be positioned or stretched in VerticalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramLayout.VerticalSpacing">
            <summary>
            Specifies the space that must be Vertically left between the nodes. It is 30, by default.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMargin">
            <summary>
            Specifies the space to be left from an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramMargin.#ctor">
            <summary>
            Specifies the space to be left from an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMargin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMethodArguments">
            <summary>
            Represents the behavior of the uml class method.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
                //Defines diagram's Node collection
                public ObservableCollection<DiagramNode> NodeCollection { get; set;
                protected override void OnInitialized()
                {
                  NodeCollection = new ObservableCollection<DiagramNode>();
                  DiagramNode Node = new DiagramNode()
                  {
                     Id = "Patient",
                     OffsetX = 200,
                     OffsetY = 200,
                     Shape = new DiagramShape()
                     {
                      Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                      Classifier = ClassifierShape.Interface,
                      //Define interface object
                      InterfaceShape = new DiagramUmlInterface()
                      {
                         Name = "Patient",
                         //Define interface attributes
                         Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                         {
                            new DiagramUmlClassAttribute() { Name = "owner", Type = "String[*]" }
                          },
                          //Define interface methods
                          Methods = new ObservableCollection<DiagramUmlClassMethod>()
                          {
                            new DiagramUmlClassMethod()
                            {
                              Name = "deposit",
                              Parameters = new ObservableCollection<DiagramMethodArguments>()
                              {
                                new DiagramMethodArguments(){Name = "amount", Type = "Dollars" }
                              }
                            }
                          }
                        }
                      }
                    };
                    //Add node
                    NodeCollection.Add(Node);
                 }
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.#ctor">
            <summary>
            Represents the behavior of the uml class method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.Name">
            <summary>
            Specifies the name of the method argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.Style">
            <summary>
            Specifies the shape style of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMethodArguments.Type">
            <summary>
            This type property is used to define the type of the DiagramMethodArguments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNode">
            <summary>
            Represents the graphical objects that are used to visually represent the geometrical information.
            </summary>
            <remarks>
            Nodes are graphical objects that are used to visually represent the geometrical information. A node can be resized by dragging the user handle proportionally or by selecting a side to make the shape taller or wider.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                 // A node is created and stored in the nodes collection.
                 DiagramNode Node = new DiagramNode()
                 {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                  };
                  // Add node
                  NodeCollection.Add(Node);
                }
             }
            ]]>
            </code>
            </example>
            <summary>
            Represents the graphical objects used to visually represent the geometrical information, process flow, internal business procedure, entity, or any other kind of data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNode.#ctor">
            <summary>
            Represents the graphical objects that are used to visually represent the geometrical information.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.AddInfo">
            <summary>
            It allows the user to store additional information about the nodes.
            </summary>
            <remarks>
            Enables the user to store data of any datatype.  It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public List<NodeAddInfo> AddInfo = new List<NodeAddInfo>()
             {
               new NodeAddInfo() { Content = "NodeContent", ParentID = "diagram" }
             };
             protected override void OnInitialized()
             {
                DiagramNode Node = new DiagramNode()
               {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    AddInfo = AddInfo
                };
                // Add node
                NodeCollection.Add(Node);
              }
            public class NodeAddInfo
            {
               public string ParentID;
               public string Content;
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Annotations">
            <summary>
            It allows the user to store the collection of textual annotations of the node.
            </summary>
            <remarks>
            Annotation is used to textually represent an object with a string that can be edited at runtime. Users can able to modify the annotation Style, Visibility, Width, Height, and content of the annotation.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.FixedUserHandles">
            <summary>
            It allows the user to store the collection of Fixed User Handles of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.BackgroundColor">
            <summary>
            Get or Set node BackGroundColor, by default its Transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Branch">
            <summary>
            Specifies Mindmap Branch.
            </summary>
            <remarks>
            Users can able to set the Branch based on its parent element.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class MindMapDetails
            {
              public string Branch { get; set; }
            }
            public object DataSource = new List<object>()
            {
              new MindMapDetails() { Id= "1", Label="Creativity", ParentId ="", Branch = "Root" },
              new MindMapDetails() { Id= "2",  Label="Brainstorming", ParentId ="1", Branch = "subLeft" },
              new MindMapDetails() { Id= "3",  Label="Complementing", ParentId ="1", Branch = "subLeft" },
              new MindMapDetails() { Id= "4",  Label="Sessions", ParentId ="1", Branch = "subRight" },
              new MindMapDetails() { Id= "5",  Label="Complementing", ParentId ="1", Branch = "subRight" },
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Children">
            <summary>
            Represents the children in a group element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.CollapseIcon">
            <summary>
            Represents the state of the node.
            </summary>
            <remarks>
            CollapseIcon can be aligned relative to the node boundaries. User can able to Customize CollapseIcon using BorderColor, BorderWidth, Fill, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ColumnIndex">
            <summary>
            Used to define an index of the column in the grid, by default it is undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ColumnSpan">
            <summary>
            Merge the column use the property in the grid container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Constraints">
            <summary>
            The constraints property allows you to enable or disable certain behaviors or the node. Annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Data">
            <summary>
            Nodes can be generated automatically with the information provided through the data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.DragSize">
            <summary>
            Defines the size of a drop symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.SymbolInfo">
            <summary>
            Defines the information of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ExcludeFromLayout">
            <summary>
            Defines whether the node should be positioned automatically or not. Applicable, if the layout option is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ExpandIcon">
            <summary>
            Represents the state of the node.
            </summary>
            <remarks>
            ExpandIcon can be aligned relative to the node boundaries. User can able to Customize ExpandIcon using BorderColor, BorderWidth, Fill, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Flip">
            <summary>
            A flip is performed to give the mirror image of the original element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Height">
            <summary>
            Gets or sets the node height.
            </summary>
            <remarks>
            The height of a node does not include borders or margins.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.HorizontalAlignment">
            <summary>
            Describes how a node should be positioned or stretched in HorizontalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Id">
            <summary>
            Returns the unique id of the node.
            </summary>
            <remarks>
            Node Id needs to be unique to use. While creating a node, the user should not provide the same id to other nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.IsExpanded">
            <summary>
            Defines Whether the node is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.LayoutInfo">
            <summary>
            Sets the layout properties using node property.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[TreeInfo LayoutInfo = new TreeInfo()
             {
               CanEnableSubTree = true,
               Orientation = SubTreeOrientation.Horizontal
              };
              protected override void OnInitialized()
               {
                 LayoutValue = new DiagramLayout()
                 {
                    Type = LayoutType.HierarchicalTree,
                    VerticalSpacing = 30,
                    HorizontalSpacing = 30,
                    EnableAnimation = true,
                    LayoutInfo = this.LayoutInfo
                 };
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Margin">
            <summary>
            Specifies the space around the node. The default values for the margin are set to 0 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MaxHeight">
            <summary>
            Sets the maximum height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MaxWidth">
            <summary>
            Sets the maximum width of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MinHeight">
            <summary>
            Sets the minimum height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.MinWidth">
            <summary>
            Sets the minimum width of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.OffsetX">
            <summary>
            Sets the X-coordinate of the position of the node, by default its 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.OffsetY">
            <summary>
            Sets the Y-coordinate of the position of the node, by default its 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Pivot">
            <summary>
            Sets the reference point, that will act as the offset values (offsetX, offsetY) of a node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Pivot values range from 0 to 1. By default, the Pivot values are set to X= 0.5 and Y=0.5.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When X= 0 and Y = 0, OffsetX and OffsetY values are considered as the top-left corner of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When X= 0.5 and Y = 0.5, OffsetX and OffsetY values are considered as the node’s center point.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   When X= 1 and Y = 1, OffsetX and OffsetY values are considered as the bottom-right corner of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Ports">
            <summary>
            Represents a port or connection point in the node. points of nodes/connectors.
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the Ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.PreviewSize">
            <summary>
            Defines the size of the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.RotateAngle">
            <summary>
            Sets the rotate angle of the node, by default it is 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.RowIndex">
            <summary>
            Used to define an index of the row in the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.RowSpan">
            <summary>
            Merge the row use the property in the grid container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Shadow">
            <summary>
            Defines the shadow of a node.
            </summary>
            <remarks>
            Shadow effect to a node is disabled, by default. It can be enabled with the constraint’s property of the node. The Angle, Distance, and Opacity of the shadow can be customized with the shadow property of the node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Shape">
            <summary>
            Defines the geometrical representation of a node.
            </summary>
            <remarks>
             A provided option such as BasicShape, PathModel, BPMNShapemodel, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Style">
            <summary>
            Provides the options to personalize or customize the appearance of the node.
            </summary>
            <remarks>
            A provided option such as Fill, StrokeColor, StrokeWidth, Gradient, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramNode Node = new DiagramNode()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                // Add node
                Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeDashArray = "5,5", StrokeColor = "red", StrokeWidth = 2 },
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Tooltip">
            <summary>
            Specifies the message that is displayed when the mouse hovers over a node.
            </summary>
            <remarks>
            By default, Tooltip will provide the size, position, and angle related information while dragging, resizing, and rotating.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//...
            public DiagramTooltip Tooltip = new DiagramTooltip()
            {
               Content = "Nodes",
               Position = Syncfusion.Blazor.Popups.Position.TopLeft
             };
              DiagramNode Node = new DiagramNode()
              {
               Id = "node1",
               Width = 100,
               Height = 100,
               OffsetX = 200,
               OffsetY = 200,
               Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
               Constraints = NodeConstraints.Default | NodeConstraints.Tooltip,
               }
              //...
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.VerticalAlignment">
            <summary>
            Describes how a node should be positioned or stretched in VerticalAlignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Visible">
            <summary>
            Enables or disables the visibility of the node, by default its true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.Width">
            <summary>
            Gets or sets the node Width.
            </summary>
            <remarks>
            The width of a node does not include borders or margins.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNode.ZIndex">
            <summary>
            Defines the visual order of the node in DOM.
            </summary>
            <remarks>
            The property specifies the stack order of the node. A node with greater stack order is always in front of a node with a lower stack order.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNode.BeginUpdate">
            <summary>
            Prevents redrawing of model on the client side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNode.EndUpdate">
            <summary>
            Enable redrawing of model on the client side.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation">
            <summary>
            Represents the block of text displayed over the node.
            </summary>
            <remarks>
            Annotation is used to present some textual data for the node which can be edited at runtime. Multiple annotations can be added to a node. User can able to modify the annotation style, visibility, width, height, and content of the annotation through code or visually.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
             // A node is created and stored in the node array.
             DiagramNode Node = new DiagramNode()
                {
                   // Position of the node
                   OffsetX = 250,
                   OffsetY = 250,
                   // Size of the node
                   Width = 100,
                   Height = 100,
                   Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                   // Initialize port collection
                   Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                   {
                     // An annotation is created and stored in an Annotation collection of Node.
                     new DiagramNodeAnnotation() { Content = "Annotation" }
                   }
                  };
                 };
                 NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.#ctor">
            <summary>
            Represents the block of text displayed over the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.AddInfo">
            <summary>
            Specifies the additional information about annotation.
            </summary>
            <remarks>
            Enables the user to store data of any datatype. It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <summary>
            Represents the graphical objects that are used to visually represent the geometrical information.
            </summary>
            <remarks>
            Nodes are graphical objects that are used to visually represent the geometrical information. A node can be resized by dragging the user handle proportionally or by selecting a side to make the shape taller or wider.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class AddInfo{
              public string Description{get, set}}
             // An annotation is created and stored in an annotation collection of the node.
             Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
             new DiagramNodeAnnotation()
             Content = "Annotation"
             AddInfo = new AddInfo() { Description = “Annotation1”}
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.AnnotationType">
            <summary>
            This property allows the user to define a type of annotation template.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the value of the Annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   String - Annotation template to be in the string.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Template - Annotation template to be in HTML Content. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Constraints">
            <summary>
            The constraints property allows the user to enable or disable certain behaviors of the label. For instance, the user can disable annotation editing and able to make it as read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Content">
            <summary>
            Gets or sets the textual description of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.DragLimit">
            <summary>
            This property allows the user to limit the dragging of node labels to a certain distance. By default, DragLimit is set to 20 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[// An annotation is created and stored in an annotation collection of the node.
            Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
            new DiagramNodeAnnotation()
            Content = "Annotation"
            DragLimit = new NodeAnnotationDragLimit() { Top = 20, Left = 20 ,Right = 20, Bottom = 20}
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Height">
            <summary>
            Gets or sets the height of the annotations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.HorizontalAlignment">
            <summary>
            Describes how an annotation element is horizontally positioned or stretched within a node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the Horizontal Alignment of the annotation</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Hyperlink">
            <summary>
            This property allows the user to add a hyperlink to the node label.
            </summary>
            <remarks>
            User can able to show hyperlink as an annotation content or alternate display text for the hyperlink
             In the following image, you can see the alternate display text for the hyperlink has set as an annotation content.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Id">
            <summary>
            Returns the unique id of an annotation.
            </summary>
            <remarks>
            Annotation Id needs to be unique to use. When creating a label, the user should not provide the same id to other labels.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Margin">
            <summary>
            Specifies the space around the annotation content. The default values for the Margin are set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[Annotations = new ObservableCollection<DiagramNodeAnnotation> ()
             {
              //An annotation is created and stored in the Annotations collection of Node.
              new DiagramNoderAnnotation()
              {
                Content = "Annotation",
                Margin = new NodeAnnotationMargin() { Top = 10, Left = 10, Bottom = 10, Right = 10 }
              }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Offset">
            <summary>
            Specifies the position of the label relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=0.5. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the label will be position at the top left corner of the node.    </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the label will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the label will be position at the bottom right corner of the node.   </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.RotateAngle">
            <summary>
            Gets or sets the rotation angle of the label.
            </summary>
            <remarks>
            Node labels can be rotated either by code-behind or mouse interaction. By default, the rotate angle will be 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Style">
            <summary>
            Defines the appearance of the text.
            </summary>
            <remarks>
            User can change the font style of the label with the font specific properties such as  font family, font size, font color, bold, etc., The fill and border appearances of the text can also be customized with appearance specific properties of label such as fill color, border color, etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Template">
            <summary>
            This property represents the template’s content of the label. The User can define any HTML content as a template.
            </summary>
            <remarks>
            Users can set the label content as a template instead of textual content or hyperlink, by using template property. For that SVG/HTML content should be defined as a string in an annotation’s template property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Type">
            <summary>
            This property is used to define the positioning behavior of the annotation. It can be either “Shape” or “Path”.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set for the Type property of the annotation,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   shape - sets the annotation type to shape. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Path – sets the annotation type to the path.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.VerticalAlignment">
            <summary>
            Describes how an annotation element is vertically positioned or stretched within a node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the vertical Alignment of the annotation</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Top - Aligns the diagram element at the top of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Bottom - Aligns the diagram element at the bottom of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Center - Aligns the diagram element at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Auto - Aligns the diagram element based on the characteristics of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Visibility">
            <summary>
            specifies the visibility of the annotation.
            </summary>
            <remarks>
            By default, visibility is set to true. If it is false, then the node annotation will not be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation.Width">
            <summary>
            Gets or sets the width of an annotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo">
            <summary>
            Represents the necessary information of a node’s children and the way to arrange them.
            </summary>
            <remarks>
            User can able to set chart orientations, chart types, and offset to be left between parent and child nodes.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
             <DiagramDataSource Id = "Id" ParentId="Team" DataSource="@DataSource" ></DiagramDataSource>
            </SfDiagram>
            @code {
              //Initializing layout
              DiagramLayout LayoutValue;
              protected override void OnInitialized()
              {
                 LayoutValue = new DiagramLayout()
                 {
                   //Sets layout type as OrganizationalChart...
                   Type = LayoutType.OrganizationalChart,
                   VerticalSpacing = 50,
                   HorizontalSpacing = 40,
                   //Initialize the layout info for the org chart layout
                   LayoutInfo = new TreeInfo
                   {
                     Orientation = SubTreeOrientation.Vertical,
                     CanEnableSubTree = true,
                    }
                  };
                }
                //Initializing node defaults
                DiagramNode NodeDefaults = new DiagramNode()
                {
                  Width = 150,
                  Height = 50,
                  Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                  Style = new NodeShapeStyle { Fill = "#6BA5D7", StrokeColor = "black", },
                  LayoutInfo = new DiagramNodeLayoutInfo()
                  {
                    Orientation = Orientation.Vertical,
                    Type = SubTreeAlignments.Right
                   }
               };
               //Initializing connector defaults
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                 Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                 Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 1 },
                 TargetDecorator = new ConnectorTargetDecorator()
                 {
                    Shape = DecoratorShapes.None,
                   Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                  }
                };
              public class OrgChartDataModel
              {
                 public string Id { get; set; }
                 public string Team { get; set; }
                 public string Role { get; set; }
               }
              public object DataSource = new List<object>()
              {
                new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.#ctor">
            <summary>
            Represents the necessary information of a node’s children and the way to arrange them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Assistants">
            <summary>
            Specifies a child item that has a different relationship with the parent node.
            </summary>
            <remarks>
            A node can be specified as an assistant of its parent by adding it to the assistant’s property of the argument. They are laid out in a dedicated part of the tree.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[LayoutInfo = new TreeInfo
              {
                Orientation = SubTreeOrientation.Vertical,
                Offset = -20,
                CanEnableSubTree = true,
                //provides an assitant details for the root node
                GetAssistantDetails = new AssistantsDetails()
                {
                  Root = "General Manager",
                  Assistants = new string[] {“Assistant Manager" }
                 }
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Children">
            <summary>
            Specifies the children for the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.EnableRouting">
            <summary>
            LineRouting constraints allow to enable line routing.
            </summary>
            <remarks>
            This Reroutes the connector segment whenever the node is placed over it. Routing can be possible only if the connector type is set to orthogonal.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.HasSubTree">
            <summary>
            Specifies whether the node has subTree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Level">
            <summary>
            Arranges the leaf level child nodes in multiple rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Offset">
            <summary>
            Specifies the position of the node to be arranged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Orientation">
            <summary>
            Arranges the child nodes to the parent based on its type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Rows">
            <summary>
            Specifies the row for the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramNodeLayoutInfo.Type">
            <summary>
            Specifies the collection of subtree alignments in a layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPoint">
            <summary>
            Represents the point in a diagram where a node/connector to be placed in it.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPoint.#ctor">
            <summary>
            Represents the point in a diagram where a node/connector to be placed in it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPoint.X">
            <summary>
            Sets the X-coordinate of a position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPoint.Y">
            <summary>
            Sets the Y-coordinate of a position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPort">
            <summary>
            Represents a port or connection point in the node.
            </summary>
            <remarks>
            Ports act as the connection points of node and allow them to create connections with only those specific points. There may be any number of ports in a node. You can able to modify the Ports appearance, visibility, positioning, and can add custom shapes to it.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
             </SfDiagram>
             @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes array.
                DiagramNode Node = new DiagramNode()
                {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  // Initialize port collection
                  Ports = new ObservableCollection<DiagramPort>() {
                  new DiagramPort() {
                       Offset = new NodePortOffset() { X = 0.5, Y = 0.5 },
                       Visibility = PortVisibility.Visible,
                       Style= new PortShapeStyle(){ Fill="gray”},
                   }},
                  };
                 NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPort.#ctor">
            <summary>
            Represents a port or connection point in the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.AddInfo">
            <summary>
            It allows the user to store additional information about the ports.
            </summary>
            <remarks>
            Enables the user to store data of any datatype.  It will be serialized and deserialized automatically while saving and opening the diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[public class AdditionalInfo
             {
               public string Description { get; set; }
             };
            new DiagramPort()
            {
                Offset = new NodePortOffset() { X = 0.5, Y = 0.5 },
                Style = new PortShapeStyle()
                {Fill = "gray”},
             AddInfo = new AdditionalInfo() { Description = "Port1" }
             }
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Constraints">
            <summary>
            The constraints property allows you to enable or disable certain behaviors or the port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Height">
            <summary>
            Gets or sets the port height.
            </summary>
            <remarks>
            The height of a port does not include borders or margins and by default its 12 px.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.HorizontalAlignment">
            <summary>
            Describes how a child element is horizontally positioned or stretched within a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Id">
            <summary>
            Returns the unique id of the port.
            </summary>
            <remarks>
             Port Id needs to be unique to use. While creating a port, the user should not provide the same id to other ports.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.InEdges">
            <summary>
            Returns the collection of incoming connector IDs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Margin">
            <summary>
            Specifies the space from the actual offset values of the port. The default values for the Margin are set to 0 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Offset">
            <summary>
            Specifies the position of the port concerning the boundaries of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=0.5.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When X= 0 and Y = 0, then the port will be position at the top left corner of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When X= 0.5 and Y = 0.5, then the port will be position at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When X= 1 and Y = 1, then the port will be position at the bottom right corner of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.OutEdges">
            <summary>
            Specifies the collection outgoing connectors id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.PathData">
            <summary>
            Specifies the custom graphical path (shape) of the Port.
            </summary>
            <remarks>
            To create a custom shaped port, the user must set the shape as ‘custom’ and then set the PathData.   (A custom graphics path is a set of connected lines, curves, and other simple graphics objects, including rectangles, ellipses, and text. A path works as a single graphics object, so an effect applied to the graphics path will be applied to the port.)
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Shape">
            <summary>
            Specifies the shape of the port, by default it will Square.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The below list of shape types is used to define the port shape.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   X - Sets the shape as X.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Circle - Sets the shape as Circle. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Square - Sets the shape as Square. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Custom - Sets the shape as Custom..</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Style">
            <summary>
            Provides the options to personalize or customize the appearance of port.
            </summary>
            <remarks>
            A provided option such as Fill, StrokeColor, StrokeWidth, Gradient, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramPort() {
              Id = "port1",
              Offset = new NodePortOffset() { X = 0, Y = 0.5 },
              Visibility = PortVisibility.Visible,
              //Set the style for the port
              Style= new PortShapeStyle() { Fill = "red", StrokeColor = "black", StrokeWidth = 2},
              // Sets the shape of the port as Circle
              Width= 12, Height=12, Shape= PortShapes.Circle
              }
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.VerticalAlignment">
            <summary>
            Describes how a port element is vertically positioned or stretched within a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Visibility">
            <summary>
            specifies the Visibility of the port.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">  The below list of options is used to control the visibility of the ports. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Visible - Default value. The port is visible</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Hidden - The port is hidden.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Hover - Shows the port when the mouse hovers a node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Connect - Shows the port when a connection endpoint is dragged over a node.  </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPort.Width">
            <summary>
            Gets or sets the width of the port.
            </summary>
            <remarks>
            The width of a port does not include borders or margins and by default its 12 px.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSelectedItems">
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.#ctor">
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Connectors">
            <summary>
            Get the collection of selected connector objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Constraints">
            <summary>
            The constraints property is used to enable or disable certain behaviors of the Selected Items.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    This property controls the visibility of the selector. </td>
            </tr>
            <tr>
            <td style = "border: none">•    Users can able to control the resize, user handles behaviors, etc.</td>
            </tr>
            <tr>
            <td style = "border: none">•     By default, the constraints will be SelectorConstraints.All. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Height">
            <summary>
            Gets the height of the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Nodes">
            <summary>
            Gets the collection of selected node objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.OffsetX">
            <summary>
            Gets the X coordinate position of the selected region.  Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.OffsetY">
            <summary>
            Gets the Y coordinate position of the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Pivot">
            <summary>
            Gets the position(X,Y) to the selector .By default, this will be (0.5,0.5) to the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.RotateAngle">
            <summary>
            Gets the rotate angle of the selection area. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.RubberBandSelectionMode">
            <summary>
            Specifies whether the diagram objects can be selected, when the selection region intersects the objects or selected only when the complete object's bounds inside the selection region.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">This property has two options. They are  </td>
            </tr>
            <tr>
            <td style = "border: none">•    CompleteIntersect </td>
            </tr>
            <tr>
            <td style = "border: none">•    PartialIntersect  </td>
            </tr>
            <tr>
            <td style = "border: none">By default, this Mode will be CompleteIntersect. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.UserHandles">
            <summary>
            Defines the collection of UserHandle objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSelectedItems.Width">
            <summary>
            Gets the width of the selection region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsGridLines">
            <summary>
            Represents the visual guidance while dragging or arranging the objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px">
               @* Customize the appearance of the grid lines *@
               <DiagramSnapSettings Constraints = "SnapConstraints.ShowLines" >
                  < HorizontalGridlines LineColor="blue" LineDashArray="2,2" LineIntervals="@LineIntervals">
                  </HorizontalGridlines>
                  <VerticalGridlines LineColor = "blue" LineDashArray="2,2" LineIntervals="@LineIntervals">
                  </VerticalGridlines>
             </DiagramSnapSettings>
            </SfDiagram>
            @code{
              //Sets the line intervals for the gridlines
              public double[] LineIntervals { get; set; } = new double[] {
                        1.25, 14, 0.25, 15, 0.25, 15, 0.25, 15, 0.25, 15
            };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines._jsNamespace">
            <summary>
            Represents the visual guidance while dragging or arranging the objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.DotIntervals">
            <summary>
            A pattern of gaps that defines a set of horizontal/vertical grid dots.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.LineColor">
            <summary>
            Sets the line color of gridlines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.LineDashArray">
            <summary>
            Defines the pattern of dashes and gaps used to stroke horizontal grid lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.LineIntervals">
            <summary>
            A pattern of lines and gaps that defines a set of horizontal/vertical gridlines.
            </summary>
            <remarks>
             In the line intervals collections, values at the odd places are referred to as the thickness of lines and values at the even places are referred to as the space between gridlines.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGridLines.SnapIntervals">
            <summary>
            Specifies a set of intervals to snap the objects. By default, the objects are snapped towards the nearest grid line.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGridLines.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGridLines.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGridLines.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramShadow">
            <summary>
            Represents the shadow appearance of the objects.
            </summary>
            <remarks>
            By default, the shadow effect is disabled. It can be enabled with the constraint’s property.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[@using Syncfusion.Blazor.Diagrams
            @using System.Collections.ObjectModel
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                // A node is created and stored in nodes array.
                DiagramNode Node = new DiagramNode()
                {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    Constraints = NodeConstraints.Default | NodeConstraints.Shadow,
                    // Custom Shadow of the node
                    Shadow = new DiagramShadow()
                    {
                     Angle = 50,
                     Opacity = 0.8,
                     Distance = 9
                    }
                  };
                 NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramShadow.#ctor">
            <summary>
            Represents the shadow appearance of the objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Angle">
            <summary>
            Specifies the Angle of the shadow. By default, it is 45.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Color">
            <summary>
            Specifies the color of the shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Distance">
            <summary>
            Specifies the Distance of shadow. By default, it is 5px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShadow.Opacity">
            <summary>
            Specifies the Opacity of shadow. The opacity value ranges from 0 to 1.  By default, it is 0.7.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramShape">
            <summary>
            Defines the shape for the diagram nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramShape.#ctor">
            <summary>
            Initialize the members of the shape for the diagram nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Activity">
            <summary>
            Defines the type of the BPMN Activity shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Align">
            <summary>
            Defines the alignment of the image within the node boundary.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Annotation">
            <summary>
            Defines the text of the bpmn annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Annotations">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.BasicShape">
            <summary>
            Defines the type of the basic shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.BpmnShape">
            <summary>
            Represents the internal business procedure in a graphical notation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.ClassShape">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Classifier">
            <summary>
            Defines the type of classifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Content">
            <summary>
            Defines the geometry of a native element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.CornerRadius">
            <summary>
            Sets the corner of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Data">
            <summary>
            Defines the geometry of a path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.DataObject">
            <summary>
            Defines the type of the BPMN DataObject shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.EnumerationShape">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Event">
            <summary>
            Defines the type of the BPMN Event shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.FlowShape">
            <summary>
            Defines the type of the flow shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Gateway">
            <summary>
            Defines the type of the BPMN Gateway shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.InterfaceShape">
            <summary>
            Defines the text of the bpmn annotation collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Margin">
            <summary>
            Defines the space to be let between the node and its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Points">
            <summary>
            Defines the collection of points to draw a polygon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Scale">
            <summary>
            Defines the scale of the native element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Source">
            <summary>
            Defines the source of the image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.TextContent">
            <summary>
            Defines the text of the text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.Type">
            <summary>
            Defines the type of node shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramShape.UmlActivityShape">
            <summary>
            Defines the type of the UMLActivity shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsRuler">
            <summary>
            Represents the behavior and appearance of the horizontal/vertical rulers for the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.Interval">
            <summary>
            Defines the number of intervals to be present on each segment of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.MarkerColor">
            <summary>
            Defines the color of the ruler marker brush.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.Orientation">
            <summary>
            Defines the orientation of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.SegmentWidth">
            <summary>
            Defines the textual description of the ruler segment, and the appearance of the ruler ticks of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.Thickness">
            <summary>
            Defines the height of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsRuler.TickAlignment">
            <summary>
            Defines and sets the tick alignment of the ruler scale.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsRuler.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsRuler.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsRuler.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsTooltip">
            <summary>
            Represents the textual content that appears while the mouse is hovering  over an element of the diagram.
            </summary>
            <remarks>
            The Tooltip will be displayed, when dragging, resizing, rotating a node, and when the cursor hovers over any diagram elements.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Tooltip="@Tooltip">
              <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               //Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines position of the tooltip
               public DiagramTooltip Tooltip = new DiagramTooltip()
               {
                  Content = "Nodes",
                  Position = Syncfusion.Blazor.Popups.Position.TopLeft
               };
               protected override void OnInitialized()
               {
                 NodeCollection = new ObservableCollection<DiagramNode>();
                 //Defines nodes
                 DiagramNode Node = new DiagramNode()
                 {
                  Id = "node1",
                  Width = 100,
                  Height = 100,
                  OffsetX = 200,
                  OffsetY = 200,
                  Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
                  Constraints = NodeConstraints.Default | NodeConstraints.InheritTooltip,
                 };
                 NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip._jsNamespace">
            <summary>
            Represents the textual content that appears while the mouse is hovering  over an element of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Animation">
            <summary>
            This property allows the user to enable the animation to the tooltip.
            </summary>
            <remarks>
            To animate the tooltip specific animation effects are available, and it can be controlled by Animation property. This property allows the user to set some animation effects such as display, duration, zoom in, zoom out,etc., The following code shows how to define the Animation property of DiagramsTooltip.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[//.     .
            //.     .
             //Defines mouse over tooltip for a node
             Tooltip = new NodeTooltip()
             {
              Animation = new Syncfusion.Blazor.Popups.AnimationModel()
                {
                  //Animation settings to be applied on the tooltip, while it is being shown over the target.
                  Open = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
                  {
                    //Animation effect on the tooltip is applied during open and close actions.
                    Effect = Syncfusion.Blazor.Popups.Effect.ZoomIn,
                    //Duration of the animation that is completed per animation cycle.
                    Duration = 1000,
                    //Indicating the waiting time before the animation begins.
                    Delay = 0
                   },
                   //Animation settings to be applied on the tooltip, when it is closed.
                   Close = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
                   {
                     Effect = Syncfusion.Blazor.Popups.Effect.ZoomOut,
                     Duration = 500,
                     Delay = 0
                   }
                 }
              }
             //.     .
             //.    .
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Content">
            <summary>
            Defines the content of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Height">
            <summary>
            Gets or sets the height of the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.OpenOn">
            <summary>
            Specifies whether the tooltip can be open automatically or open manually using public API.
            </summary>
            <remarks>
            This property has two options, they are Auto and custom. By default, it will be Auto.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Position">
            <summary>
            Defines the position of the Tooltip.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Tooltip can be aligned by using the DiagramsTooltip property. </td>
            </tr>
            <tr>
            <td style = "border: none">•    There are applicable positions such as TopLeft,  TopRight, BottomLeft, BottomRight, etc., where the tooltip can be displayed over the specific target elements. </td>
            </tr>
            <tr>
            <td style = "border: none">•    By default, the position of the tooltip will be TopLeft.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.RelativeMode">
            <summary>
            This property defines whether the tooltip has to displayed around the object or at the mouse position. By default, it will be Mouse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.ShowTipPointer">
            <summary>
            Defines the tooltip has tip pointer or not. By default, it will be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsTooltip.Width">
            <summary>
            Gets or sets the width of the tooltip.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsTooltip.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsTooltip.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsTooltip.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramstrokeStyle">
            <summary>
            Represents the appearance of the connector stroke style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramstrokeStyle.#ctor">
            <summary>
            Initialize the appearance of the connector stroke style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTextStyle">
            <summary>
            Represents the text style for an object.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               SnapConstraints snapConstraints;
               protected override void OnInitialized()
               {
                  snapConstraints = SnapConstraints.None;
                  NodeCollection = new ObservableCollection<DiagramNode>();
                  DiagramNode Node = new DiagramNode()
                  {
                    Id = "node1",
                    Width = 100,
                    Height = 100,
                    OffsetX = 100,
                    OffsetY = 100,
                    // Sets the annotation for the node
                    Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                    new DiagramNodeAnnotation() {Content = "Annotation Text",Style = new AnnotationStyle() {Color="black",Bold = true,Italic = true,TextDecoration=TextDecoration.Underline,FontSize = 12,FontFamily = "TimesNewRoman"  } }
                  },
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                };
                NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTextStyle.#ctor">
            <summary>
            Represents the text style for an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Bold">
            <summary>
            Specifies whether a font appears in bold or not. By default, it`s false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Color">
            <summary>
            Specifies the font color of a text. By default, it`s black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Fill">
            <summary>
            Sets the fill color of a shape/path. By default, it`s transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.FontFamily">
            <summary>
            Specifies the font type of a text. By default, it`s Arial.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.FontSize">
            <summary>
            Specifies the font size of a text. By default, it`s 12.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Italic">
            <summary>
            Enables/disables the italic style of a text. By default, it`s false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.Opacity">
            <summary>
            Specifies the transparency level of the text. By default, it`s 1.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Opacity values are ranges from 0 to 1 are as follow as, </td>
            </tr>
            <tr>
            <td style = "border: none">•    0- completely transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    0.5- Partially transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    1- not transparent at all. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color of a text. By default, it`s black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.StrokeDashArray">
            <summary>
            Specifies the patterns of dashes and spaces to stroke the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.StrokeWidth">
            <summary>
            Specifies the stroke width of the text. By default, it`s 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextAlign">
            <summary>
            Specifies how they should be aligned within its bounds. By default, it`s set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextDecoration">
            <summary>
            Specifies how the text should be decorated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextOverflow">
            <summary>
            Specifies how to handle the text when it exceeds the given size. By default, it`s set to Wrap.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.TextWrapping">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds. By default, it`s set to WrapWithOverflow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTextStyle.WhiteSpace">
            <summary>
            Specifies how to white space and new line characters must be handled. By default, it`s set to CollapseSpace.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlClass">
            <summary>
            Sets or gets the behavior of the Uml class shapes.
            </summary>
            <remarks>
            Used to represent the static view of an application. The class diagrams are widely used in the modeling of object-oriented systems because they are the only UML diagrams that can be mapped directly with object-oriented languages. Diagram supports to generate the class diagram shapes from business logic.
            The following code demonstrates, how to define the DiagramUmlClass and its properties.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                  // . . .
                  Shape = new DiagramShape()
                  {
                    Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                    Classifier = ClassifierShape.Class,
                    //Define class object
                    ClassShape = new DiagramUmlClass()
                    {
                       Name = "Patient",
                       //Define class attributes
                       Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                       {
                         new DiagramUmlClassAttribute() {Name = "accepted", Type = "Date"}
                       },
                       //Define class methods
                       Methods = new ObservableCollection<DiagramUmlClassMethod>()
                       {
                        new DiagramUmlClassMethod()
                        {
                          Name = "getHistory", Type = "getHistory"
                        }
                     }
                  }
                }
               //Add node
               NodeCollection.Add(Node);
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlClass.#ctor">
            <summary>
            Sets or gets the behavior of the Uml class shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Attributes">
            <summary>
            Specifies the variable, where user can define when creating a class.
            </summary>
            <remarks>
            The attribute’s Name, Type, and Scope properties allow you to define the name, data type, and visibility of the attribute.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Methods">
            <summary>
            Specifies the implementation of operation in a class.
            </summary>
            <remarks>
            The method`s Name, Parameters, Type, and scope properties allow you to define the name, parameter, return type, and visibility of the methods.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Name">
            <summary>
            Defines the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClass.Style">
            <summary>
            Sets the shape style of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute">
            <summary>
            Sets or gets the behavior of the Uml class Attribute.
            </summary>
            <remarks>
            The attribute’s Name, Type, and Scope properties allow you to define the name, data type, and visibility of the attribute.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.#ctor">
            <summary>
            Sets or gets the behavior of the Uml class Attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.IsSeparator">
            <summary>
            Specifies the Separator of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Name">
            <summary>
            Specifies the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Scope">
            <summary>
            Specifies whether each instance of the class has its distinct value or just a single value by all instances of the class.
            </summary>
            <remarks>
            There are two types of scope for members. They are instance and classifier.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Style">
            <summary>
            Sets the Shape style of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassAttribute.Type">
            <summary>
            Specifies the Data type of attributes.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod">
            <summary>
            Defines the appearance and behavior of the UML Class Shape.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              //Defines diagram's Node collection
              public ObservableCollection<DiagramNode> NodeCollection { get; set; }
              protected override void OnInitialized()
              {
                 NodeCollection = new ObservableCollection<DiagramNode>();
                 DiagramNode Node = new DiagramNode()
                {
                    OffsetX = 200,
                    OffsetY = 200,
                    Shape = new DiagramShape()
                    {
                     Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                     Classifier = ClassifierShape.Class,
                     //Define class object
                     ClassShape = new DiagramUmlClass()
                     {
                       Name = "Patient",
                       //Define class methods
                       Methods = new ObservableCollection<DiagramUmlClassMethod>()
                       {
                        new DiagramUmlClassMethod()
                        {
                          Name = "getHistory", Type = "getHistory", Style = new UMLParameterShapeStyle()
                          { Color = "red" }, IsSeparator = true, Scope = UmlScope.Private
                        }
                      }
                    }
                   }
                  };
                  //Add node
                  NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.#ctor">
            <summary>
            Defines the appearance and behavior of the UML Class Shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.IsSeparator">
            <summary>
            Specifies wether we need separator lines for each patrameters. By default, set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Name">
            <summary>
            Defines the name of the UML class attributes. By default, set to empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Parameters">
            <summary>
            Defines the arguments to the UML class shape. By default, set to null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Scope">
            <summary>
            Defines the scope(visibility) of the UML class attributes. By default, set to public.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Style">
            <summary>
            Defines the appearance of the Uml class method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlClassMethod.Type">
            <summary>
            Defines the type of the UML class attributes. By default, it is set to empty string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration">
            <summary>
            Gets or sets the behavior of the UmlEnumeration.
            </summary>
            <remarks>
            To define an enumeration, define the classifier property of node as Enumeration.  Also, define the name and members of the enumeration using the enumeration property of the node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               // . . .
               DiagramNode Node = new DiagramNode()
               {
                 Id = "Patient",
                 OffsetX = 200,
                 OffsetY = 200,
                 Shape = new DiagramShape()
                 {
                   Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                   Classifier = ClassifierShape.Enumeration,
                   //Define enumeration object
                   EnumerationShape = new DiagramUmlEnumeration()
                   {
                     Name = "AccountType",
                     //set the members of enumeration
                     Members = new ObservableCollection<DiagramUmlEnumerationMember>()
                     {
                       new DiagramUmlEnumerationMember()
                       {
                         Name = "Checking Account"
                       },
                       new DiagramUmlEnumerationMember()
                       {
                         Name = "Savings Account"
                        },
                        new DiagramUmlEnumerationMember()
                        {
                          Name = "Credit Account"
                        }
                     }
                    }
                  }
                };
                NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.#ctor">
            <summary>
            Gets or sets the behavior of the UmlEnumeration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.Members">
            <summary>
            Specifies the implementation of operation in enumeration members.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.Name">
            <summary>
            Specifies the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumeration.Style">
            <summary>
            Sets the Shape style of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember">
            <summary>
            Represents the UML enumeration members of the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.#ctor">
            <summary>
            Represents the UML enumeration members of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.IsSeparator">
            <summary>
            Defines the separator of the attribute. By default, it’s set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.Name">
            <summary>
            Defines the name of the member. By default, it will be an empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.Style">
            <summary>
            Sets the shape style of the node. By default, it’s set to null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlEnumerationMember.Value">
            <summary>
            Defines the value of the member. By default, it will be an empty string.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUmlInterface">
            <summary>
            Sets or gets the behavior of the UmlInterface.
            </summary>
            <remarks>
            An Interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. To create an interface, define the classifier property as Interface.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //...
               DiagramNode Node = new DiagramNode()
               {
                  Id = "Patient",
                  OffsetX = 200,
                  OffsetY = 200,
                  Shape = new DiagramShape()
                  {
                     Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                     Classifier = ClassifierShape.Interface,
                     //Define interface object
                     InterfaceShape = new DiagramUmlInterface()
                     {
                       Name = "Patient",
                       //Define interface attributes
                       Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                       {
                         new DiagramUmlClassAttribute() { Name = "owner", Type = "String[*]" }
                       },
                       //Define interface methods
                       Methods = new ObservableCollection<DiagramUmlClassMethod>()
                       {
                         new DiagramUmlClassMethod()
                         {
                           Name = "deposit",
                           Parameters = new ObservableCollection<DiagramMethodArguments>()
                           {
                             new DiagramMethodArguments(){Name = "amount", Type = "Dollars" }
                           }
                        }
                       }
                     }
                  }
               };
               //Add node
               NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.#ctor">
            <summary>
            Sets or gets the behavior of the UmlInterface.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Attributes">
            <summary>
            Specifies the variable, where user can define when creating a class.
            </summary>
            <remarks>
            The attribute’s Name, Type and Scope properties allow you to define the name, data type, and visibility of the attribute.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.IsSeparator">
            <summary>
            Specifies the Separator of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Methods">
            <summary>
            Specifies the implementation of operation in a class.
            </summary>
            <remarks>
            The method’s Name, Parameters, Type, and Scope properties allow you to define the Name, Parameter, Return type, and Visibility of the methods.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Name">
            <summary>
            Specifies the name of the attributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUmlInterface.Style">
            <summary>
            Sets the Shape style of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramUserHandle">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
            <remarks>
            The user handles are icons that are placed around the selected node or connector to run the frequently used commands, and that icons can be the path, image, SVG content, or HTMLTemplate.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               protected override void OnInitialized()
               {
                 //Creating the user handle for cloning the objects
                 DiagramUserHandle CloneHandle = new DiagramUserHandle()
                 {
                     //Name of the user handle
                      Name = "clone",
                     //Set pathdata for userhandle
                     PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                 };
                 //Add user handle to the user handle collection
                 UserHandles = new ObservableCollection<DiagramUserHandle>()
                 {
                     CloneHandle
                 };
                 SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                 {
                  //Enable user handle for selected items...
                  Constraints = SelectorConstraints.UserHandle,
                  UserHandles = this.UserHandles
                 };
                 NodeCollection = new ObservableCollection<DiagramNode>();
                 DiagramNode DiagramNode = new DiagramNode()
                 {
                    Id = "node1",
                    OffsetX = 100,
                    OffsetY = 100,
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                  };
                  NodeCollection.Add(DiagramNode);
                 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramUserHandle.#ctor">
            <summary>
            Represents a customizable handle that can be used to perform custom actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.BackgroundColor">
            <summary>
            Defines the background color of the user handles. By default, it will be black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.BorderColor">
            <summary>
            Defines the border color of the user handles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.BorderWidth">
            <summary>
            Defines the border width of the user handles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Content">
            <summary>
            Defines the shape information of the user handle. This property is specific to the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.DisableConnectors">
            <summary>
            Defines the visibility of the user handles to the Connectors.
            </summary>
            <remarks>
            By default, this property will be false. If set true, the user handles prevent rendering for the connectors.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.DisableNodes">
            <summary>
            Defines the visibility of the user handles to the Nodes.
            </summary>
            <remarks>
            By default, this property will be false. If set true, the user handles prevent rendering for the nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Displacement">
            <summary>
            This property allows the user to dislocate the user handle from its original position by the given value. By default, it will be 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.HorizontalAlignment">
            <summary>
            Defines the horizontal alignment of the user handle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the HorizontalAlignment of the user handle,</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">By default, the HorizontalAlignment of the user handle will be center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Margin">
            <summary>
            Specifies the space around the user handles. By default, it will be 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[//set margin for the user handle
              Margin = new DiagramUserHandleMargin() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Name">
            <summary>
            Returns the unique name of the user handle.
            </summary>
            <remarks>
            user handle Name needs to be unique to use. When creating a handle, the user should not provide the same Name to other handles.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Offset">
            <summary>
            Gets or sets the position for the user handle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1.  </td>
            </tr>
            <tr>
            <td style = "border: none">1.   0 represents the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   0.5 represents half of the width or height.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   1  represents the bottom right corner of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">By default, the offset value is set to 0.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.PathColor">
            <summary>
            Defines the path color of the user handle. By default, it will be white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.PathData">
            <summary>
            Defines the shape information of the user handle. This property is specific to the Path of the user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[    DiagramUserHandle cloneHandle = new DiagramUserHandle()
            {
               //Set pathdata to userhandle
               PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Side">
            <summary>
            Gets or sets the side of the user handle based on the given offset.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Users can customize the side property of the user handle. This property has the following options</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Top - Aligns the user handles at the top of an object.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Bottom - Aligns the user handles at the bottom of an object.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Left - Aligns the user handles at the left of an object</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Right - Aligns the user handles at the right of an object</td>
            </tr>
            <tr>
            <td style = "border: none">By default, the side property will be Top.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Size">
            <summary>
            Gets or sets the size of the user handle. By default, it will be 25.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Source">
            <summary>
            Defines the shape information of the user handle. This property is specific to the image source of the user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[DiagramUserHandle CloneHandle = new DiagramUserHandle()
              {
                  //Set image source to userhandle
                  Source =  './download.png',
              },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.VerticalAlignment">
            <summary>
            Defines the vertical alignment of the user handle.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the Horizontal Alignment of the user handle</td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the selector.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the selector.</td>
            </tr>
             /// <tr>
            <td style = "border: none">By default, the VerticalAlignment of the user handle will be center.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramUserHandle.Visible">
            <summary>
            Specifies the visibility of the user handle. By default, it will be true.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EnumerationMemberShapeStyle">
            <summary>
            Represents the text style for an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.EnumerationMemberShapeStyle.#ctor">
            <summary>
            Specifies the UML enumeration member shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UMLClassShapeStyle">
            <summary>
            Defines the UML class shape style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UMLClassShapeStyle.#ctor">
            <summary>
            Defines the UML class shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UMLEnumerationShapeStyle">
            <summary>
            defines the UML Enumeration shape style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UMLEnumerationShapeStyle.#ctor">
            <summary>
            defines the UML Enumeration shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UMLParameterShapeStyle">
            <summary>
            defines the UML parameter shape style.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UMLParameterShapeStyle.#ctor">
            <summary>
            defines the UML parameter shape style.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BridgeDirection">
            <summary>
            BridgeDirection allows the user to set the bridging (crossover to avoid intersection) direction according to their preference.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following code snippet is an example to set the bridge’s direction to the right.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection" Constraints="@DiagramConstraints" BridgeDirection="BridgeDirection.Right"/>
            @code
            {
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               //Enable the bridging constraint for diagram.
               public DiagramConstraints DiagramConstraints = DiagramConstraints.Default | DiagramConstraints.Bridging;
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector1 = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 200, Y = 200 },
                       TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 },
                   };
                   ConnectorCollection.Add(DiagramConnector1);
                   DiagramConnector DiagramConnector2 = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 },
                   };
                   ConnectorCollection.Add(DiagramConnector2);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Top">
            <summary>
            Sets the bridge’s direction to the top. It is the default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Bottom">
            <summary>
            Sets the bridge’s direction to the bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Left">
            <summary>
            Sets the bridge’s direction to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BridgeDirection.Right">
            <summary>
            Sets the bridge’s direction to the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConstraints">
            <summary>
            Constraints enable or disable certain behaviors of the diagram, nodes, and nodes, etc.,.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The constraints are enabled or disabled using bitwise operators. The constraints are disabled using ‘~’ bitwise operator.</td>
            </tr>
            <tr>
            <td style = "border:none">The constraints should be set in the Constraints of the SfDiagram.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links might be useful in understanding the Constraints in the diagram.</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.AnnotationConstraints.html">1. AnnotationConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BoundaryConstraints.html">2.   BoundaryConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.ConnectorConstraints.html">3.  ConnectorConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeConstraints.html">4.   NodeConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.PortConstraints.html">5.   PortConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.SnapConstraints.html">6.   SnapConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.SelectorConstraints.html">7.   SelectorConstraints</a></td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set diagram constraints as default and page editable.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
            </SfDiagram>
            @code{
            //Sets the Diagram constraints...
            DiagramConstraints DiagramConstraints = DiagramConstraints.Default & ~DiagramConstraints.PageEditable;
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.ApiUpdate">
            <summary>
            Enables or disables the update through public API  diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Bridging">
            <summary>
            Enables or disables the Bridging support for the connector in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Default">
            <summary>
            Enables all default constraints to the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.LineRouting">
            <summary>
            Enables or disables the line routing for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.None">
            <summary>
            Disables all the diagram functionalities except rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.PageEditable">
            <summary>
            PageEditable enables or disables the page editing support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Pan">
            <summary>
            Enables or disables the panning both X and Y coordinates support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.PanX">
            <summary>
            Enables or disables the Paning X coordinate support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.PanY">
            <summary>
            Enables or disables the Panning Y coordinate support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Tooltip">
            <summary>
            Enables or disables the Tooltip option for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.UndoRedo">
            <summary>
            Enables or disables the Undo/Redo option for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.UserInteraction">
            <summary>
            Enables or disables the user interaction for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Virtualization">
            <summary>
            Enables or disables the Virtualization support for  the diagram
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.Zoom">
            <summary>
            Enables or disables the Zoom support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramConstraints.ZoomTextEdit">
            <summary>
            Enables or disables zooming the text box while editing the text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RenderingMode">
            <summary>
            Defines the type of diagram to be rendered either Canvas or SVG.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following code snippet is an example to set the rendering mode to Canvas</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Mode="RenderingMode.Canvas"></SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RenderingMode.SVG">
            <summary>
            Renders the diagram in SVG element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RenderingMode.Canvas">
            <summary>
            Renders the diagram in Canvas element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Actions">
            <summary>
            Specifies a custom cursor action in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.None">
            <summary>
            Disable all actions for cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Select">
            <summary>
            Sets the select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Drag">
            <summary>
            Sets the Drag action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeWest">
            <summary>
            Sets the ResizeWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ConnectorSourceEnd">
            <summary>
            Sets the Connector SourceEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ConnectorTargetEnd">
            <summary>
            Sets the Connector TargetEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeEast">
            <summary>
            Sets the ResizeEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeSouth">
            <summary>
            Sets the ResizeSouth action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeNorth">
            <summary>
            Sets the select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeSouthEast">
            <summary>
            Sets the Resize SouthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeSouthWest">
            <summary>
            Sets the Resize SouthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeNorthEast">
            <summary>
            Sets the Resize NorthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ResizeNorthWest">
            <summary>
            Sets the Resize NorthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Rotate">
            <summary>
            Sets the Rotate action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.ConnectorEnd">
            <summary>
            Sets the Connector End action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Custom">
            <summary>
            Sets the Custom action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Draw">
            <summary>
            Sets the Draw action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Pan">
            <summary>
            Sets the Pan action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.BezierSourceThumb">
            <summary>
            Sets the Bezier SourceThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.BezierTargetThumb">
            <summary>
            Sets the Bezier TargetThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LayoutAnimation">
            <summary>
            Sets the Layout Animation action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.PinchZoom">
            <summary>
            Sets the Pinch Zoom action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.Hyperlink">
            <summary>
            Sets the Hyperlink action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.SegmentEnd">
            <summary>
            Sets the SegmentEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.OrthoThumb">
            <summary>
            Sets the OrthoThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.PortDrag">
            <summary>
            Sets the Port Drag action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.PortDraw">
            <summary>
            Sets the Port Draw action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelSelect">
            <summary>
            Sets the Label Select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelDrag">
            <summary>
            Sets the Label Drag action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeSouthEast">
            <summary>
            Sets the Label ResizeSouthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeSouthWest">
            <summary>
            Sets the Label ResizeSouthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeNorthEast">
            <summary>
            Sets the Label ResizeNorthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeNorthWest">
            <summary>
            Sets the Label ResizeNorthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeSouth">
            <summary>
            Sets the Label ResizeSouth action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeNorth">
            <summary>
            Sets the Label ResizeNorth action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeWest">
            <summary>
            Sets the Label ResizeWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelResizeEast">
            <summary>
            Sets the Label ResizeEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Actions.LabelRotate">
            <summary>
            Sets the LabelRotate action for the cursor.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorConstraints">
            <summary>
            The connector constraints allow the users to enable or disable certain behaviors and features of the connectors.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The connector constraints can be enabled or disabled using the Bitwise operators. The ‘~’ operator can be used to disable the connector constraints.</td>
            </tr>
            <tr>
            <td style = "border:none">The below code snippet is an example to set connector constraints to default and to enable connector selection.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
              ObservableCollection<DiagramConnector> ConnectorCollection;
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       //sets the ConnectorConstraints...
                       Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.AllowDrop">
            <summary>
            Enables to trigger drop event when any object is dragged or dropped to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.BridgeObstacle">
            <summary>
            Enables the connector to be treated as bridge obstacle..
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Bridging">
            <summary>
            Enables bridging to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ConnectToNearByElement">
            <summary>
            Enables to connect nearest elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ConnectToNearByNode">
            <summary>
            Enables to connect nearest node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ConnectToNearByPort">
            <summary>
            Enables to connect nearest port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Default">
            <summary>
            Enables all constraints for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Delete">
            <summary>
            Enables or Disables the deletion of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Drag">
            <summary>
            Enables or Disables connector to be Dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.DragSegmentThumb">
            <summary>
            Enables the control point and endpoint of every segment in a connector for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.DragSourceEnd">
            <summary>
            Enables the connector's source end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.DragTargetEnd">
            <summary>
            Enables connectors target end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.InheritBridging">
            <summary>
            Enables to inherit bridging option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.InheritLineRouting">
            <summary>
            Enables or disables to inheriting the routing option from the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.InheritTooltip">
            <summary>
            Enables or disables to inheriting tooltip option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Interaction">
            <summary>
            Enables or disables Interaction for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.LineRouting">
            <summary>
            Enables or disables routing to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.None">
            <summary>
            Disable all connector Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.PointerEvents">
            <summary>
            Enables to set the pointer-events.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.ReadOnly">
            <summary>
            Enables or disables read-only for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Select">
            <summary>
            Enables or Disables the selection of a  connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorConstraints.Tooltip">
            <summary>
            Enables or disables tooltip for the connectors.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FlipDirection">
            <summary>
            Specifies how the diagram elements have to be flipped.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using flip direction, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/customization/">1.    Connectors</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/nodes/positioning/#flip">2.  Nodes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply vertical flip direction, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               SfDiagram diagram;
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   // A node is created and stored in nodes array.
                   DiagramNode Node = new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 250,
                       OffsetY = 250,
                       // Size of the node
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                       // Flip the node in Vertical Direction
                       Flip = FlipDirection.Vertical,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.Basic,
                           BasicShape = BasicShapes.Triangle
                       }
                   };
                   // Add node
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.Horizontal">
            <summary>
            Flip the diagram shape horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.Vertical">
            <summary>
            Flip the diagram shape vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.Both">
            <summary>
            Flip the diagram shape to both horizontally and vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlipDirection.None">
            <summary>
            No flip will be applied and this is the default value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Segments">
            <summary>
            Specifies the segment type of the connector.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the segments, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/segments/">1. Connector</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply straight segments, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Arrow,
                           Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       //Specify the segments type as straight.
                       Type = Segments.Straight,
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Straight">
            <summary>
            Sets the segment type as Straight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Orthogonal">
            <summary>
            Sets the segment type as Orthogonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Polyline">
            <summary>
            Sets the segment type as Polyline.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Segments.Bezier">
            <summary>
            Sets the segment type as Bezier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationAlignment">
            <summary>
            Specifies how the diagram elements must be aligned based on its immediate parent.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">To know more about using annotation alignment, refer to these links <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation~Alignment.html">DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border: none">To apply annotation alignment to a connector, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                       TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                       Type = Segments.Orthogonal,
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7" },
                       Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                       {
                          new DiagramConnectorAnnotation() { Content = "Before",Alignment=AnnotationAlignment.Before },
                           new DiagramConnectorAnnotation() { Content = "After",Alignment=AnnotationAlignment.After },
                       }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationAlignment.Center">
            <summary>
            Annotation placed over the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationAlignment.Before">
            <summary>
            Annotation placed top of the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationAlignment.After">
            <summary>
            Annotation placed bottom to the connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment">
            <summary>
            Specifies how the fixed user handle must be aligned.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[FixedUserHandles = new ObservableCollection<DiagramConnectorFixedUserHandle>()
                   {
                    new DiagramConnectorFixedUserHandle() { Id = "user2", Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 },Height = 20, Width = 20, Offset = 1,Fill = "red",Visibility = true, Alignment = FixedUserHandleAlignment.After, Displacement ={ X = 10,Y = 10 },CornerRadius = 4, HandleStrokeColor = "green" , HandleStrokeWidth = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                   },
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment.Center">
            <summary>
            Fixed user handle placed over the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment.Before">
            <summary>
            Fixed user handle placed top of the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FixedUserHandleAlignment.After">
            <summary>
            Fixed user handle placed bottom to the connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationType">
            <summary>
            Specifies the type of annotation template.
            </summary>
            <remarks>
            <table style = "border:none;">
            <tr>
            <td style = "border: none">To know more about using annotation type, refer to these links</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation~Alignment.html">1.    DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation_members.html">2.   DiagramNodeAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border: none">To apply annotation type to a connector, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" ModelType="@Model" Connectors="@ConnectorCollection">
               <DiagramTemplates>
                   <AnnotationTemplate>
                       @{
                           <table style = "width:100%;" >
                               < tbody >
                                   < tr >
                                       < th class="c1">ID</th>
                                       <td class="c1">Label1<b></b></td>
                                   </tr>
                                   <tr>
                                       <th class="c1">Width</th>
                                       <td class="c1">
                                           <b>  <input type = "button" value="Click Me"> </b>
                                       </td>
                                   </tr>
                               </tbody>
                           </table>
                       }
                   </AnnotationTemplate>
               </DiagramTemplates>
            </SfDiagram>
            @code
            {
            //Defines diagram's connector collection
            public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
            public Type Model = typeof(Node);
            public class Node
            {
               public string Id { get; set; }
               public double Width { get; set; }
            }
            protected override void OnInitialized()
            {
                ConnectorCollection = new ObservableCollection<DiagramConnector>();
                DiagramConnector Connector = new DiagramConnector()
                {
                    SourcePoint = new ConnectorSourcePoint() { X = 220, Y = 40 },
                    TargetPoint = new ConnectorTargetPoint() { X = 310, Y = 150 },
                    Type = Segments.Orthogonal,
                    Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7" },
                    Annotations = new ObservableCollection<DiagramConnectorAnnotation>()
                    {
                        new DiagramConnectorAnnotation() {Id="label2", AnnotationType=AnnotationType.Template },
                    }
               };
               ConnectorCollection.Add(Connector);
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationType.String">
            <summary>
            Specifies that the annotation will be string content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationType.Template">
            <summary>
            Specifies that the annotation user defined Html template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationConstraints">
            <summary>
            Annotation constraints control the features and behaviors of the annotations.
            </summary>
            <remarks>
            The annotation constraints are enabled or disabled using the Bitwise operators. The ‘~’ operator is used to disable the constraint.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Annotations = new ObservableCollection<DiagramNodeAnnotation>()
               {
                       new DiagramNodeAnnotation()
                       {
                           Content="Annotation Text Wrapping",
                           ///sets the Constraints for Annotation...
                           Constraints=AnnotationConstraints.ReadOnly,
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Drag">
            <summary>
            It enables the user to drag the annotation
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.InheritReadOnly">
            <summary>
            Enables or disables the user to inherit the ReadOnly option from the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Interaction">
            <summary>
            Enables or Disable annotation to inherit the interaction option
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.None">
            <summary>
            Disables all the functionalities of annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.ReadOnly">
            <summary>
            It enables the user to only read (cannot be edited) the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Resize">
            <summary>
            Enables or disables the resizing support for the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Rotate">
            <summary>
            Enables or disables the annotation rotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationConstraints.Select">
            <summary>
            It enables the user to select the desired node or connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HorizontalAlignment">
            <summary>
            Defines how the diagram elements must be aligned based on its immediate parent.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Horizontal Alignment, refer to these links:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramPort_members.html">1.  DiagramPort</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNode_members.html">2.  DiagramNode</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramLayout_members.html">3.    DiagramLayout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramUserHandle_members.html">4.    DiagramUserHandle</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation_members.html">5.   DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation_members.html">6.    DiagramNodeAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeExpandIcon_members.html">7. NodeExpandIcon</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeCollapseIcon_members.html">8. NodeCollapseIcon</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply port horizontal alignment, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   // A node is created and stored in nodes array.
                   DiagramNode Node = new DiagramNode()
                   {
                       // . .
                       // Initialize port collection
                       Ports = new ObservableCollection<DiagramPort>() {
                       new DiagramPort() {
                           HorizontalAlignment = HorizontalAlignment.Left
                       }},
                   };
                   NodeCollection.Add(Node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Stretch">
            <summary>
            Stretch the diagram element horizontally to its immediate parent’s.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Left">
            <summary>
            Align the diagram element horizontally to its immediate parent's left side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Right">
            <summary>
            Align the diagram element horizontally to its immediate parent's right side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Center">
            <summary>
            Align the diagram element horizontally to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HorizontalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s horizontal alignment property.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionPointOrigin.SamePoint">
            <summary>
            Connectors will connect with same point in the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionPointOrigin.DifferentPoint">
            <summary>
            Connectors will connect with different points in the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChildArrangement.Linear">
            <summary>
            Child nodes will be arranged in linear manner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChildArrangement.Nonlinear">
            <summary>
            Child nodes will be arranged in non linear manner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationTypes">
            <summary>
            It allows the user to define the type of annotation.
            </summary>
            <example>
            <code land="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "@snapConstraints" />
            </SfDiagram >
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               SnapConstraints snapConstraints;
               protected override void OnInitialized()
               {
                   snapConstraints = SnapConstraints.None;
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                           /// A annotation is created and stored in Annotations collection of Node.
                            new DiagramNodeAnnotation() { Content = "Node" ,Type=  AnnotationTypes.Shape} }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationTypes.Shape">
            <summary>
            Sets the annotation type as Path.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AnnotationTypes.Path">
            <summary>
            Sets the annotation type as Shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.VerticalAlignment">
            <summary>
            Defines how the diagram elements must be aligned based on its immediate parent.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using vertical alignment, refer to these links:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramPort_members.html">1. DiagramPort</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNode_members.html">2. DiagramNode</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramLayout_members.html">3. DiagramLayout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramUserHandle_members.html">4. DiagramUserHandle</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation_members.html">5. DiagramConnectorAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation_members.html">6. DiagramNodeAnnotation</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeExpandIcon_members.html">7. NodeExpandIcon</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.NodeCollapseIcon_members.html">8. NodeCollapseIcon.</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply vertical alignment to a port, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   /// A node is created and stored in nodes array.
                   DiagramNode Node = new DiagramNode()
                   {
                       /// . .
                       /// Initialize port collection
                       Ports = new ObservableCollection<DiagramPort>() {
                       new DiagramPort() {
                           VerticalAlignment = VerticalAlignment.Left
                       }},
                   };
                   NodeCollection.Add(Node);
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Stretch">
            <summary>
            Stretch the diagram element vertically to its immediate parent’s.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Top">
            <summary>
            Align the diagram element vertically to its immediate parent's top side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Bottom">
            <summary>
            Align the diagram element vertically to its immediate parent's bottom side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Center">
            <summary>
            Align the diagram element vertically to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.VerticalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent’s Vertical alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextDecoration">
            <summary>
            The TextDecoration property defines the decoration for a text in the text block.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the TextDecoration is set to None.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                         new DiagramNodeAnnotation() {Content = "Annotation Text",Style = new AnnotationStyle() {
                             //Set the TextDecoration for the annotation
                             TextDecoration=TextDecoration.Overline } }
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.Overline">
            <summary>
            The Overline property draws a horizontal line above the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.Underline">
            <summary>
            This property draws a horizontal line under the text in the text block.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.LineThrough">
            <summary>
            LineThrough property draws a horizontal line in the center of the text of a node or a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextDecoration.None">
            <summary>
            The None property represents the default text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextAlign">
            <summary>
            The TextAlign property allows the user to define the alignment of the text inside the text block.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set the TextAlign to Justify.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               ///Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100, = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       // Sets the textAlign as left for the content
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                           new DiagramNodeAnnotation() { Content = "Text align is set as Justify",Style = new AnnotationStyle(){ TextAlign = TextAlign.Justify} }
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Left">
            <summary>
            Sets the alignment of text in the text block to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Right">
            <summary>
            Sets the alignment of text in the text block to the right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Center">
            <summary>
            Sets the alignment of text in the text block to the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextAlign.Justify">
            <summary>
            Sets the alignment of text in respective to left and right margins.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextOverflow">
            <summary>
            The overflow property allows the user to clip the text content or to add scrollbars when the content of the text element is too large to fit in the specified diagram area.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the TextOverflow is set to Wrap.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set TextOverflow for annotations.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection">
               </SfDiagram>
            @code
            {
                   public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       // Sets the style for the text to be displayed
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                           new DiagramNodeAnnotation() {Content = "The text element with property of overflow as Wrap and wrapping as NoWrap",
                           Style = new AnnotationStyle(){ TextOverflow = TextOverflow.Clip} },
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextOverflow.Wrap">
            <summary>
            Wraps the text to the next line, when it exceeds its bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextOverflow.Ellipsis">
            <summary>
            Ellipsis hides the text if the text size exceeds the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextOverflow.Clip">
            <summary>
            The text is restricted to the node/connector boundary and the text will not be overflown.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TextWrap">
            <summary>
            TextWrap property is used to control the overflow of text in the node boundaries. The wrapping property defines how the text should be wrapped.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the TextWrap is set to WrapWithOverflow.</td>
            </tr>
            <tr>
            <td style = "border:none">The below link might be useful in understanding the TextWrap,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.TextOverflow.html">1.  TextOverflow</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100, = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                   new DiagramNodeAnnotation() {Content = "Annotation Text Wrapping",Style = new AnnotationStyle(){ TextWrapping = TextWrap.Wrap} }
                       },
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextWrap.WrapWithOverflow">
            <summary>
            Text-wrapping occurs when the text overflows beyond the available node width. However, the text may overflow beyond the node width in the case of a very long word.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextWrap.Wrap">
            <summary>
            The text will be wrapped inside the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TextWrap.NoWrap">
            <summary>
            The text will not be wrapped. If lengthy text exists, the boundary will not be a limitation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.WhiteSpace">
            <summary>
            Specifies how the white space and new line characters should be set.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white", WhiteSpace = WhiteSpace.CollapseAll },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                            new DiagramNodeAnnotation() { Content = "This is a node in diagram component" } }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.WhiteSpace.PreserveAll">
            <summary>
            Preserves (Includes) all empty spaces and empty lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.WhiteSpace.CollapseSpace">
            <summary>
            Collapses (Excludes) all consequent empty spaces and empty lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.WhiteSpace.CollapseAll">
            <summary>
            Collapses (Excludes) the consequent spaces into one
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DecoratorShapes">
            <summary>
            Specifies the connector decorator shape of the connector.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using decorator shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/">1. DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/context-menu/">2. ContextMenu</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/data-binding/">3. DataBinding</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/overview/">4. OverviewControl</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/symbol-palette/?no-cache=1">5. SymbolPalette</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/connectors/">6. Connectors</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">7. Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply connector decorator shapes, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 100 },
                       SourceDecorator = new ConnectorSourceDecorator()
                       {
                           Shape = DecoratorShapes.Circle,
                           Style = new DecoratorShapeStyle() { StrokeColor = "Black", Fill = "Red", StrokeWidth = 1 },
                       },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Diamond,
                           Style = new DecoratorShapeStyle() { StrokeColor = "Black", Fill = "Red", StrokeWidth = 1 },
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#37909A", StrokeWidth = 1 },
                       Type = Segments.Orthogonal,
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Arrow">
            <summary>
            Sets the decorator shape as Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.None">
            <summary>
            Sets the decorator shape as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Diamond">
            <summary>
            Sets the decorator shape as Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.OpenArrow">
            <summary>
            Sets the decorator shape as OpenArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Circle">
            <summary>
            Sets the decorator shape as Circle
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Square">
            <summary>
            Sets the decorator shape as Square
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Fletch">
            <summary>
            Sets the decorator shape as Fletch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.OpenFetch">
            <summary>
            Sets the decorator shape as OpenFetch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.IndentedArrow">
            <summary>
            Sets the decorator shape as Indented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.OutdentedArrow">
            <summary>
            Sets the decorator shape as Outdented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.DoubleArrow">
            <summary>
            Sets the decorator shape as DoubleArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DecoratorShapes.Custom">
            <summary>
            Sets the decorator shape as Custom
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows">
            <summary>
            The Association is used to link flow objects. It is denoted by a dotted line representation.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">By default, the Association flow is set to default.</td>
            </tr>
            <tr>
            <td style = "border: none" >The below links might be useful in understanding BpmnAssociationFlows,</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnFlows.html">1. BpmnFlows</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
                ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
                {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       ///Sets the type to Bpmn, flow to Association and association to bidirectional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Association,
                           Association=BpmnAssociationFlows.BiDirectional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.Default">
            <summary>
            Sets the Association flow to Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.Directional">
            <summary>
            Sets the Association flow to directional and it is single directional.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.BiDirectional">
            <summary>
            Sets the Association flow to Bidirectional. This flow is represented with a source and a target decorator from which it gets its name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AssociationFlow">
            <summary>
            Specifies the direction to the UML connectors.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the Association flow is set to default.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set AssociationFlow to Directional.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px " Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               //Create connector and stored it to the connector collection
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       // Startpoint and endpoint of the connector
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       ///Sets the type to Bpmn, flow to Association and association to bidirectional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.UmlClassifier,
                           AssociationType = AssociationFlow.Directional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AssociationFlow.Directional">
            <summary>
            Sets the Association flow to directional and it is single directional.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AssociationFlow.Default">
            <summary>
            Sets the Association flow to Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AssociationFlow.BiDirectional">
            <summary>
            Sets the Association flow to Bidirectional.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnFlows">
            <summary>
            BpmnFlows are used as connection(links) between Bpmn Flow objects.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following links might be useful in understanding BpmnFlows,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnAssociationFlows.html">1.  BpmnAssociationFlows</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnMessageFlows.html">2.  BpmnMessageFlows</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.html">3. BpmnSequenceFlows</a></td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet demonstrates how to set BpmnFlow types.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               //Create connector and stored it to the connector collection
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       //Sets type to Bpmn, flow to Sequence, and sequence to Conditional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Sequence,
                           Sequence=BpmnSequenceFlows.Conditional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnFlows.Sequence">
            <summary>
            Sets the BpmnFlow to Sequence and shows the order of activities performed in a BPMN activity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnFlows.Association">
            <summary>
            Sets the BpmnFlow to Association and it is used to link flow objects. It is denoted by a dotted line representation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnFlows.Message">
            <summary>
            Sets the BpmnFlow to Message and it shows the flow of messages between two participants, represented by a dashed line.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnMessageFlows">
            <summary>
            A Message flow shows the flow of messages between two participants, represented by a dashed line.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, BpmnMessageFlows is set to Default.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links might be useful in understanding BpmnMessageFlows, <a href = "https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnFlows.html">BpmnFlows</a></td>
            </tr>
            <td style = "border:none">The below code snippet is an example to set Message Flow to NonInitiatingMessage.</td>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       //Sets type to Bpmn, flow to Message, and message to InitiatingMessage
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Message,
                           Message=BpmnMessageFlows.NonInitiatingMessage
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnMessageFlows.Default">
            <summary>
            Sets the Message Flow to Default without a message symbol in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnMessageFlows.InitiatingMessage">
            <summary>
            Sets the Message Flow to InitiatingMessage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnMessageFlows.NonInitiatingMessage">
            <summary>
            Sets the Message Flow to NonInitiatingMessage.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ClassifierShape">
            <summary>
            Defines the type of UML shapes to be drawn.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Classifier shape, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/umldiagram/">1.  ClassifierShape</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply classifier class shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Defines diagram's Node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "Patient",
                       OffsetX = 200,
                       OffsetY = 200,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                           Classifier = ClassifierShape.Class,
                           //Define class object
                           ClassShape = new DiagramUmlClass()
                           {
                               Name = "Patient",
                               //Define class attributes
                               Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                           {
                                   new DiagramUmlClassAttribute() { Name = "accepted", Type = "Date" }
                               },
                               //Define class methods
                               Methods = new ObservableCollection<DiagramUmlClassMethod>()
                           {
                                   new DiagramUmlClassMethod()
                                   {
                                       Name = "getHistory", Type = "getHistory"
                                   }
                               }
                           }
                       }
                   };
                   //Add node
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Aggregation">
            <summary>
            It indicates the scope is a package. Aggregation is a binary association between a property and one or more composite objects which group a set of instances
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Class">
            <summary>
            It indicates the scope is protected. A class describes a set of objects that shares the same specifications of features, constraints, and semantics.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Interface">
            <summary>
            It indicates the scope is private. An Interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Enumeration">
            <summary>
            It indicates the scope is a package.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Inheritance">
            <summary>
            It indicates the scope is protected. Inheritance is also called as “generalization”. Inheritance is a binary taxonomic directed relationship between a more general classifier (superclass) and a more specific classifier (subclass)
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Association">
            <summary>
            It indicates the scope is private. Association is a set of links that connects elements of a UML model
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Composition">
            <summary>
            It indicates the scope is public. The composition is a “strong” form of “aggregation”
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Realization">
            <summary>
            It indicates the scope is protected.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ClassifierShape.Dependency">
            <summary>
            It indicates the scope is a package. Dependency is a directed relationship, which is used to show that some UML elements need or depends on other model elements for specifications.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows">
            <summary>
            A Sequence flow represents the order of the activities performed in a BPMN process. It is represented by a solid graphical line.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the BpmnSequenceFlow is set to Default.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links might be useful in understanding BpmnSequenceFlows</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnFlows.html">  BpmnFlows</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>()
               {
                   new DiagramConnector()
                   {
                       SourcePoint=new ConnectorSourcePoint(){X=100,Y=200},
                       TargetPoint=new ConnectorTargetPoint(){X=300,Y=200},
                       ///Sets type to Bpmn, flow to Sequence, and sequence to Conditional
                       Shape=new DiagramConnectorShape()
                       {
                           Type=ConnectionShapes.Bpmn,
                           BpmnFlow=BpmnFlows.Sequence,
                           Sequence=BpmnSequenceFlows.Conditional
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.Normal">
            <summary>
            Sets Sequence flow to Normal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.Default">
            <summary>
            Sets Sequence flow to Default and it has a small crossover line over the flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSequenceFlows.Conditional">
            <summary>
            Sets Sequence flow to Conditional and it has a diamond-like shape in the source point.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectionShapes">
            <summary>
            Specifies the type of BPMN connection to be drawn.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using connection shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/umldiagram/">1.  Uml Diagram Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/bpmn-shapes/bpmn-connectors/#association">2. Bpmn Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply UmlClassifier connection shapes, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Id = "Connector1",
                       Type = Segments.Straight,
                       //Define connector start and end points
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 },
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlClassifier,
                           Relationship = ClassifierShape.Association,
                           //Define type of association
                           Association = BpmnAssociationFlows.BiDirectional
                       }
                   };
                   //Add connector
                   ConnectorCollection.Add(Connector).
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.None">
            <summary>
            Specifies the connection type as a normal connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.Bpmn">
            <summary>
            Specifies the connection type as a BPMN connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.UmlActivity">
            <summary>
            Specifies the connection type as a UML activity type connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionShapes.UmlClassifier">
            <summary>
            Specifies the connection type as a UML classifier type connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UmlActivityFlows">
            <summary>
            UMLActivityFlows enumeration allows the user to set the type of UmlActivity connector.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">UMLActivityFlows enumeration allows the user to set the type of UmlActivity connector.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Type = Segments.Straight,
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlActivity,
                           //Set the UmlActivityFlows to Exception
                           UmlActivityFlow = UmlActivityFlows.Exception
                       },
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityFlows.Object">
            <summary>
            Sets the type of UMLActivityFlows as Object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityFlows.Control">
            <summary>
            Sets the type of UMLActivityFlows as Control.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityFlows.Exception">
            <summary>
            Sets the type of UMLActivityFlows as Exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Multiplicity">
            <summary>
            Specifies the multiplicity of uml connector shapes.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using multiplicity, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/umldiagram/#multiplicity">1. Uml Diagram Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply one to many multiplicity, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
               </SfDiagram>
            @code{
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Id = "Connector1",
                       Type = Segments.Straight,
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlClassifier,
                           //Set an relationship for connector
                           Relationship = ClassifierShape.Dependency,
                           Multiplicity = new DiagramClassifierMultiplicity()
                           {
                               //Set multiplicity type
                               Type = Multiplicity.OneToMany,
                               //Set source label to connector
                               Source = new SourceMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "89",
                                   UpperBounds = "67"
                               },
                               //Set target label to a connector
                               Target = new TargetMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "78",
                                   UpperBounds = "90"
                               }
                           }
                       },
                       //Define connector start and endpoints
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Multiplicity.OneToOne">
            <summary>
            Indicates the connector multiplicity is OneToOne.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Multiplicity.OneToMany">
            <summary>
            Indicates the connector multiplicity is OneToMany.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Multiplicity.ManyToOne">
            <summary>
            Indicates the connector multiplicity is ManyToOne.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TooltipMode">
            <summary>
            Allows the user to define how to show the tooltip.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection" Tooltip="@Tooltip">
               </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines mode of the tooltip
               public DiagramTooltip Tooltip = new DiagramTooltip()
               {
                   Content = "Nodes",
                   OpenOn = TooltipMode.Auto
               };
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   ///Defines nodes
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Constraints = NodeConstraints.Tooltip,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipMode.Auto">
            <summary>
            Displays the tooltip when the object is dragged, scaled or rotated.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipMode.Custom">
            <summary>
            Displays the tooltip based on the object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TooltipRelativeMode">
            <summary>
            The RelativeMode property of the tooltip defines whether the tooltip should be displayed around the object or at the mouse position.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the relative mode is set to Mouse.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example that sets RelativeMode to the tooltip,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Constraints = NodeConstraints.Default | NodeConstraints.Tooltip,
                       Tooltip = new NodeTooltip()
                       {
                           Content = "Node1",
                           //Sets to show tooltip around the element
                           RelativeMode = TooltipRelativeMode.Object
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipRelativeMode.Object">
            <summary>
            Displays the tooltip around the object when pointed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TooltipRelativeMode.Mouse">
            <summary>
            Displays the tooltip at the mouse position when pointed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Direction">
            <summary>
            Specifies the orthogonal connector's connection segment direction.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using direction, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/connectors/segments/">1. Connectors</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the connector segment direction, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Arrow,
                           Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       //Specify the connector type as orthogonal.
                       Type = Segments.Orthogonal,
                       //Initialize the segments collection
                       Segments = new ObservableCollection<DiagramConnectorSegment>()
                       {
                           //Create a new segment with length and direction
                           new DiagramConnectorSegment()
                           {
                               Length = 100,
                               Type = Segments.Orthogonal,
                               Direction = Direction.Right,
                           },
                           //Create another new segment with length and direction
                           new DiagramConnectorSegment()
                           {
                               Length = 100,
                               Type = Segments.Orthogonal,
                               Direction = Direction.Top,
                           }
                       },
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Left">
            <summary>
            Sets the direction of the connector segment direction to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Right">
            <summary>
            Sets the direction of the connector segment direction to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Top">
            <summary>
            Sets the direction of the connector segment direction to Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Direction.Bottom">
            <summary>
            Sets the direction of the connector segment direction to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BranchTypes">
            <summary>
            Allows the user to set the alignment position.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 250,
                       OffsetY = 250,
                       Width = 100,
                       Height = 100,
                       Branch = BranchTypes.Root
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.Left">
            <summary>
            Sets the branch type to left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.Right">
            <summary>
            Sets the branch type to right
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.SubLeft">
            <summary>
            Sets the branch type to SubLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.SubRight">
            <summary>
            Sets the branch type to SubRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BranchTypes.Root">
            <summary>
            Sets the branch type to root.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeConstraints">
            <summary>
            The node constraints allow the users to enable or disable certain behaviors and features of the diagram nodes.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The node constraints are enabled or disabled using the bitwise operators. The ’~’ operator is used to disable the node constraints.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set node constraints.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                       //sets the NodeConstraints constraints...
                       Constraints = NodeConstraints.Default & ~NodeConstraints.Rotate
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.AllowDrop">
            <summary>
            AllowDrop allows dropping a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.AllowMovingOutsideLane">
            <summary>
            Enables or disables child in parent for the swimLane node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.AspectRatio">
            <summary>
            Enables the Aspect ratio of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Default">
            <summary>
            Enables all the constraints for a node
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Delete">
            <summary>
            Enables or disables node deletion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Drag">
            <summary>
            Enables or disables the dragging functionality of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Expandable">
            <summary>
            Enables or disables the node expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.HideThumbs">
            <summary>
            Enables to hide all resize thumbs for the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.InConnect">
            <summary>
            Enables node to allow only in coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Individual">
            <summary>
            Enables node to provide individual resize option.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Inherit">
            <summary>
            It allows the node to inherit the interaction option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.InheritTooltip">
            <summary>
            Enables or disables the inherit tooltip option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.None">
            <summary>
            Disable all node Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.OutConnect">
            <summary>
            Enables node to allow only out coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.PointerEvents">
            <summary>
            Enables or disables the mouse pointer’s events when clicking with a mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ReadOnly">
            <summary>
            Enables the ReadOnly mode(Write operations cannot be done) for the annotation in the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Resize">
            <summary>
            Enables or Disables the expansion or compression of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeEast">
            <summary>
            It enables or disables the resizing of the node in the East direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeNorth">
            <summary>
            It enables or disables the resizing of the node in the North direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeNorthEast">
            <summary>
            It enables or disables the resizing of the node in the NorthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeNorthWest">
            <summary>
            It enables or disables the resizing of the node in the NorthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeSouth">
            <summary>
            It enables or disables the resizing of the node in the South direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeSouthEast">
            <summary>
            It enables or disables the resizing of the node in the SouthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeSouthWest">
            <summary>
            It enables or disables the resizing of the node in the SouthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.ResizeWest">
            <summary>
            It enables or disables the resizing of the node in the West direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Rotate">
            <summary>
            Enables or disables node rotation. It is done with the help of a curvy arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Select">
            <summary>
            Enables or disables the selection of a node in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Shadow">
            <summary>
            Enables or disables to display the node’s shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NodeConstraints.Tooltip">
            <summary>
            Enables or disables the tooltip for the Nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortConstraints">
            <summary>
            The behavior and features of the ports can be enabled or disabled using the PortConstraints.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The port constraints can be enabled or disabled using Bitwise operators. The ‘~’ operator can be used to disable the port constraints.</td>
            </tr>
            <tr>
            <td style = "border:none">The below code is an example to set port constraints to disable all functionalities.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Ports = new ObservableCollection<DiagramPort>()
                   {
                       new DiagramPort()
                       {
                           Offset=new NodePortOffset () {X=0, Y=0.5}, Shape=PortShapes.Circle,
                           Visibility=PortVisibility.Visible,
                           //sets the PortConstraints...
                           Constraints=PortConstraints.None
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.Default">
            <summary>
            Enables all constraints for a port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.Drag">
            <summary>
            Enables or disables port dragging.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.Draw">
            <summary>
            Enables to create the connection when mouse hover on the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.InConnect">
            <summary>
            Enables or disables to connect only the target end of connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.None">
            <summary>
            Disables all the Port functionalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortConstraints.OutConnect">
            <summary>
            Enables or disables to connect only the source end of connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortShapes">
            <summary>
            Specifies the shape of the ports.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using port shapes, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/ports/ports/">1. Ports</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-ports">2.   Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply X port shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Ports = new ObservableCollection<DiagramPort>()
                   {
                       new DiagramPort()
                       {
                           Id="port1",
                           Offset=new NodePortOffset(){X=0,Y=0.5},
                           Shape=PortShapes.X,
                           Visibility=PortVisibility.Visible,
                           //sets the PortConstraints...
                           Constraints=PortConstraints.None
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.X">
            <summary>
            Sets the port shape as X.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.Circle">
            <summary>
            Sets the port shape as Circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.Square">
            <summary>
            Sets the port shape as Square.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortShapes.Custom">
            <summary>
            Sets the port shape as Custom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortVisibility">
            <summary>
            Constraints to control the visibility property of the port.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using port visibility, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/ports/ports/">1. Ports</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-ports">2. DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply port visibility, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   Node.Ports = new ObservableCollection<DiagramPort>()
                   {
                       new DiagramPort()
                       {
                           Id="port1",
                           Offset=new NodePortOffset(){X=0,Y=0.5},
                           Shape=PortShapes.X,
                           Visibility=PortVisibility.Visible,
                           //sets the PortConstraints...
                           Constraints=PortConstraints.None
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Connect">
            <summary>
            Shows the port when a connector endpoint is dragged over a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Hidden">
            <summary>
            Always hides the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Hover">
            <summary>
            Shows the port when the mouse hovers over a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PortVisibility.Visible">
            <summary>
            Always shows the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IconShapes">
            <summary>
            Specifies the icon to be shown in the node’s expand or collapsed state.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using icon shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="decoratorshapes.docxhttps://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">1.  HierarchicalLayout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">2. Organizational Chart</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/nodes/appearance/">3.    Nodes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply icon shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" NodeDefaults="@NodeDefault" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
                 public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>() { };
               DiagramNode NodeDefault = new DiagramNode()
               {
                   Width = 140,
                   Height = 50,
                   Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
               };
               protected override void OnInitialized()
               {
                   DiagramNode Node1 = new DiagramNode()
                   {
                       Id = "Start",
                       OffsetX = 300,
                       OffsetY = 50,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
               {
                           new DiagramNodeAnnotation(){ Content = "Node1" }
                       },
                       ExpandIcon = new NodeExpandIcon() { Shape = IconShapes.ArrowDown, Width = 10, Height = 10 },
                       CollapseIcon = new NodeCollapseIcon() { Shape = IconShapes.ArrowUp, Width = 10, Height = 10 }
                   };
                   NodeCollection.Add(Node1);
                   DiagramNode Node2 = new DiagramNode()
                   {
                       Id = "Init",
                       OffsetX = 300,
                       OffsetY = 140,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                           new DiagramNodeAnnotation(){ Content = "Node2" }
                       },
                   };
                   NodeCollection.Add(Node2);
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       // Unique name for the connector
                       Id = "connector1",
                       // Source and Target node's name to which connector needs to be connected.
                       SourceID = "Start",
                       TargetID = "Init",
                       Type = Segments.Orthogonal
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.None">
            <summary>
            sets the icon shape as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Minus">
            <summary>
            sets the icon shape as a minus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Plus">
            <summary>
            sets the icon shape as Plus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.ArrowUp">
            <summary>
            sets the icon shape as ArrowUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.ArrowDown">
            <summary>
            sets the icon shape as Arrow down.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Template">
            <summary>
            sets the icon shape based on the given custom template.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.IconShapes.Path">
            <summary>
            sets the icon shape based on the given custom Path.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Orientation">
            <summary>
            Specifies the orientation of the layouts.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Orientation, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/data-binding/">1.    DataBinding</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/overview/">2.    Overview</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/automatic-layout/">3. Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply hierarchical layout orientation, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram ID="diagram" Height="600px" Layout="@LayoutValue" ConnectorDefaults="@ConnectorDefault" NodeDefaults="@NodeDefaults" SelectedItems="@selectedItems">
               <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource">
                   <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Shape.TextContent" Field="Name"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.StrokeColor" Field="FillColor"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.Fill" Field="FillColor"></DiagramDataMapSetting>
                   </DiagramDataMapSettings>
               </DiagramDataSource>
               <DiagramPageSettings>
                   <DiagramFitOptions CanFit = "true" Mode="FitModes.Width"></DiagramFitOptions>
               </DiagramPageSettings>
            </SfDiagram>
            @code{
               DiagramSelectedItems selectedItems = new DiagramSelectedItems()
               {
                   Constraints = SelectorConstraints.All & ~SelectorConstraints.ResizeAll & ~SelectorConstraints.Rotate
               };
               TreeInfo LayoutInfo = new TreeInfo()
               {
                   CanEnableSubTree = true,
                   Orientation = SubTreeOrientation.Horizontal
               };
               DiagramLayout LayoutValue = new DiagramLayout() { };
               DiagramConnector ConnectorDefault = new DiagramConnector()
               {
                   TargetDecorator = new ConnectorTargetDecorator() { Shape = DecoratorShapes.None },
                   Type = Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" },
                   Constraints = 0,
                   CornerRadius = 5
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none", Color = "white", StrokeWidth = 2, },
                   BackgroundColor = "#659be5",
                   Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Text, Margin = new BasicShapeMargin() { Left = 10, Right = 10, Bottom = 10, Top = 10 } },
                   ExpandIcon = new NodeExpandIcon()
                   {
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Minus,
                       Fill = "lightgray",
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Margin = new ExpandIconMargin() { Bottom = 0, Left = 0, Right = 0, Top = 0 }
                   },
                   CollapseIcon = new NodeCollapseIcon()
                   {
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Plus,
                       Fill = "lightgray",
                       Padding = new IconPadding() { Top = 5 }
                   }
               };
               public class HierarchicalDetails
               {
                   public string Name { get; set; }
                   public string FillColor { get; set; }
                   public string Category { get; set; }
               }
               public List<object> DataSource = new List<object>()
               {
                   new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Tree layout", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Organizational chart", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Hierarchical tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Radial tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Mind map", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Family tree", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Management", Category="Organizational chart",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Human resources", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="University", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Business", Category="#Management",FillColor="#659be5"}
               };
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       Type = LayoutType.HierarchicalTree,
                       VerticalSpacing = 30,
                       HorizontalSpacing = 30,
                       EnableAnimation = true,
                       LayoutInfo = this.LayoutInfo
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Orientation.Horizontal">
            <summary>
            Sets the layout orientation as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Orientation.Vertical">
            <summary>
            Sets the layout orientation as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SubTreeAlignments">
            <summary>
            Specifies the subtree alignments in an organizational chart.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the Subtree Alignments, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">1. Organizational chart</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the Subtree Alignments, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
               <DiagramDataSource Id = "Id" ParentId="Team" DataSource="@DataSource" ></DiagramDataSource>
            </SfDiagram>
            @code {
               //Initializing layout
               DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       //Sets layout type as OrganizationalChart...
                       Type = LayoutType.OrganizationalChart,
                       VerticalSpacing = 50,
                       HorizontalSpacing = 40,
                       //Initialize the layout info for the org chart layout
                       LayoutInfo = new TreeInfo
                       {
                           Orientation = SubTreeOrientation.Vertical,
                           CanEnableSubTree = true,
                       }
                   };
               }
               //Initializing node defaults
               DiagramNode NodeDefaults = new DiagramNode()
               {
                   Width = 150,
                   Height = 50,
                   Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                   Style = new NodeShapeStyle { Fill = "#6BA5D7", StrokeColor = "black", },
                   LayoutInfo = new DiagramNodeLayoutInfo()
                   {
                       Orientation = Orientation.Vertical,
                       Type = SubTreeAlignments.Right
                   }
               };
               //Initializing connector defaults
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 1 },
                   TargetDecorator = new ConnectorTargetDecorator()
                   {
                       Shape = DecoratorShapes.None,
                       Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                   }
               };
               public class OrgChartDataModel
               {
                   public string Id { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                   new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Left">
            <summary>
            Aligns the child nodes at the left of the parent in a horizontal/vertical subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Right">
            <summary>
            Aligns the child nodes at the right of the parent in a horizontal/vertical subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Center">
            <summary>
            Aligns the child nodes at the center of the parent in a horizontal subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Alternate">
            <summary>
            Aligns the child nodes at both left and right sides of the parent in a vertical subtree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeAlignments.Balanced">
            <summary>
             Aligns the child nodes in multiple rows to balance the width and height of the horizontal subtree.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ImageAlignment">
            <summary>
            Specifies the alignment for the image based on the given viewport.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.None">
            <summary>
            Sets the none alignments for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMinYMin">
            <summary>
            Sets the smallest X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMidYMin">
            <summary>
            Sets the midpoint X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMaxYMin">
            <summary>
            Sets the maximum X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMinYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMidYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMaxYMid">
            <summary>
            Sets the maximum X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMinYMax">
            <summary>
            Sets the smallest X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMidYMax">
            <summary>
            Sets the midpoint X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ImageAlignment.XMaxYMax">
            <summary>
            Sets the maximum X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BasicShapes">
            <summary>
            Specifies the common shapes that are used to represent information visually.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">To know more about using basic shapes, refer to these links</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://blazor.syncfusion.com/documentation/diagram/symbol-palette/?no-cache=1">1.  SymbolPalette</a></td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://blazor.syncfusion.com/documentation/diagram/group/#create-group">2. Group</a></td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/#basic-shapes">3. Shapes</a></td>
            </tr>
            <tr>
            <td style = "border: none">To apply basic shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette ID="palettes" Height="600px" SymbolHeight=60 SymbolWidth=60 Palettes="@Palettes">
            </SfSymbolPalette>
            @code{
               public ObservableCollection<SymbolPalettePalette> Palettes;
               /// Defines palette's basic-shape collection
               public ObservableCollection<Object> BasicShapes { get; set; }
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   BasicShapes = new ObservableCollection<Object>()
                   {
                        new DiagramNode()
                        {
                            Id = "Rectangle",
                            Shape = new DiagramShape() {
                            Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle
                            }
                        },
                        new DiagramNode()
                        {
                            Id="Ellipse",
                            Shape = new DiagramShape() {
                            Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse
                            }
                        },
                        new DiagramNode()
                        {
                            Id="Hexagon",
                            Shape = new DiagramShape() {
                            Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Hexagon
                            }
                        }
                    };
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle">
            <summary>
            Sets the type of the basic shape as Rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse">
            <summary>
            Sets the type of the basic shape as Ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Hexagon">
            <summary>
            Sets the type of the basic shape as Hexagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Parallelogram">
            <summary>
            Sets the type of the basic shape as Parallelogram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Triangle">
            <summary>
            Sets the type of the basic shape as Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Plus">
            <summary>
            Sets the type of the basic shape as Plus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Star">
            <summary>
            Sets the type of the basic shape as Star.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Pentagon">
            <summary>
            Sets the type of the basic shape as Pentagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Heptagon">
            <summary>
            Sets the type of the basic shape as Heptagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Octagon">
            <summary>
            Sets the type of the basic shape as Octagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Trapezoid">
            <summary>
            Sets the type of the basic shape as Trapezoid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Decagon">
            <summary>
            Sets the type of the basic shape as Decagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.RightTriangle">
            <summary>
            Sets the type of the basic shape as the Right Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Cylinder">
            <summary>
            Sets the type of the basic shape as Cylinder.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Diamond">
            <summary>
            Sets the type of the basic shape as Diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BasicShapes.Polygon">
            <summary>
            Sets the type of the basic shape as Polygon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnShapes">
            <summary>
            The graphical representation of the internal business procedure and communicating the procedures in a standard manner is done using BpmnShapes. The BPMN stands for Business Process Model and Notation.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">All the BPMN shapes represent the business process.</td>
            </tr>
            <tr>
            <td style = "border:none">The following links can be used in understanding BpmnShapes,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnActivities.html">1.    BpmnActivities</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnDataObjects.html">2.   BpmnDataObjects</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnEvents.html">3.    BpmnEvents</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnGateways.html">4.  BpmnGateways</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnMessageFlows.html">5.  BpmnMessageFlows</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection"> </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.DataSource
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Event">
            <summary>
            Sets the Bpmn shape type to Event and it is represented with a circle-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Gateway">
            <summary>
            Sets the Bpmn shape type to Gateway and it is represented with a diamond-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Message">
            <summary>
            Sets the Bpmn shape type to Message.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.DataObject">
            <summary>
            Sets the Bpmn shape type to DataObject.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.DataSource">
            <summary>
            Sets the Bpmn shape type to DataSource.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Activity">
            <summary>
            Sets the Bpmn shape type to Activity and it is represented with a curved corner square-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.Group">
            <summary>
            Sets the Bpmn shape type to Group.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnShapes.TextAnnotation">
            <summary>
            Sets the Bpmn shape type to TextAnnotation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FlowShapes">
            <summary>
            Specifies the type of process flow used for analyzing designing and managing for documentation process.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none"></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/symbol-palette/?no-cache=1">1.   SymbolPalette</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/">2.  Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply flow shape, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection"/>
            @code{
               //Initialize node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                    //Creates a flow shape node
                    new DiagramNode()
                    {
                        Id="node1",
                        //Size of the node
                        Height=100,
                        Width=100,
                        //Position of the node
                        OffsetX=100,
                        OffsetY=100,
                        //Sets the type of the shape as flow
                        Shape=new DiagramShape()
                        {
                            Type=Shapes.Flow,
                            FlowShape=FlowShapes.DirectData
                        }
                    }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Terminator">
            <summary>
            Sets the flow shape type as Terminator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Process">
            <summary>
            Sets the flow shape type as Process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Decision">
            <summary>
            Sets the flow shape type as Decision.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Document">
            <summary>
            Sets the flow shape type as Document.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.PreDefinedProcess">
            <summary>
            Sets the flow shape type as PreDefinedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.PaperTap">
            <summary>
            Sets the flow shape type as PaperTap.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.DirectData">
            <summary>
            Sets the flow shape type as DirectData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.SequentialData">
            <summary>
            Sets the flow shape type as SequentialData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Sort">
            <summary>
            Sets the flow shape type as Sort.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.MultiDocument">
            <summary>
            Sets the flow shape type as MultiDocument.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Collate">
            <summary>
            Sets the flow shape type as Collate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.SummingJunction">
            <summary>
            Sets the flow shape type as SummingJunction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Or">
            <summary>
            Sets the flow shape type as Or.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.InternalStorage">
            <summary>
            Sets the flow shape type as internal storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Extract">
            <summary>
            Sets the flow shape type as Extract.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.ManualOperation">
            <summary>
            Sets the flow shape type as ManualOperation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Merge">
            <summary>
            Sets the flow shape type as Merge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.OffPageReference">
            <summary>
            Sets the flow shape type as OffPageReference.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.SequentialAccessStorage">
            <summary>
            Sets the flow shape type as SequentialAccessStorage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Annotation">
            <summary>
            Sets the flow shape type as Annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Annotation2">
            <summary>
            Sets the flow shape type as Annotation2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Data">
            <summary>
            Sets the flow shape type as Data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Card">
            <summary>
            Sets the flow shape type as Card.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Delay">
            <summary>
            Sets the flow shape type as Delay.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Preparation">
            <summary>
            Sets the flow shape type as Preparation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.Display">
            <summary>
            Sets the flow shape type as Display.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.ManualInput">
            <summary>
            Sets the flow shape type as ManualInput.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.LoopLimit">
            <summary>
            Sets the flow shape type as LoopLimit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FlowShapes.StoredData">
            <summary>
            Sets the flow shape type as stored data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Stretch">
            <summary>
            Allows the user to define how to stretch the image.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set Stretch to a node.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code{
                SfDiagram Diagram;
               private void OnExport()
               {
                   IExportOptions options = new IExportOptions()
                   {
                       Mode = ExportModes.Data,
                       FileName = "region",
                       Stretch = Stretch.Stretch,
                       Region = DiagramRegions.Content,
                       Format = FileFormats.SVG
                   };
                   Diagram.ExportDiagram(options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.None">
            <summary>
            Does not preserve aspect ratio. Scales image to fit view box fully into viewport. Proportions will be distorted
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.Stretch">
            <summary>
            Stretch the entire image to the page in both horizontally and vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.Meet">
            <summary>
            Preserves aspect ratio and scales view box to fit within page size.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Stretch.Slice">
            <summary>
            Preserves aspect ratio and slices off any part of the image that does not fit inside page size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Shapes">
            <summary>
            Specifies the type of a node.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the Shapes, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/bpmn-shapes/bpmn-shapes/">1. Bpmn</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/">2. DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/">3. Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply text shape to a node, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                //Initialize node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                   //Creates a text node
                    new DiagramNode()
                    {
                        Id="node1",
                        // Size of the node
                        Height=100,
                        Width=100,
                        // Position of the node
                        OffsetX=100,
                        OffsetY=100,
                        //Sets type of the shape as text
                        Shape=new DiagramShape(){Type=Shapes.Text,Content="Text Node"}
                    }
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Basic">
            <summary>
            Sets the node as Basic.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Path">
            <summary>
            Sets the node as Path.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Text">
            <summary>
            Sets the node as Text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Image">
            <summary>
            Sets the node as Image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Flow">
            <summary>
            Sets the node as Flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Bpmn">
            <summary>
            Sets the node as Bpmn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.Native">
            <summary>
            Sets the node as Native.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.HTML">
            <summary>
            Sets the node as HTML.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.UmlActivity">
            <summary>
            Sets the node as a UmlActivity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier">
            <summary>
            Sets the node as a UmlClassifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Shapes.SwimLane">
            <summary>
            Sets the node as SwimLane.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UmlActivityShapes">
            <summary>
            The UML activity diagram is a flowchart that represents the flow from one activity to another. It describes the activity flow of a system, and the parallel flow of a system.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set UMLActivity shape.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Defines diagram's connector collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               public DiagramConstraints diagramConstraints = DiagramConstraints.Default;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.UmlActivity,
                           //Define UmlActivity shape
                           UmlActivityShape = UmlActivityShapes.Action
                       }
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.Action">
            <summary>
            Sets the type of UMLActivity to Action and it has a rounded corner square shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.Decision">
            <summary>
            Sets the type of UMLActivity to Decision and it has a diamond-like shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.MergeNode">
            <summary>
            Sets the type of UMLActivity to MergeNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.InitialNode">
            <summary>
            Sets the type of UMLActivity to InitialNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.FinalNode">
            <summary>
            Sets the type of UMLActivity to FinalNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.ForkNode">
            <summary>
            Sets the type of UMLActivity to ForkNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.JoinNode">
            <summary>
            Sets the type of UMLActivity to JoinNode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.TimeEvent">
            <summary>
            Sets the type of UMLActivity to TimeEvent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.AcceptingEvent">
            <summary>
            Sets the type of UMLActivity to AcceptingEvent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.SendSignal">
            <summary>
            Sets the type of UMLActivity to SendSignal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.ReceiveSignal">
            <summary>
            Sets the type of UMLActivity to RecieveSignal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.StructuredNode">
            <summary>
            Sets the type of UMLActivity to StructuredNode and has a square shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlActivityShapes.Note">
            <summary>
            Sets the type of UMLActivity to Note.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UmlScope">
            <summary>
            Defines the scope of the UML shape.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following code snippet is an example to set the UMLScope to Private,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Id = "Patient",
                       OffsetX = 200,
                       OffsetY = 200,
                       Shape = new DiagramShape()
                       {
                           Type = Syncfusion.Blazor.Diagrams.Shapes.UmlClassifier,
                           Classifier = ClassifierShape.Class,
                           //Define class object
                           ClassShape = new DiagramUmlClass()
                           {
                               Name = "Patient",
                               Attributes = new ObservableCollection<DiagramUmlClassAttribute>()
                               {
                                   new DiagramUmlClassAttribute() { Name = "accepted", Type = "Date" }
                               },
                               //Define class methods
                               Methods = new ObservableCollection<DiagramUmlClassMethod>()
                               {
                                   new DiagramUmlClassMethod()
                                   {
                                       Name = "getHistory", Type = "getHistory",Scope=UmlScope.Private
                                   }
                               }
                           }
                       }
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Public">
            <summary>
            Sets the scope of the attribute to Public
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Protected">
            <summary>
            Sets the scope of the attribute to Protected
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Private">
            <summary>
            Sets the scope of the attribute to Private
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.UmlScope.Package">
            <summary>
            Sets the visibility of the attribute to Package
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.GradientType">
            <summary>
            Specifies the type of transition between two or more colors.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Gradient type, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/nodes/appearance/">1.    NodesAppearance</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramGradient_members.html">2. DiagramGradient</a></td>
            </tr>
            <tr>
            <td style = "border:none"></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   // A node is created and stored in nodes array.
                   DiagramNode node1 = new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 250,
                       OffsetY = 250,
                       // Size of the node
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle()
                       {
                           Gradient = new DiagramGradient()
                           {
                               //Start point of linear gradient
                               X1 = 0,
                               Y1 = 0,
                               //End point of linear gradient
                               X2 = 50,
                               Y2 = 50,
                               //Sets an array of stop objects
                               Stops = new ObservableCollection<DiagramsGradientStop>()
                               {
                                   new DiagramsGradientStop(){ Color = "white", Offset = 0},
                                   new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                               },
                               Type = GradientType.Linear
                           }
                       },
                   };
                   NodeCollection.Add(node1);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GradientType.None">
            <summary>
            No gradient will be applied by default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GradientType.Linear">
            <summary>
            Sets the type of gradient as Linear.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GradientType.Radial">
            <summary>
            Sets the type of gradient as Radial.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnEvents">
            <summary>
            A common BPMN process model element that represents some happening during a business process is an Event.
            </summary>
            <remarks>
            The below code snippet is an example to set the BpmnEvents,.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "@SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {`
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           ///Sets type to Bpmn and shape to Event
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                           /// Set the event type to NonInterruptingIntermediate
                           Event = new DiagramBpmnEvent() { Event = BpmnEvents.NonInterruptingIntermediate }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.Start">
            <summary>
            Indicates the beginning of the process and every business process starts with an event.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.Intermediate">
            <summary>
            Indicates the ongoing stage (Middle – after starting and before ending) of the process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.End">
            <summary>
            Indicates the beginning of the process and every business process ends with an event.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.NonInterruptingStart">
            <summary>
            Sets the type of the BPMN Event as NonInterruptingStart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.NonInterruptingIntermediate">
            <summary>
            Sets the type of the BPMN Event as NonInterruptingIntermediate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnEvents.ThrowingIntermediate">
            <summary>
            Sets the type of the BPMN Event as ThrowingIntermediate.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnTriggers">
            <summary>
            The Trigger property of the node allows the user to set the type of BPMN trigger. Triggers are notated as icons inside the circle.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The Trigger members can be set to any one of the BPMN events.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code snippet is an example to set Trigger to NonInterruptingIntermediate Bpmn event.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100, Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Event,
                           // Set the event type to NonInterruptingIntermediate and set the trigger as message
                           Event = new DiagramBpmnEvent() { Event = BpmnEvents.NonInterruptingIntermediate }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.None">
            <summary>
            Sets the type of the trigger as None. None is the default value for the trigger.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Message">
            <summary>
            Sets the type of the trigger as Message.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Timer">
            <summary>
            Sets the type of the trigger as Timer.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Escalation">
            <summary>
            Sets the type of the trigger as Escalation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Link">
            <summary>
            Sets the type of the trigger as Link.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Error">
            <summary>
            Sets the type of the trigger as Error.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Compensation">
            <summary>
            Sets the type of the trigger as Compensation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Signal">
            <summary>
            Sets the type of the trigger as Signal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Multiple">
            <summary>
            Sets the type of the trigger as Multiple.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Parallel">
            <summary>
            Sets the type of the trigger as Parallel.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Cancel">
            <summary>
            Sets the type of the trigger as Cancel.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Conditional">
            <summary>
            Sets the type of the trigger as Conditional.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTriggers.Terminate">
            <summary>
            Sets the type of the trigger as Termination.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnGateways">
            <summary>
            The Gateway controls the flow of a process and it is represented by a diamond shape. This enumeration defines the type of gateway to be set in the BPMN shape.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">The BPMN Gateway can be set to Complex, EventBased, etc., All the gateway shapes are covered by a diamond-like shape in the outer.</td>
            </tr>
            <tr>
            <td style = "border: none">The below code snippet is an example to set BPMN Gateways,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Gateway,
                           ///Sets type of the gateway to None
                           Gateway = new DiagramBpmnGateway(){Type = BpmnGateways.Parallel}
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.None">
            <summary>
            Sets the gateway type to None and it is represented by a diamond(gateway) shape with no symbols in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Exclusive">
            <summary>
            Sets the gateway type to Exclusive and it is represented by a cross symbol inside the gateway shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Inclusive">
            <summary>
            Sets the gateway type to Inclusive and it is represented by a circle inside the gateway shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Parallel">
            <summary>
            Sets the gateway type to Parallel. It is represented by an addition sign inside the gateway shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.Complex">
            <summary>
            Sets the gateway type to Complex and it is represented by an asterisk symbol inside the gateway.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.EventBased">
            <summary>
            Sets the gateway type to Event.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.ExclusiveEventBased">
            <summary>
            Sets the gateway type to ExclusiveEventBased.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnGateways.ParallelEventBased">
            <summary>
            Sets the gateway type to ParallelEventBased.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnDataObjects">
            <summary>
            A data object represents the information flowing throughout the BPMN process. This enumeration defines the type of Data object to be set in the BPMN shape.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">The BPMN Data object can be set to Input, Output or None.</td>
            </tr>
            <tr>
            <td style = "border: none">The below code is an example to set BPMN Data objects</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code>
            <![CDATA[
            <SfDiagram ID="Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       //Sets type to Bpmn and shape to DataObject
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape=BpmnShapes.DataObject,
                           //Sets collection to true when Dataobject is not a Single instance
                           DataObject=new DiagramBpmnDataObject()
                           {
                               Collection=true,
                               Type=BpmnDataObjects.Input
                           }
                       }
                   },
                };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnDataObjects.None">
            <summary>
            The BPMN Data object type is set to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnDataObjects.Input">
            <summary>
            The BPMN Data object type is set to Input.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnDataObjects.Output">
            <summary>
            The BPMN Data object type is set to Output.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnActivities">
            <summary>
            The BPMN activity is a task performed in a business process and it is represented by a rounded rectangle.
            </summary>
            <remarks>
            <table style="border:none">
            <tr>
            <td style = "border: none">To know more about BpmnActivities, refer the following links:</td>
            </tr>
            <tr>
            <td style = "border: none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramBpmnActivity.html">DiagramBpmnActivity</a></td>
            </tr>
            <tr>
            <td style = "border: none">The following code snippet demonstrates how to set BPMNActivity to Task.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           ///Sets the activity type to task
                           Activity = new DiagramBpmnActivity(){ Activity = BpmnActivities.Task },
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnActivities.Task">
            <summary>
            Sets the BPMN activity as Task.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnActivities.None">
            <summary>
            Renders a BPMN activity shape of type None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnActivities.SubProcess">
            <summary>
            Defines the BPMN activity to Subprocess.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnLoops">
            <summary>
            The loop property of a task allows the user to define the type of loop. Loop is a task looped internally. Loops can be set to both tasks and subprocesses.
            </summary>
            <remarks>
            By default, Loops are set to None.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.Task,
                               ///Sets collapsed to true and loop to standard
                               Task=new DiagramBpmnTask()
                               {
                                   Loop = BpmnLoops.SequenceMultiInstance,
                               }, }
                       }
                    }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.None">
            <summary>
            Sets the loop for task or subprocess as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.Standard">
            <summary>
            Sets the loop for task or subprocess as Standard.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.ParallelMultiInstance">
            <summary>
            Sets the loop for task or subprocess as ParallelMultiInstance.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnLoops.SequenceMultiInstance">
            <summary>
            Sets the loop for task or subprocess as SequenceMultiInstance.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnTasks">
            <summary>
            The Task property allows the users to define the type of task such as sending, receiving, etc.,.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following links can be used in understanding Tasks,</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnActivities.html">1.    BpmnActivities</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, Off   setY = 100, Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.Task,
                               //Sets the type of the task to BusinessRule
                               Task = new DiagramBpmnTask(){ Type = BpmnTasks.BusinessRule }
                           }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.None">
            <summary>
            Sets the Bpmn task type to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Service">
            <summary>
            Sets the Bpmn task type to Service.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Receive">
            <summary>
            Sets the Bpmn task type to Recieve.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Send">
            <summary>
            Sets the Bpmn task type to Send.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.InstantiatingReceive">
            <summary>
            Sets the Bpmn task type to InstantiatingReceive.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Manual">
            <summary>
            Sets the Bpmn task type to Manual.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.BusinessRule">
            <summary>
            Sets the Bpmn task type to BusinessRule.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.User">
            <summary>
            Sets the Bpmn task type to User.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnTasks.Script">
            <summary>
            Sets the Bpmn task type to Script.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnBoundary">
            <summary>
            The boundary represents the type of task that is being processed. The boundary property of subprocess allows you to define the type of boundary.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, BpmnBoundary is set to Default.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
            ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
            {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100, Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               ///Sets collapsed to true and boundary to Call
                               SubProcess = new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true,
                                   Boundary = BpmnBoundary.Call
                               },
                           }
                       }
                   },
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnBoundary.Default">
            <summary>
            Sets the boundary to Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnBoundary.Call">
            <summary>
            Sets the boundary to Call and it is represented with a bolder layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnBoundary.Event">
            <summary>
            Sets the boundary to Event and it is represented with a dotted layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes">
            <summary>
            A group of tasks that are used to hide or reveal details of additional levels using the Collapsed property are known as Subprocess.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The following links might be helpful in understanding Subprocess</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://help.syncfusion.com/cr/cref_files/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.BpmnEvents.html">1. BpmnEvents</a></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       OffsetX = 100, OffsetY = 100,Width = 100, Height = 100,
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                           ///Sets activity to SubProcess
                           Activity=new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               ///Sets the collapsed to true and type to Event
                               SubProcess=new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true, Type = BpmnSubProcessTypes.Transaction,
                               }
                            }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes.None">
            <summary>
            Sets the Subprocess to None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes.Transaction">
            <summary>
            A Transaction is a set of activities that logically belong together to be completed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BpmnSubProcessTypes.Event">
            <summary>
            A Subprocess is an event’s subprocess triggered by an event. The Type property of the subprocess allows users to define the type of subprocess.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ScrollLimit">
            <summary>
            Defines the scrollable region of the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the scroll limit, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/scroll-settings/#scroll-limit">1.    ScrollSettings</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the infinity scroll limit, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
               @* Sets the ScrollLimit of scroll settings*@
               <DiagramScrollSettings HorizontalOffset = "100" VerticalOffset="50" ScrollLimit="ScrollLimit.Infinity">
               </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ScrollLimit.Diagram">
            <summary>
            Enables scrolling to view the diagram content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ScrollLimit.Infinity">
            <summary>
            Diagram will be extended, when we try to scroll the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ScrollLimit.Limited">
            <summary>
            Enables scrolling to view the specified area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SnapConstraints">
            <summary>
            Specifies the constraints to enable/ disable snapping and to controls the visibility of gridlines.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the snap constraints, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/constraints/#snap-constraints">1.    Constraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/grid-lines/">2.  Gridlines</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply show horizontal lines snap constraints, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               @* Initialize the snapsettings with constraints *@
               <DiagramSnapSettings Constraints = "SnapConstraints.ShowHorizontalLines" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   //Initialize the NodeCollection.
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.All">
            <summary>
            Shows gridlines and enables snapping.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.None">
            <summary>
            Disable to snapping the nodes/connectors in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.ShowHorizontalLines">
            <summary>
            Displays only the horizontal gridlines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.ShowLines">
            <summary>
            Display both Horizontal and Vertical gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.ShowVerticalLines">
            <summary>
            Displays only the Vertical gridlines in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToHorizontalLines">
            <summary>
            Enables the object to snap only with horizontal gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToLines">
            <summary>
            Enables the object to snap with both horizontal and vertical gridlines.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToObject">
            <summary>
            Enables the object to snap with the other objects in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SnapConstraints.SnapToVerticalLines">
            <summary>
            Enables the object to snap only with Vertical gridlines.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.GridType">
            <summary>
            It allows the user to define the type of the grid as either lines or dots.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set GridType to Dots.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSnapSettings GridType = "GridType.Dots" >
                   < HorizontalGridlines LineColor="red" />
                   <VerticalGridlines LineColor = "red" />
               </ DiagramSnapSettings >
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GridType.Lines">
            <summary>
            Renders grid patterns as dots.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.GridType.Dots">
            <summary>
            Renders grid patterns as lines.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RulerOrientation">
            <summary>
            Specifies the orientation(direction) for both horizontal and vertical rulers.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
                   <DiagramRulerSettings ShowRulers = "true" >
                       < HorizontalRuler Orientation="RulerOrientation.Vertical"></HorizontalRuler>
                       <VerticalRuler Orientation = "RulerOrientation.Horizontal" ></ VerticalRuler >
                   </ DiagramRulerSettings >
               </ SfDiagram >
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RulerOrientation.Horizontal">
            <summary>
            Sets the orientation of both the rulers to horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RulerOrientation.Vertical">
            <summary>
            Sets the orientation of both the rulers to vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TickAlignment">
            <summary>
            Specifies the Tick Alignment for the ruler.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
                <DiagramRulerSettings ShowRulers = "true" >
                <HorizontalRuler TickAlignment="TickAlignment.RightOrBottom"></HorizontalRuler>
                </DiagramRulerSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TickAlignment.LeftOrTop">
            <summary>
            Sets the TickAlignment to LeftOrTop.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.TickAlignment.RightOrBottom">
            <summary>
            Sets the TickAlignment to RightOrBottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BoundaryConstraints">
            <summary>
            It allows the users to set the region to allow interaction with the diagram.
            </summary>
            <remarks>
            The boundary constraints are enabled or disabled using the Bitwise operators. The ‘~’ operator is used to disable the boundary constraints. The boundary constraints can be enabled in the <a href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor~Syncfusion.Blazor.Diagrams.DiagramPageSettings.html">DiagramPageSettings</a>.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               // Initialize the page settings with boundary constraints.
               <DiagramPageSettings Height = "500" BoundaryConstraints="BoundaryConstraints.Page"></DiagramPageSettings>
            </SfDiagram>
            @code{
               ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode node = new DiagramNode()
                   {
                       Height = 100,
                       Width = 100,
                       OffsetX = 100,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BoundaryConstraints.Infinity">
            <summary>
            Allow the interactions to take place at the infinite height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BoundaryConstraints.Diagram">
            <summary>
            Allow the interactions to take place around the diagram height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.BoundaryConstraints.Page">
            <summary>
            Allow the interactions to take place around the height and width mentioned on the page settings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PageOrientation">
            <summary>
            Specifies the orientation of the page.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Page Orientation, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/page-settings/">1.   PageSettings</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply page orientation, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
               @* Initialize the page settings with page orientation and break lines*@
               <DiagramPageSettings Height = "300" Width="500" Orientation="PageOrientation.Portrait" ShowPageBreaks="true">
               </DiagramPageSettings>
            </SfDiagram>
            @code
            {
               //Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode node = new DiagramNode()
                   {
                       Id = "group",
                       OffsetX = 200,
                       OffsetY = 200,
                       Width = 100,
                       Height = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                           new DiagramNodeAnnotation()
                           {
                               Content = "Node1",
                               Style = new AnnotationStyle()
                               {
                                   Color = "white",
                               }
                           }
                       },
                       Style = new NodeShapeStyle() { Fill = "cornflowerblue", StrokeColor = "white" }
                   };
                   NodeCollection.Add(node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PageOrientation.Landscape">
            <summary>
            Specifies the page Width is more than the page Height.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.PageOrientation.Portrait">
            <summary>
            Specifies the page Height is more than the page width.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Scale">
            <summary>
            It allows the user to stretch the image as desired.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the scale, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/shapes/#image-alignment">1.  Shapes</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the scale to meet, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection"/>
            @code{
               //Initialize node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                    //Creates an image node
                    new DiagramNode()
                    {
                        Id="node1",
                        //Size of the node
                        Height=100,
                        Width=100,
                        //Position of the node
                        OffsetX=100,
                        OffsetY=100,
                        //Sets type of the shape as image
                        Shape=new DiagramShape (){Type=Shapes.Image,Source="/diagram/images/syncfusion.png",Scale=Stretch.Meet, Align = ImageAlignment.XMinYMin}
                    }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Scale.None">
            <summary>
            There will be no scaling to the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Scale.Meet">
            <summary>
            It aligns the image to the center of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Scale.Slice">
            <summary>
            It zooms in to fill the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FitModes">
            <summary>
            Specifies how the diagram has to be fit into the viewport.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using fit modes, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">1.  Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply fit modes, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram ID="diagram" Height="600px" Layout="@LayoutValue" ConnectorDefaults="@ConnectorDefault" NodeDefaults="@NodeDefaults" SelectedItems="@SelectedItems">
               <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource">
                   <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Shape.TextContent" Field="Name"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.StrokeColor" Field="FillColor"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.Fill" Field="FillColor"></DiagramDataMapSetting>
                   </DiagramDataMapSettings>
               </DiagramDataSource>
               <DiagramPageSettings>
                   <DiagramFitOptions CanFit = "true" Mode="FitModes.Height"></DiagramFitOptions>
               </DiagramPageSettings>
            </SfDiagram>
            @code{
               DiagramSelectedItems SelectedItems = new DiagramSelectedItems()
               {
                   Constraints = SelectorConstraints.All & ~SelectorConstraints.ResizeAll & ~SelectorConstraints.Rotate
               };
               TreeInfo LayoutInfo = new TreeInfo()
               {
                   CanEnableSubTree = true,
                   Orientation = SubTreeOrientation.Horizontal
               };
               DiagramLayout LayoutValue = new DiagramLayout() { };
               DiagramConnector ConnectorDefault = new DiagramConnector()
               {
                   TargetDecorator = new ConnectorTargetDecorator() { Shape = DecoratorShapes.None },
                   Type = Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" },
                   Constraints = 0,
                   CornerRadius = 5
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none", Color = "white", StrokeWidth = 2, },
                   BackgroundColor = "#659be5",
                   Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Text, Margin = new BasicShapeMargin() { Left = 10, Right = 10, Bottom = 10, Top = 10 } },
                   ExpandIcon = new NodeExpandIcon()
                   {
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Minus,
                       Fill = "lightgray",
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Margin = new ExpandIconMargin() { Bottom = 0, Left = 0, Right = 0, Top = 0 }
                   },
                   CollapseIcon = new NodeCollapseIcon()
                   {
                       Offset = new IconOffset() { X = 0.5, Y = 1 },
                       VerticalAlignment = VerticalAlignment.Auto,
                       Height = 10,
                       Width = 10,
                       Shape = IconShapes.Plus,
                       Fill = "lightgray",
                       Padding = new IconPadding() { Top = 5 }
                   }
               };
               public class HierarchicalDetails
               {
                   public string Name { get; set; }
                   public string FillColor { get; set; }
                   public string Category { get; set; }
               }
               public List<object> DataSource = new List<object>()
               {
                   new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Tree layout", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Organizational chart", Category="Layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Hierarchical tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Radial tree", Category="Tree layout",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Mind map", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Family tree", Category="Hierarchical tree",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Management", Category="Organizational chart",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Human resources", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="University", Category="Management",FillColor="#659be5"},
                   new HierarchicalDetails(){ Name ="Business", Category="#Management",FillColor="#659be5"}
               };
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       Type = LayoutType.HierarchicalTree,
                       VerticalSpacing = 30,
                       HorizontalSpacing = 30,
                       EnableAnimation = true,
                       LayoutInfo = this.LayoutInfo
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FitModes.Page">
            <summary>
            Fits the entire diagram content within the viewport
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FitModes.Width">
            <summary>
            Fits the width of the diagram content within the viewport
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FitModes.Height">
            <summary>
            Fits the height of the diagram content within the viewport
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramRegions">
            <summary>
            Specifies the region that has to be drawn as an image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramRegions.PageSettings">
            <summary>
            Sets to export the diagram with the given page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramRegions.Content">
            <summary>
            Sets to export the diagram content alone.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramRegions.CustomBounds">
            <summary>
            Sets to export the diagram with the given bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SelectorConstraints">
            <summary>
            Specifies the visibility of the selector handles.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the selector constraints, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/constraints/#selector-constraints">1. Constraints</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/user-handle/">2. User handles</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply UserHandle selector constraints, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px"  Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               protected override void OnInitialized()
               {
                   //Creating the userhandle for cloning the objects
                   DiagramUserHandle CloneHandle = new DiagramUserHandle()
                   {
                       //Name of the user handle
                       Name = "clone",
                       //Set pathdata for userhandle
                       PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                       //Set visibility for the user handle
                       Visible = true,
                       //Set the position for the user handle
                       Offset = 0,
                       //Set side based on the given offset
                       Side = Side.Bottom,
                       //set margin for the user handle
                       Margin = new DiagramUserHandleMargin() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
                   };
                   //Add user handle to the collection...
                   UserHandles = new ObservableCollection<DiagramUserHandle>()
                   {
                       CloneHandle
                   };
                   SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                   {
                       //Enable userhandle for selected items...
                       Constraints = SelectorConstraints.UserHandle,
                       UserHandles = this.UserHandles
                   };
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.All">
            <summary>
            Shows all handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ConnectorSourceThumb">
            <summary>
            Shows the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ConnectorTargetThumb">
            <summary>
            Shows the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.None">
            <summary>
            Hides all the selector elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeAll">
            <summary>
            Shows all resize handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeEast">
            <summary>
            Shows the middle right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeNorth">
            <summary>
            Shows the top center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeNorthEast">
            <summary>
            Shows the top right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeNorthWest">
            <summary>
            Shows the top left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeSouth">
            <summary>
            Shows the bottom center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeSouthEast">
            <summary>
            Shows the bottom right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeSouthWest">
            <summary>
            Shows the bottom left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ResizeWest">
            <summary>
            Shows the middle left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.Rotate">
            <summary>
            Shows the rotate handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.ToolTip">
            <summary>
            Shows the default tooltip of nodes and connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SelectorConstraints.UserHandle">
            <summary>
            Shows the user handles of the selector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RubberBandSelectionMode">
            <summary>
            Specifies how to handle the selected items via rubber band selection.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram SelectedItems="@Sels"> </SfDiagram>
            @code
            {
               DiagramSelectedItems Sels = new DiagramSelectedItems()
               {
                   RubberBandSelectionMode = RubberBandSelectionMode.CompleteIntersect
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RubberBandSelectionMode.CompleteIntersect">
            <summary>
            Selects the objects that are contained within the selected region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.RubberBandSelectionMode.PartialIntersect">
            <summary>
            Selects the objects that are partially intersected with the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Side">
            <summary>
            Specifies where the user handles have to be aligned.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the side, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/user-handle/">1. UserHandles</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the user handle side, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
            </SfDiagram>
            @code{
               /// Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               /// Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               protected override void OnInitialized()
               {
                   ///Creating the userhandle for cloning the objects
                   DiagramUserHandle CloneHandle = new DiagramUserHandle()
                   {
                       ///Name of the user handle
                       Name = "clone",
                       ///Set pathdata for userhandle
                       PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                       ///Set visibility for the user handle
                       Visible = true,
                       ///Set the position for the user handle
                       Offset = 0,
                       ///Set side based on the given offset
                       Side = Side.Bottom,
                       ///set margin for the user handle
                       Margin = new DiagramUserHandleMargin() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
                   };
                   ///Add user handle to the collection...
                   UserHandles = new ObservableCollection<DiagramUserHandle>()
                   {
                       CloneHandle
                   };
                   SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                   {
                       ///Enable userhandle for selected items...
                       Constraints = SelectorConstraints.UserHandle,
                       UserHandles = this.UserHandles
                   };
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Top">
            <summary>
            Aligns the user handles at the top of an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Bottom">
            <summary>
            Aligns the user handles at the bottom of an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Left">
            <summary>
            Aligns the user handles at the left of an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Side.Right">
            <summary>
            Aligns the user handles at the right of an object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectionDirection">
            <summary>
            Specifies the directions of the first segment have to be defined in a layout.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height = "600px" Layout="@LayoutValue">
            </SfDiagram>
            @code {
               DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       ConnectionDirection = ConnectionDirection.Auto,
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionDirection.Auto">
            <summary>
            Sets the first segment direction based on the type of the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionDirection.Orientation">
            <summary>
            Sets the first segment direction based on the orientation of the layout
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectionDirection.Custom">
            <summary>
            Sets the first segment direction dynamically by the user
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorSegments">
            <summary>
            It allows the user to customize the connector segments according to the layout.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px"  Layout="@LayoutValue">
               </SfDiagram>
               @code {
                   DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       ConnectorSegments = ConnectorSegments.Default
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorSegments.Default">
            <summary>
            The connectors appear as in the default diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ConnectorSegments.Layout">
            <summary>
            The connectors are customized based on the type of layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.LayoutOrientation">
            <summary>
            Specifies the orientation of the layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using LayoutOrientation, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/#orientation">1.  Hierarchical Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">2. Organizational Chart</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply complex hierarchical layout orientation, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" Height="600px" tool="@DiagramTools.ZoomPan" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefault" Layout="@LayoutValue">
                   <DiagramDataSource Id = "Name" ParentId="ReportingPerson" DataMapSettings="@Datamap" DataSource="@DataSource"></DiagramDataSource>
               </SfDiagram>
            @code {
               SfDiagram Diagram;
               List<DiagramDataMapSetting> Datamap = new List<DiagramDataMapSetting>() {
                   new DiagramDataMapSetting() { Property = "Style.fill", Field = "fillColor" },
                   new DiagramDataMapSetting() { Property = "Style.strokeColor", Field = "border" }
               };
               DiagramLayout LayoutValue = new DiagramLayout()
               {
                   Type = LayoutType.ComplexHierarchicalTree,
                   HorizontalSpacing = 40,
                   VerticalSpacing = 40,
                   Orientation = LayoutOrientation.TopToBottom,
                   Margin = new LayoutMargin() { Left = 20, Top = 20 },
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Height = 40,
                   Width = 40,
                   Shape = new DiagramShape() { BasicShape = BasicShapes.Rectangle, Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, CornerRadius = 7 },
               };
               DiagramConnector ConnectorDefault = new DiagramConnector
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   CornerRadius = 7,
                   TargetDecorator = new ConnectorTargetDecorator() { Width = 7, Height = 7 },
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" }
               };
               public class DataModel
               {
                   public string Name;
                   public string fillColor;
                   public string border;
                   public string[] ReportingPerson;
               }
               public object DataSource = new List<object>()
               {
                   new DataModel { Name = "node11", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node12", ReportingPerson = new string[]{ "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node13", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node14", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node15", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node16", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node17", ReportingPerson = new string[] { "node13", "node14", "node15" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node18", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node19", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node110", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node111", ReportingPerson = new string[] { "node16", "node17", "node18", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node21", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node22", ReportingPerson = new string[] { "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node23", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node24", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node25", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node26", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node27", ReportingPerson = new string[] { "node23", "node24", "node25" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node28", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node29", ReportingPerson = new string[] { "node26", "node27", "node28", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node210", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node211", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node31", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node114", ReportingPerson = new string[] { "node11", "node21", "node31" }, fillColor = "#f3904a", border = "#d3722e" },
                   new DataModel {  Name = "node116", ReportingPerson = new string[] { "node12", "node22" }, fillColor = "#58b087", border = "#16955e" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.TopToBottom">
            <summary>
            Renders the layout from top to bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.BottomToTop">
            <summary>
            Renders the layout from bottom to top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.LeftToRight">
            <summary>
            Renders the layout from left to right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutOrientation.RightToLeft">
            <summary>
            Renders the layout from right to left.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.LayoutType">
            <summary>
            Specifies the type of automatic layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using LayoutType, refer to these links></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/automatic-layout/">Layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply ComplexHierarchical Layout type, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" id="diagram" Height="600px" tool="@DiagramTools.ZoomPan" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefault" Layout="@LayoutValue">
                   <DiagramDataSource Id = "Name" ParentId="ReportingPerson" DataMapSettings="@Datamap" DataSource="@DataSource"></DiagramDataSource>
               </SfDiagram>
            @code {
               SfDiagram Diagram;
               List<DiagramDataMapSetting> Datamap = new List<DiagramDataMapSetting>() {
                   new DiagramDataMapSetting() { Property = "Style.fill", Field = "fillColor" },
                   new DiagramDataMapSetting() { Property = "Style.strokeColor", Field = "border" }
               };
               DiagramLayout LayoutValue = new DiagramLayout()
               {
                   Type = LayoutType.ComplexHierarchicalTree,
                   HorizontalSpacing = 40,
                   VerticalSpacing = 40,
                   Orientation = LayoutOrientation.TopToBottom,
                   Margin = new LayoutMargin() { Left = 20, Top = 20 },
               };
               DiagramNode NodeDefaults = new DiagramNode
               {
                   Height = 40,
                   Width = 40,
                   Shape = new DiagramShape() { BasicShape = BasicShapes.Rectangle, Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, CornerRadius = 7 },
               };
               DiagramConnector ConnectorDefault = new DiagramConnector
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   CornerRadius = 7,
                   TargetDecorator = new ConnectorTargetDecorator() { Width = 7, Height = 7 },
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6d6d6d" }
               };
               public class DataModel
               {
                   public string Name;
                   public string fillColor;
                   public string border;
                   public string[] ReportingPerson;
               }
               public object DataSource = new List<object>()
               {
                   new DataModel { Name = "node11", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node12", ReportingPerson = new string[]{ "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node13", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node14", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node15", ReportingPerson = new string[] { "node12" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node16", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node17", ReportingPerson = new string[] { "node13", "node14", "node15" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node18", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node19", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node110", ReportingPerson = new string[] { "node16", "node17", "node18" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node111", ReportingPerson = new string[] { "node16", "node17", "node18", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node21", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node22", ReportingPerson = new string[] { "node114" }, fillColor = "#efd46e", border = "#d6b123" },
                   new DataModel {  Name = "node23", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node24", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node25", ReportingPerson = new string[] { "node22" }, fillColor = "#58b087", border = "#16955e" },
                   new DataModel {  Name = "node26", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node27", ReportingPerson = new string[] { "node23", "node24", "node25" }, fillColor = "#659be5", border = "#3a6eb5" },
                   new DataModel {  Name = "node28", ReportingPerson = new string[] {}, fillColor = "#14ad85" },
                   new DataModel {  Name = "node29", ReportingPerson = new string[] { "node26", "node27", "node28", "node116" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node210", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node211", ReportingPerson = new string[] { "node26", "node27", "node28" }, fillColor = "#8dbe6c", border = "#489911" },
                   new DataModel {  Name = "node31", fillColor = "#e7704c", border = "#c15433" },
                   new DataModel {  Name = "node114", ReportingPerson = new string[] { "node11", "node21", "node31" }, fillColor = "#f3904a", border = "#d3722e" },
                   new DataModel {  Name = "node116", ReportingPerson = new string[] { "node12", "node22" }, fillColor = "#58b087", border = "#16955e" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.None">
            <summary>
            None of the layouts is applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.HierarchicalTree">
            <summary>
            Defines the type of layout as a Hierarchical Tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.RadialTree">
            <summary>
            Defines the type of layout as a Radial tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.OrganizationalChart">
            <summary>
            Defines the type of layout as an Organizational Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.SymmetricalLayout">
            <summary>
            Defines the type of layout as a Symmetrical layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.ComplexHierarchicalTree">
            <summary>
            Defines the type of layout as complex HierarchicalTree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.LayoutType.MindMap">
            <summary>
            Defines the type of layout as Mind Map.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Keys">
            <summary>
            Sets the key value, on recognition of which the command key will be executed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.A">
            <summary>
            Sets the key value as A when A key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.B">
            <summary>
            Sets the key value as B when B key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.BackSpace">
            <summary>
            Sets the key value as BackSpace when BackSpace key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.C">
            <summary>
            Sets the key value as C when C key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.D">
            <summary>
            Sets the key value as D when D key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Delete">
            <summary>
            Sets the key value as Delete when Delete key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Down">
            <summary>
            Sets the key value as Down when Down arrow key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.E">
            <summary>
            Sets the key value as E when E key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.End">
            <summary>
            Sets the key value as End when End key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Enter">
            <summary>
            Sets the key value as Enter when Enter key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Escape">
            <summary>
            Sets the key value as Escape when Escape key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F">
            <summary>
            Sets the key value as F when F key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F1">
            <summary>
            Sets the key value as F1 when F1 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F10">
            <summary>
            Sets the key value as F10 when F10 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F11">
            <summary>
            Sets the key value as F11 when F11 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F12">
            <summary>
            Sets the key value as F12 when F12 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F2">
            <summary>
            Sets the key value as F2 when F2 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F3">
            <summary>
            Sets the key value as F3 when F3 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F4">
            <summary>
            Sets the key value as F4 when F4 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F5">
            <summary>
            Sets the key value as F5 when F5 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F6">
            <summary>
            Sets the key value as F6 when F6 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F7">
            <summary>
            Sets the key value as F7 when F7 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F8">
            <summary>
            Sets the key value as F8 when F8 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.F9">
            <summary>
            Sets the key value as F9 when F9 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.G">
            <summary>
            Sets the key value as G when G key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.H">
            <summary>
            Sets the key value as H when H key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Home">
            <summary>
            Sets the key value as Home when Home key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.I">
            <summary>
            Sets the key value as I when I key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.J">
            <summary>
            Sets the key value as J when J key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.K">
            <summary>
            Sets the key value as K when K key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.L">
            <summary>
            Sets the key value as L when L key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Left">
            <summary>
            Sets the key value as Left when Left key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.M">
            <summary>
            Sets the key value as M when M key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Minus">
            <summary>
            Sets the key value as Minus when Minus key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.N">
            <summary>
            Sets the key value as N when N key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.None">
            <summary>
            Sets the key value as null when none keys to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number0">
            <summary>
            Sets the key value as 0 when 0 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number1">
            <summary>
            Sets the key value as 1 when 1 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number2">
            <summary>
            Sets the key value as 2 when 2 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number3">
            <summary>
            Sets the key value as 3 when 3 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number4">
            <summary>
            Sets the key value as 4 when 4 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number5">
            <summary>
            Sets the key value as 5 when 5 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number6">
            <summary>
            Sets the key value as 6 when 6 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number7">
            <summary>
            Sets the key value as 7 when 7 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number8">
            <summary>
            Sets the key value as 8 when 8 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Number9">
            <summary>
            Sets the key value as 9 when 9 key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.O">
            <summary>
            Sets the key value as O when O key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.P">
            <summary>
            Sets the key value as P when P key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.PageDown">
            <summary>
            Sets the key value as PageDown when PageDown key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.PageUp">
            <summary>
            Sets the key value as PageUp when PageUp key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Plus">
            <summary>
            Sets the key value as Plus when Plus key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Q">
            <summary>
            Sets the key value as Q when Q key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.R">
            <summary>
            Sets the key value as R when R key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Right">
            <summary>
            Sets the key value as Right when Right arrow key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.S">
            <summary>
            Sets the key value as S when S key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Space">
            <summary>
            Sets the key value as Space when Space key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Star">
            <summary>
            Sets the key value as Star when Star key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.T">
            <summary>
            Sets the key value as T when T key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Tab">
            <summary>
            Sets the key value as Tab when Tab key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.U">
            <summary>
            Sets the key value as U when U key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Up">
            <summary>
            Sets the key value as Up when Up arrow key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.V">
            <summary>
            Sets the key value as V when V key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.W">
            <summary>
            Sets the key value as W when W key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.X">
            <summary>
            Sets the key value as X when X key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Y">
            <summary>
            Sets the key value as Y when Y key to be pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Keys.Z">
            <summary>
            Sets the key value as Z when Z key to be pressed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.KeyModifiers">
            <summary>
            Specifies a combination of key modifiers, on recognition of which the command will be executed.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Key Modifiers, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/#custom-command">1. Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply control key modifier, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" Height="600px"
               Nodes="@NodeCollection">
               @* Initializing the custom commands*@
               <DiagramCommandManager>
                   <DiagramCommands>
                       <DiagramCommand Name = "customGroup" >
                           < DiagramKeyGesture Key="Keys.G" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                       <DiagramCommand Name = "customUnGroup" >
                           < DiagramKeyGesture Key="Keys.U" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                   </DiagramCommands>
               </DiagramCommandManager>
               @* To define the custom commands execution event *@
               <DiagramEvents OnCommandExecuted="@CommandExecute"></DiagramEvents>
            </SfDiagram>
            @code
               {
                   // Reference to diagram
                   SfDiagram Diagram;
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   //Initializing the nodes collection
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode1 = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode1);
                   DiagramNode DiagramNode2 = new DiagramNode()
                   {
                       Id = "node2",
                       OffsetX = 300,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode2);
               }
               /// <summary>
               /// Custom command execution event
               /// </summary>
               public void CommandExecute(ICommandExecuteEventArgs args)
               {
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.G)
                   {
                       //Custom command to group the selected nodes
                       Diagram.Group();
                   }
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.U)
                   {
                       //Custom command to ungroup the selected items
                       if (Diagram.SelectedItems.Nodes.Count > 0 && Diagram.SelectedItems.Nodes[0].Children != null && Diagram.SelectedItems.Nodes[0].Children.Length > 0)
                       {
                           Diagram.UnGroup();
                       }
                   }
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Alt">
            <summary>
            specifies the alt key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Control">
            <summary>
            specifies the Ctrl key as a key modifier.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Meta">
            <summary>
            specifies meta key in mac.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.None">
            <summary>
            specifies no modifiers are pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.KeyModifiers.Shift">
            <summary>
            specifies the shift key as a key modifier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AlignmentMode">
            <summary>
            It allows the user to the alignment of the selected objects based on the first object in the selector or entire selector bounds.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Alignment" @onclick="@OnAlign" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           OffsetX = 50, OffsetY = 100,Width = 70, Height = 40,
                       },
                       new DiagramNode()
                       {
                           OffsetX = 292, OffsetY = 293,Width = 60, Height = 80,
                       },
                   };
               }
               public async void OnAlign()
               {
                   Diagram.SelectAll();
                   //Aligns the selected items to top
                   Diagram.Align(AlignmentOptions.Top, null, AlignmentMode.Selector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentMode.Object">
            <summary>
            Aligns the objects based on the first object in the selected list
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentMode.Selector">
            <summary>
            Aligns the objects based on the selector bounds
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AlignmentOptions">
            <summary>
            It allows the user to define the alignment position for the selected objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Alignment" @onclick="@OnAlign" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           OffsetX = 50, OffsetY = 100,Width = 70, Height = 40,
                       },
                       new DiagramNode()
                       {
                           OffsetX = 292, OffsetY = 293,Width = 60, Height = 80,
                       },
                   };
               }
               public async void OnAlign()
               {
                   Diagram.SelectAll();
                   //Aligns the selected items to left
                   Diagram.Align(AlignmentOptions.Left);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Left">
            <summary>
            Aligns the selected objects at the left side of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Right">
            <summary>
            Aligns the selected objects at the right side of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Center">
            <summary>
            Aligns the selected objects at the horizontal center of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Top">
            <summary>
            Aligns the selected objects at the top of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Bottom">
            <summary>
            Aligns the selected objects at the bottom of the selector bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.AlignmentOptions.Middle">
            <summary>
            Aligns the selected objects at the vertical center of the selector bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ChangeType">
            <summary>
            Specifies whether an object is added/removed from diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="1000"></SfDiagram>
            @code
            {
               public void ChangeType(ISelectionChangeEventArgs args)
               {
                   ChangeType hh = ChangeType.Addition;
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChangeType.Addition">
            <summary>
            Sets the ChangeType to Addition.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ChangeType.Removal">
            <summary>
            Sets the ChangeType to Removal.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ContainerTypes">
            <summary>
            Specifies the container type for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ContainerTypes.Canvas">
            <summary>
            Sets the container types as Canvas
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ContainerTypes.Stack">
            <summary>
            Sets the container types as Stack
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ContainerTypes.Grid">
            <summary>
            Sets the container types as Grid
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DistributeOptions">
            <summary>
            Specifies to place the selected objects on the page at an equal interval from each other.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using distribute options, refer to these links:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/">1. Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#distribution-commands">2. Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">For distribute options to the middle, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Distribute" @onclick="@OnDistribution" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 100, OffsetY = 100,
                           /// Size of the node
                           Width = 70, Height = 40,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node2",
                           // Position of the node
                           OffsetX = 156, OffsetY = 305,
                           // Size of the node
                           Width = 60, Height = 80,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                        new DiagramNode()
                       {
                           Id = "Node3",
                           // Position of the node
                           OffsetX = 239, OffsetY = 188,
                           // Size of the node
                           Width = 50, Height = 50,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node4",
                           // Position of the node
                           OffsetX = 392, OffsetY = 179,
                           // Size of the node
                           Width = 70, Height = 90,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
               }
               public async void OnDistribution()
               {
                   Diagram.SelectAll();
                   //Distribute the selected items to middle
                   Diagram.Distribute(DistributeOptions.Middle);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.RightToLeft">
            <summary>
            Distributes the objects based on the distance between the right and left sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Left">
            <summary>
            Distributes the objects based on the distance between the left sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Right">
            <summary>
             Distributes the objects based on the distance between the right sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Center">
            <summary>
            Distributes the objects based on the distance between the center of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.BottomToTop">
            <summary>
            Distributes the objects based on the distance between the bottom and top sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Top">
            <summary>
            Distributes the objects based on the distance between the top sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Bottom">
            <summary>
            Distributes the objects based on the distance between the bottom sides of the adjacent objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DistributeOptions.Middle">
            <summary>
            Distributes the objects based on the distance between the vertical center of the adjacent objects
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EntryCategory">
            <summary>
            Defines the wether the history entry as internal entry as a user defined entry.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set the EntryCategory to External</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            HistoryEntry Entry = new HistoryEntry() {
               BlazorHistoryEntryType = HistoryEntryType.Object, Category = EntryCategory.External
            };
            Diagram.AddCustomHistoryEntry(Entry);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryCategory.Internal">
            <summary>
            Sets the entry category as internal
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryCategory.External">
            <summary>
            Sets the entry category as external
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EntryChangeType">
            <summary>
            Defines whether the history action contains any insert or remove operation.
            </summary>
            <remarks>
            The below code is an example to set the EntryChangeType to Insert.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            HistoryEntry Entry = new HistoryEntry() {
               BlazorHistoryEntryType = HistoryEntryType.Object,
               Category = EntryCategory.External,ChangeType = EntryChangeType.Insert
            };
            Diagram.AddCustomHistoryEntry(Entry);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryChangeType.Insert">
            <summary>
            specifies the history entry created for the insert action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryChangeType.Remove">
            <summary>
            specifies the history entry created for the removal action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.MouseButtons">
            <summary>
            Returns which mouse button is clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.MouseButtons.Left">
            <summary>
            Whenever the left button of the mouse is clicked, ‘Left’ is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.MouseButtons.Middle">
            <summary>
            Whenever the mouse wheel is clicked, ‘Middle’ is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.MouseButtons.Right">
            <summary>
            Whenever the right button of the mouse is clicked, ‘Right’ is returned.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EntryType">
            <summary>
            Specifies to sets the property change entry type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PositionChanged">
            <summary>
            Sets the entry type as PositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Align">
            <summary>
            Sets the entry type as Align
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Distribute">
            <summary>
            Sets the entry type as Distribute
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SizeChanged">
            <summary>
            Sets the entry type as SizeChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Sizing">
            <summary>
            Sets the entry type as Sizing
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.RotationChanged">
            <summary>
            Sets the entry type as RotationChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.ConnectionChanged">
            <summary>
            Sets the entry type as ConnectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PropertyChanged">
            <summary>
            Sets the entry type as PropertyChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.CollectionChanged">
            <summary>
            Sets the entry type as CollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.StartGroup">
            <summary>
            Sets the entry type as StartGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.EndGroup">
            <summary>
            Sets the entry type as EndGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.Group">
            <summary>
            Sets the entry type as Group
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.UnGroup">
            <summary>
            Sets the entry type as UnGroup
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SegmentChanged">
            <summary>
            Sets the entry type as SegmentChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.LabelCollectionChanged">
            <summary>
            Sets the entry type as LabelCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PortCollectionChanged">
            <summary>
            Sets the entry type as PortCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PortPositionChanged">
            <summary>
            Sets the entry type as PortPositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.AnnotationPropertyChanged">
            <summary>
            Sets the entry type as AnnotationPropertyChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.ChildCollectionChanged">
            <summary>
            Sets the entry type as ChildCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.StackChildPositionChanged">
            <summary>
            Sets the entry type as StackChildPositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.ColumnWidthChanged">
            <summary>
            Sets the entry type as ColumnWidthChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.RowHeightChanged">
            <summary>
            Sets the entry type as RowHeightChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.LanePositionChanged">
            <summary>
            Sets the entry type as LanePositionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.PhaseCollectionChanged">
            <summary>
            Sets the entry type as PhaseCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.LaneCollectionChanged">
            <summary>
            Sets the entry type as LaneCollectionChanged
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SendForward">
            <summary>
            Sets the entry type as SendForward
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SendBackward">
            <summary>
            Sets the entry type as SendBackward
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.BringToFront">
            <summary>
            Sets the entry type as BringToFront
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EntryType.SendToBack">
            <summary>
            Sets the entry type as SendToBack
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.EventState">
            <summary>
            Specifies the events current state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EventState.Changing">
            <summary>
            Sets the event state as Changing
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EventState.Changed">
            <summary>
            Sets the event state as Changed
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.EventState.Cancelled">
            <summary>
            Sets the event state as canceled
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ExportModes">
            <summary>
            Specifies whether the diagram has to be exported as an image or it has to be converted as an image URL.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using Export Modes, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/export/">1.  Printing and Exporting</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply data as Export Modes, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram ID = "diagram" Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code{
                SfDiagram Diagram;
               private void OnExport()
               {
                   //Sets the export option for diagram
                   IExportOptions Options = new IExportOptions()
                   {
                       Mode = ExportModes.Data,
                       //Sets the format for diagram export
                       Format = FileFormats.SVG
                   };
                   Diagram.ExportDiagram(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ExportModes.Download">
            <summary>
            Return the diagram content as an image URL.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ExportModes.Data">
            <summary>
            Downloads the Images in the browser.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FileFormats">
            <summary>
            Specifies the filename of the diagram image to be download.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using file format, refer to this link:</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/export/">1.  Printing and Exporting</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the SVG file format, use the below code.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram ID = "diagram" Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code{
                SfDiagram Diagram;
               private void OnExport()
               {
                   //Sets the export option for diagram
                   IExportOptions Options = new IExportOptions()
                   {
                       Mode = ExportModes.Data,
                       //Sets the format for diagram export
                       Format = FileFormats.SVG
                   };
                   Diagram.ExportDiagram(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.JPG">
            <summary>
            Diagram will be exported as a JPG file
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.PNG">
            <summary>
            Diagram will be exported as a PNG file
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.BMP">
            <summary>
            Diagram will be exported as a BMP file.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.FileFormats.SVG">
            <summary>
            Diagram will be exported as an SVG file
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryChangeAction">
            <summary>
            Specifies the history entry type for the nodes/connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryChangeAction.CustomAction">
            <summary>
            Sets the history entry type is node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryChangeAction.Undo">
            <summary>
            Sets the history entry type is Connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryChangeAction.Redo">
            <summary>
            Sets the history entry type is Selector Model.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryEntryType">
            <summary>
            Specifies the history entry created for the modification of the diagram element like node, connector, port and more.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to demonstrate HistoryEntryType is object,</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            HistoryEntry Entry = new HistoryEntry() {
               BlazorHistoryEntryType = HistoryEntryType.Object
            };
            Diagram.AddCustomHistoryEntry(Entry);
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Node">
            <summary>
            Define the history entry created for node modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Connector">
            <summary>
            Define the history entry created for connector modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Selector">
            <summary>
            Define the history entry created for Selector modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Diagram">
            <summary>
            Define the history entry created for diagram modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.ShapeAnnotation">
            <summary>
            Define the history entry created for Shape Annotation modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.PathAnnotation">
            <summary>
            Define the history entry created for path annotation modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.PortObject">
            <summary>
            Define the history entry created for port modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.HistoryEntryType.Object">
            <summary>
            Define the history entry created for custom object modification.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NudgeDirection">
            <summary>
            Specifies the direction in which the selected element must be moved during nudge operation.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using nudging direction, refer to these links</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/#nudge-command">1.  Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#nudge">2.   DiagramMethods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply nudging direction, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            DiagramMethods
            <input type = "button" value="Nudge Left" @onclick="@OnNudgeLeft">
            <input type = "button" value="Nudge Right" @onclick="@OnNudgeRight">
            <input type = "button" value="Nudge Top" @onclick="@OnNudgeTop" />
            <input type = "button" value="Nudge Bottom" @onclick="@OnNudgeBottom" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code {
               /// reference of the diagram
               SfDiagram Diagram;
               /// To define node collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               ///Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                   /// A node is created and stored in nodes collection.
                   DiagramNode Node1 = new DiagramNode()
                   {
                       Id = "Node1",
                       /// Position of the node
                       OffsetX = 250,
                       OffsetY = 250,
                       /// Size of the node
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                   };
                   /// Add node
                   NodeCollection.Add(Node1);
                   DiagramConnector Connector1 = new DiagramConnector()
                   {
                       Id = "Connector1",
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       TargetDecorator = new ConnectorTargetDecorator()
                       {
                           Shape = DecoratorShapes.Arrow,
                           Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 }
                       },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       Type = Segments.Orthogonal
                   };
                   ConnectorCollection.Add(Connector1);
               }
               public void OnNudgeLeft()
               {
                   /// Selected objects move one step to left
                   Diagram.Nudge(NudgeDirection.Left);
               }
               public void OnNudgeRight()
               {
                   /// Selected objects move one step to right
                   Diagram.Nudge(NudgeDirection.Right);
               }
               public void OnNudgeTop()
               {
                   /// Selected objects move one step to top
                   Diagram.Nudge(NudgeDirection.Up);
               }
               public void OnNudgeBottom()
               {
                   /// Selected objects move one step to bottom
                   Diagram.Nudge(NudgeDirection.Down);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Left">
            <summary>
            Nudge the object in the left direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Right">
            <summary>
            Nudge the object in the right direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Up">
            <summary>
            Nudge the object in the up direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.NudgeDirection.Down">
            <summary>
            Nudge the object in the down direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SizingOptions">
            <summary>
            Specifies to equally size the selected nodes with respect to the first selected object.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the SizingOptions, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/commands/#sizing-commands">1. Commands</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#sizing-commands">2. Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply the sizing options, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Same Width" @onclick="@OnSameWidth" />
            <input type = "button" value="Same Height" @onclick="@OnSameHeight" />
            <input type = "button" value="Same Size" @onclick="@OnSameSize" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 100, OffsetY = 100,
                           // Size of the node
                           Width = 70, Height = 40,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node2",
                           // Position of the node
                           OffsetX = 100, OffsetY = 300,
                           // Size of the node
                           Width = 60, Height = 80,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                        new DiagramNode()
                       {
                           Id = "Node3",
                           // Position of the node
                           OffsetX = 100, OffsetY = 200,
                           // Size of the node
                           Width = 50, Height = 50,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       },
                       new DiagramNode()
                       {
                           Id = "Node4",
                           // Position of the node
                           OffsetX = 200, OffsetY = 250,
                           // Size of the node
                           Width = 70, Height = 90,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
               }
               // Same width
               public async void OnSameWidth()
               {
                   Diagram.Select(new ObservableCollection<DiagramNode>() { Diagram.Nodes[0], Diagram.Nodes[1], Diagram.Nodes[2] }, true);
                   SizingOptions SizingOptions = SizingOptions.Width;
                   Diagram.SameSize(SizingOptions);
               }
               // Same Height
               public async void OnSameHeight()
               {
                   Diagram.Select(new ObservableCollection<DiagramNode>() { Diagram.Nodes[0], Diagram.Nodes[1], Diagram.Nodes[2] }, true);
                   //Changing the selected nodes to same height
                   SizingOptions SizingOptions = SizingOptions.Height;
                   Diagram.SameSize(SizingOptions);
               }
               // Same Height
               public async void OnSameSize()
               {
                   Diagram.SelectAll();
                   //Changing the selected nodes to same size
                   SizingOptions SizingOptions = SizingOptions.Size;
                   Diagram.SameSize(SizingOptions);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SizingOptions.Width">
            <summary>
            Scales the width of the selected objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SizingOptions.Height">
            <summary>
            Scales the height of the selected objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SizingOptions.Size">
            <summary>
            Scales the selected objects both vertically and horizontally.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.State">
            <summary>
            Specifies the state of interactions such as drag, resize, and rotate.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="1000"></SfDiagram>
            @code
            {
               public void State(ISizeChangeEventArgs args)
               {
                   State state = State.Completed;
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.State.Start">
            <summary>
            Sets the interaction state to start.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.State.Progress">
            <summary>
            Sets the interaction state to progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.State.Completed">
            <summary>
            Sets the interaction state to completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SubTreeOrientation">
            <summary>
            Specifies the subtree orientation in layout.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the Subtree Orientations, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/organizational-chart/">1. Organizational chart</a></td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/layout/hierarchical-layout/">2. Hierarchical layout</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply vertical Subtree Orientation, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
               <DiagramDataSource Id = "Id" ParentId="Team" DataSource="@DataSource" ></DiagramDataSource>
            </SfDiagram>
            @code {
               //Initializing layout
               DiagramLayout LayoutValue;
               protected override void OnInitialized()
               {
                   LayoutValue = new DiagramLayout()
                   {
                       //Sets layout type as OrganizationalChart...
                       Type = LayoutType.OrganizationalChart,
                       VerticalSpacing = 50,
                       HorizontalSpacing = 40,
                       //Initialize the layout info for the org chart layout
                       LayoutInfo = new TreeInfo
                       {
                           Orientation = SubTreeOrientation.Vertical,
                           CanEnableSubTree = true,
                       }
                   };
               }
               //Initializing node defaults
               DiagramNode NodeDefaults = new DiagramNode()
               {
                   Width = 150,
                   Height = 50,
                   Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                   Style = new NodeShapeStyle { Fill = "#6BA5D7", StrokeColor = "black", },
                   LayoutInfo = new DiagramNodeLayoutInfo()
                   {
                       Orientation = Orientation.Vertical,
                       Type = SubTreeAlignments.Right
                   }
               };
               //Initializing connector defaults
               DiagramConnector ConnectorDefaults = new DiagramConnector()
               {
                   Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                   Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 1 },
                   TargetDecorator = new ConnectorTargetDecorator()
                   {
                       Shape = DecoratorShapes.None,
                       Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                   }
               };
               public class OrgChartDataModel
               {
                   public string Id { get; set; }
                   public string Team { get; set; }
                   public string Role { get; set; }
               }
               public object DataSource = new List<object>()
               {
                   new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                   new OrgChartDataModel() { Id= "2", Role= "Human Resource Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "3", Role= "Design Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "4", Role= "Operation Manager", Team= "1" },
                   new OrgChartDataModel() { Id= "5", Role= "Marketing Manager", Team= "1" }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeOrientation.Horizontal">
            <summary>
            Horizontally aligns the child nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.SubTreeOrientation.Vertical">
            <summary>
            Vertically aligns the child nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ZoomTypes">
            <summary>
            Specifies the zoom type.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">To know more about using the zoom, refer to this link</td>
            </tr>
            <tr>
            <td style = "border:none"><a href="https://blazor.syncfusion.com/documentation/diagram/methods/#zoom">1.    Diagram Methods</a></td>
            </tr>
            <tr>
            <td style = "border:none">To apply zoom in and zoom out, use the below code. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Zoom" @onclick="@OnZoom" />
            <input type = "button" value="Zoom To" @onclick="@OnZoomRegion" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               public ObservableCollection<DiagramConnector> ConnectorCollection;
               public ObservableCollection<DiagramLayer> LayersCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 250, OffsetY = 250,
                           // Size of the node
                           Width = 100, Height = 100,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
                   ConnectorCollection = new ObservableCollection<DiagramConnector>()
                   {
                       new DiagramConnector()
                       {
                           Id = "Connector1",
                           SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
                           TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 },
                           Type = Segments.Orthogonal
                       }
                   };
               }
               // Zoom the diagram
               public void OnZoom()
               {
                   Diagram.Zoom(0.5);
               }
               public void OnZoomRegion()
               {
                   ZoomOptions Options = new ZoomOptions() { FocusPoint = new PointModel() { X = 100, Y = 100 }, Type = ZoomTypes.ZoomIn, ZoomFactor = 2.5 };
                   Diagram.ZoomTo(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ZoomTypes.ZoomIn">
            <summary>
            Zooms in the diagram control.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ZoomTypes.ZoomOut">
            <summary>
            Zooms out the diagram control.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramAction">
            <summary>
            Specifies to Enables/Disables certain actions of diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Clear">
            <summary>
            Indicates diagram have clear all.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.DecoratorPropertyChange">
            <summary>
            Indicates whether decorator property is changed or not
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.DragUsingMouse">
            <summary>
            Indicates whether drag is initiated by mouse
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Group">
            <summary>
            Indicates the group is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Interactions">
            <summary>
            Indicates whether drag or rotate tool has been activated/].
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventClearSelection">
            <summary>
            prevents diagram from clear selection.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventCollectionChangeOnDragOver">
            <summary>
            Use to prevent the collection change event while dragging lane from palette and over it in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventHistory">
            <summary>
            Use to prevent the history during some action in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventIconsUpdate">
            <summary>
            Use to prevent the icon while expand a node in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PreventZIndexOnDragging">
            <summary>
            Use to prevent the z order on dragging the diagram elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.PublicMethod">
            <summary>
            Indicates the diagram public method is in action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.Render">
            <summary>
            Indicates the diagram is in render state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.TextEdit">
            <summary>
            Indicates the text editing is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.ToolAction">
            <summary>
            Indicates the diagram Tool is in action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.UndoRedo">
            <summary>
            Indicates the diagram undo/redo is in action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramAction.isGroupDragging">
            <summary>
            Indicates whether group dragging has been activated.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTools">
            <summary>
            DrawingTools allow users to draw objects (nodes, connectors, etc.,) during runtime by clicking and dragging.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The below code snippet is an example to set DiagramTools to DrawOnce.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input Type="button" value="addNode" @onclick="AddNode" />
            <SfDiagram @ref = "Diagram" Nodes="@NodeCollection" Width="100%" Height="540px">
                <DiagramSnapSettings Constraints = "SnapConstraints.None" />
            </ SfDiagram >
            @code
            {
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 200,
                       OffsetY = 200,
                       Width = 100,
                       Height = 100,
                   };
                   NodeCollection.Add(Node);
               }
               private void AddNode()
               {
                   //To draw an object once, activate draw once
                   Diagram.Tool = DiagramTools.DrawOnce;
                   Diagram.DrawingObject = new DiagramNode()
                   {
                       Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = BasicShapes.Rectangle },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.ContinuousDraw">
            <summary>
            It allows users to draw the nodes or connectors continuously. Once it is activated, users cannot perform any other interaction in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.Default">
            <summary>
            Sets the drawing tools to default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.DrawOnce">
            <summary>
            It allows users to draw a node or connector at once.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.MultipleSelect">
            <summary>
            It allows users to select multiple nodes and connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.None">
            <summary>
            Disables all the drawing tools.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.SingleSelect">
            <summary>
            It allows users to select only individual nodes or connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramTools.ZoomPan">
            <summary>
            It allows users to pan the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ThumbsConstraints">
            <summary>
            Specifies to enables/disbles the handles for the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ConnectorSource">
            <summary>
            Sets the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ConnectorTarget">
            <summary>
            Sets the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.Default">
            <summary>
            Sets all handles of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeEast">
            <summary>
            Sets the middle right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeNorth">
            <summary>
            Sets the top center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeNorthEast">
            <summary>
            Sets the top right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeNorthWest">
            <summary>
            Sets the top left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeSouth">
            <summary>
            Sets the bottom center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeSouthEast">
            <summary>
            Sets the bottom right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeSouthWest">
            <summary>
            Sets the bottom left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.ResizeWest">
            <summary>
            Sets the middle left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.ThumbsConstraints.Rotate">
            <summary>
            Sets the rotate handle of the selected items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Effect">
            <summary>
            Animation effects that are applicable to the Tooltip. A different animation can be set for tooltip open and close action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeIn">
            <summary>
            Tooltip open/close actions occur with the FadeIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeOut">
            <summary>
            Tooltip open/close actions occur with the FadeOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeZoomIn">
            <summary>
            Tooltip open/close actions occur with the FadeZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FadeZoomOut">
            <summary>
            Tooltip open/close actions occur with the FadeZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXDownIn">
            <summary>
            Tooltip open/close actions occur with the FlipXDownIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXDownOut">
            <summary>
            Tooltip open/close actions occur with the FlipXDownOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXUpIn">
            <summary>
            Tooltip open/close actions occur with the FlipXUpIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipXUpOut">
            <summary>
            Tooltip open/close actions occur with the FlipXUpOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYLeftIn">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYLeftOut">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYRightIn">
            <summary>
            Tooltip open/close actions occur with the FlipYRightIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.FlipYRightOut">
            <summary>
            Tooltip open/close actions occur with the FlipYRightOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.ZoomIn">
            <summary>
            Tooltip open/close actions occur with the ZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.ZoomOut">
            <summary>
            Tooltip open/close actions occur with the ZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.Effect.None">
            <summary>
            Tooltip open/close actions occur without any animation effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramModel">
            <summary>
            Represents the interface for a class diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Click">
            <summary>
            Triggers when a node, connector or diagram is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.CommandExecute">
            <summary>
            Triggers when a command executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ConnectionChange">
            <summary>
            Triggers when the connection is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ContextMenuClick">
            <summary>
            Triggers when a context menu item is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ContextMenuOpen">
            <summary>
            Triggers before opening the context menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Created">
            <summary>
            Triggered when the diagram is rendered completely.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DoubleClick">
            <summary>
            Triggers when a node, connector or diagram model is clicked twice.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DragEnter">
            <summary>
            Triggers when a symbol is dragged into diagram from symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DragLeave">
            <summary>
            Triggers when a symbol is dragged outside of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Drop">
            <summary>
            Triggers when a symbol is dragged and dropped from symbol palette to drawing area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.HistoryChange">
            <summary>
            Triggers when a change is reverted or restored(undo/redo).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.HistoryStateChange">
            <summary>
            Triggers when a custom entry change is reverted or restored(undo/redo).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.KeyDown">
            <summary>
            Triggers when a user is pressing a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.KeyUp">
            <summary>
            Triggers when a user releases a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.MouseEnter">
            <summary>
            Triggered when mouse enters a node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.MouseLeave">
            <summary>
            Triggered when mouse leaves node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseDown">
            <summary>
            Triggers when a mouseDown on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.FixedUserHandleClick">
            <summary>
            Triggers when a mouseDown on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseEnter">
            <summary>
            Triggers when a mouseEnter on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseLeave">
            <summary>
            Triggers when a mouseLeave on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.OnUserHandleMouseUp">
            <summary>
            Triggers when a mouseUp on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.PositionChange">
            <summary>
            Triggers while dragging the elements in diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.PropertyChange">
            <summary>
            Triggers once the node or connector property changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.RotateChange">
            <summary>
            Triggers when the diagram elements are rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SelectionChange">
            <summary>
            Triggers when the selection is changed in diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SizeChange">
            <summary>
            Triggers when a node is resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.TextEdit">
            <summary>
            Triggers when editor got focus at the time of node’s label or text node editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.AddInfo">
            <summary>
            Allows the user to save custom information/data about diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.AnnotationTemplate">
            <summary>
            Customizes the annotation template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.BackgroundColor">
            <summary>
            Defines the background color of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is inserted when the segments are intersected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ConnectorDefaults">
            <summary>
            Helps to assign the default properties of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Connectors">
             <summary>
             Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them.
            
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Constraints">
            <summary>
            Defines the collection of constraints which enable or disable certain features of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ContextMenuSettings">
            <summary>
            Represents the context menu for an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.CustomCursor">
            <summary>
            A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DrawingObject">
            <summary>
            Defines the object to be drawn using drawing tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Height">
            <summary>
            Defines the height of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.HistoryManager">
            <summary>
            Customizes the undo redo functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Layers">
            <summary>
            A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Mode">
            <summary>
            Defines the diagram rendering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.NodeDefaults">
            <summary>
            Helps to assign the default properties of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.NodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Nodes">
            <summary>
            Defines the node's collection and properties of each node to be rendered in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.PageSettings">
            <summary>
            Page settings enable to customize the appearance, width, and height of the Diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.RulerSettings">
            <summary>
            Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and view port size of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SelectedItems">
            <summary>
            Defines the collection of selected items, size and position of the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SerializationSettings">
            <summary>
            Defines the properties of saving and loading for the state persistence of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.DiagramSettings">
            <summary>
            Defines the settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.SnapSettings">
            <summary>
            Defines the gridlines and defines how and when the objects have to be snapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Tooltip">
            <summary>
            Defines the tooltip that should be shown when the mouse hovers over a node or connector
            An object that defines the description, appearance and alignments of tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramModel.Width">
            <summary>
            Defines the width of the diagram model.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.History">
            <summary>
            Notifies when changes are reverted or restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CanLog">
            <summary>
            Decides whether the changes are stored in the history or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CanRedo">
            <summary>
            Sets the history entry can be redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CanUndo">
            <summary>
            Sets the history entry can be undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.CurrentEntry">
            <summary>
             Sets the current entry object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.EndGroupAction">
            <summary>
            Used to intimate group action is end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.Push">
            <summary>
            Stores a history entry to the history list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.Redo">
            <summary>
            Used for custom redo action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.RedoStack">
            <summary>
            Used to store the list of entries in the redo list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.StartGroupAction">
            <summary>
            Used to intimate group action is the start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.Undo">
            <summary>
            Used for custom undo action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.History.UndoStack">
            <summary>
            Used to store the list of entries in the undo list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryEntry">
            <summary>
            Represents the entry of the changed history of an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.BlazorHistoryEntryType">
            <summary>
            Used to define the object’s type that is to be added to the entry list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Cancel">
            <summary>
            Defines whether the user can prevent drag entry or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Category">
            <summary>
            Sets the category for the entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.ChangeType">
            <summary>
            Sets the type of the object that is added or removed from the entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.ChildTable">
            <summary>
            Sets the changed value to be stored in the table.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.HistoryAction">
            <summary>
            Used to store the cause of the added node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.IsLastPhase">
            <summary>
            Used to indicate the last phase to be changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.IsUndo">
            <summary>
            Sets the value for undo action is activated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Next">
            <summary>
            Sets the next action of the current object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.ObjectId">
            <summary>
            Used to store the id of an object that means, used to indicate which annotation or port has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Previous">
            <summary>
            Used to store the previous phase.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.RedoObject">
            <summary>
            Sets the changed values to be stored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.Type">
            <summary>
            Sets the type of entry to be stored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryEntry.UndoObject">
            <summary>
            Sets the changed values to be stored.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.RulerSettingsModel">
            <summary>
            Defines the appearance and behavior of the rulers in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram Height="600px" Nodes="@NodeCollection">
                  <DiagramRulerSettings ShowRulers = "true" DynamicGrid="true">
                       <HorizontalRuler></HorizontalRuler>
                       <VerticalRuler></VerticalRuler>
                   </DiagramRulerSettings>
               </SfDiagram>
               @code{
                   public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 250,
                       OffsetY = 250,
                       Width = 100,
                       Height = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.DynamicGrid">
            <summary>
            Sets the gridlines relative to the ruler ticks. By default, DynamicGrid is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.HorizontalRuler">
            <summary>
            Sets the behavior and appearance of the horizontal rulers.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.ShowRulers">
            <summary>
            Enables or disables the visibility of both horizontal and vertical rulers. By default, the ShowRulers is set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.RulerSettingsModel.VerticalRuler">
            <summary>
            Sets the behavior and appearance of the vertical rulers.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AssistantsDetails">
            <summary>
            Represents the details of the assistants in an organizational chart.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[@using Syncfusion.Blazor.Diagrams
            <SfDiagram Height="600px" NodeDefaults="@NodeDefaults" ConnectorDefaults="@ConnectorDefaults" Layout="@LayoutValue">
               <DiagramDataSource Id = "Id" ParentId= "Team" DataSource= "@DataSource" DataMapSettings= "@DataMap" ></ DiagramDataSource >
            </ SfDiagram >
            @code {
              //Initializing layout
              DiagramLayout LayoutValue;
              protected override void OnInitialized()
              {
              LayoutValue = new DiagramLayout()
                {
                 //Sets layout type as OrganizationalChart...
                 Type = LayoutType.OrganizationalChart,
                 VerticalSpacing = 50,
                 HorizontalSpacing = 40,
                 //Initialize the layout info for the org chart layout
                 LayoutInfo = new TreeInfo
                 {
                   Orientation = SubTreeOrientation.Vertical,
                   Offset = -20,
                   CanEnableSubTree = true,
                   //provides an assitant details for the root node
                   GetAssistantDetails = new AssistantsDetails()
                   {
                     Root = "General Manager",
                     Assistants = new string[] { "Assistant Manager" }
                    }
                  }
                };
              }
              //Initializing DataMap Setting
              List<DiagramDataMapSetting> DataMap = new List<DiagramDataMapSetting>()
              {
                new DiagramDataMapSetting() { Property = "Annotations[0].Content, Field = "Role" },
               };
               //Initializing node defaults
               DiagramNode NodeDefaults = new DiagramNode()
               {
                 Width = 150,
                 Height = 50,
                 Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Id = "label1", Style = new AnnotationStyle() { Color = "white" } }, },
                 Style = new NodeShapeStyle { Fill = "darkcyan", StrokeColor = "white", }
                };
                //Initializing connector defaults
                DiagramConnector ConnectorDefaults = new DiagramConnector()
                {
                  Type = Syncfusion.Blazor.Diagrams.Segments.Orthogonal,
                  Style = new ConnectorShapeStyle() { StrokeColor = "#6BA5D7", StrokeWidth = 2 },
                  TargetDecorator = new ConnectorTargetDecorator()
                  {
                    Shape = DecoratorShapes.None,
                    Style = new DecoratorShapeStyle() { Fill = "#6BA5D7", StrokeColor = "#6BA5D7", },
                   }
                 };
                public class OrgChartDataModel
                {
                  public string Id { get; set; }
                  public string Team { get; set; }
                  public string Role { get; set; }
                 }
                 public object DataSource = new List<object>()
                 {
                     new OrgChartDataModel() { Id= "1", Role= "General Manager" },
                     new OrgChartDataModel() { Id= "2", Role= "Assistant Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "3", Role= "Human Resource Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "4", Role= "Design Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "5", Role= "Operation Manager", Team= "1" },
                     new OrgChartDataModel() { Id= "6", Role= "Marketing Manager", Team= "1" }
                  };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AssistantsDetails.Assistants">
            <summary>
            Specifies the details of the child item that have a different relationship with the parent node in an Organizational chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AssistantsDetails.Root">
            <summary>
            Returns the parent node for assistants.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Bounds">
            <summary>
            Defines the properties of the layout bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.Bottom">
            <summary>
            returns the bottom position, where layout is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.CanMoveBy">
            <summary>
            returns how much distance layout is moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.Right">
            <summary>
            returns the right position, where layout is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.X">
            <summary>
            returns the left position, where the layout is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Bounds.Y">
            <summary>
            returns the top position, where layout is rendered.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TreeInfo">
            <summary>
            Defines the behavior and appearance of the tree.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram ID="diagram" Height="600px" Layout="@LayoutValue">
                <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource">
                    <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Shape.TextContent" Field="Name"></DiagramDataMapSetting>
                       <DiagramDataMapSetting Property = "Style.StrokeColor" Field="FillColor"></DiagramDataMapSetting>
                                <DiagramDataMapSetting Property = "Style.Fill" Field="FillColor"></DiagramDataMapSetting>
                    </DiagramDataMapSettings>
                 </DiagramDataSource>
             </SfDiagram>
             @code{
              TreeInfo LayoutInfo = new TreeInfo()
              {
               CanEnableSubTree = true,
               Orientation = SubTreeOrientation.Horizontal,
               Offset = -20,
               GetAssistantDetails = new AssistantsDetails()
               {
                Root = "Diagram",
                Assistants = new string[] { "Component" }
               },
               Type = SubTreeAlignments.Alternate
              };
              DiagramLayout LayoutValue = new DiagramLayout() { };
              public class HierarchicalDetails
              {
                public string Name { get; set; }
                public string FillColor { get; set; }
                public string Category { get; set; }
              }
              public List<object> DataSource = new List<object>()
              {
                new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#659be5"},
              };
              protected override void OnInitialized()
              {
              LayoutValue = new DiagramLayout()
               {
                 LayoutInfo = this.LayoutInfo
               };
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Assistants">
            <summary>
            Defines the tree assistants.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.CanEnableSubTree">
            <summary>
            Enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Children">
            <summary>
            A string type that mentions the children.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.EnableRouting">
            <summary>
            A Boolean type that enables or disables routing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.GetAssistantDetails">
            <summary>
            Defines the behavior of assistant details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.HasSubTree">
            <summary>
            A Boolean type that enables or disables the sub tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.IsRootInverse">
            <summary>
            A Boolean type that enables or disables root inverse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Level">
            <summary>
            Sets the level for the tree. It is a double type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Offset">
            <summary>
            Sets the value of offset.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Orientation">
            <summary>
            Sets the orientation to horizontal or vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Rows">
            <summary>
            Sets the rows for a tree. It is a double type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.TreeInfo.Type">
            <summary>
            Defines the type of sub tree alignments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel">
            <summary>
            Represents the orthogonal segment type of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.AllowDrag">
            <summary>
            Defines the segment to be a drag or not. By default, it will be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.Direction">
            <summary>
            Sets the direction of the orthogonal segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.Length">
            <summary>
            Defines the length of the orthogonal segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OrthogonalSegmentModel.Type">
            <summary>
            Defines the type of the segment. By default, it will be Orthogonal.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BlazorConnectionObject">
            <summary>
            Represent the source node or target of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.BlazorConnectionObject.Connector">
            <summary>
            Returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.BlazorConnectionObject.ConnectorSourceValue">
            <summary>
            Defines the source node Id or Source port Id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.BlazorConnectionObject.ConnectorTargetValue">
            <summary>
            Defines the target node Id or target port Id of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ChangedObject">
            <summary>
            Represents the objects that have changed in the action such as undo, redo.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents PropertyChanged = "Changed" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Changed(IBlazorPropertyChangeEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null) && (args.Cause == DiagramAction.Render))
                   {
                       Console.WriteLine("Changed");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedObject.EntryType">
            <summary>
            Returns the type of entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedObject.NewValue">
            <summary>
            Returns the collection of objects that have changed in the last undo or redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedObject.OldValue">
            <summary>
            Returns the collection of objects, where each object represents the changes made in the last action such as undo, redo.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ChangedValues">
            <summary>
            Represents the objects’ position and size properties that have changed in the last action such as undo, redo.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents HistoryChanged = "History" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void History(IBlazorHistoryChangeArgs args)
               {
                   if ((args! = null) && (args.Action == HistoryChangeAction.CustomAction) && (args.Change != null) && (args.Source != null))
                   {
                       Console.WriteLine("Dragged");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.Height">
            <summary>
            Returns the object’s height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.OffsetX">
            <summary>
            Returns the object’s offsetX.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.OffsetY">
            <summary>
            Returns the object’s offsetY.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.RotateAngle">
            <summary>
            Returns the object’s RotateAngle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ChangedValues.Width">
            <summary>
            Returns the object’s width.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorValue">
            <summary>
            Represents the source and target id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorValue.NodeId">
            <summary>
            Defines the source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorValue.PortId">
            <summary>
            Defines the source or target port of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramClickEventObject">
            <summary>
            ClickedObject notifies whether it is node or connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClickEventObject.Diagram">
            <summary>
            Represents the interface for a class diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramClickEventObject.Selector">
            <summary>
            returns the selected items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation">
            <summary>
            DiagramObject is the interface for the diagram object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.ConnectorAnnotation">
            <summary>
            returns the  connector annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.NodeAnnotation">
            <summary>
            returns the  node annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.AnnotationId">
            <summary>
            returns the id of annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventAnnotation.TextNode">
            <summary>
            returns the  text node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventDropObject">
            <summary>
            DiagramDropObject notifies when the element is dropped in the diagram in blazor.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventDropObject.Connector">
            <summary>
            returns a connector objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventDropObject.DiagramId">
            <summary>
            returns a diagram objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventDropObject.Node">
            <summary>
            returns a node objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventObject">
            <summary>
            DiagramObject is the interface for the diagram object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.Connector">
            <summary>
            returns the  connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.Node">
            <summary>
            returns the  node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.NodeId">
            <summary>
            returns the id of annotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObject.ConnectorId">
            <summary>
            returns the id of connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramFixedUserHandle">
            <summary>
            DiagramFixedUserHandle is the interface for the connector fixed user handle and node fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFixedUserHandle.ConnectorFixedUserHandle">
            <summary>
            returns the  connector fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFixedUserHandle.NodeFixedUserHandle">
            <summary>
            returns the  node fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection">
            <summary>
            DiagramCollectionObject is the interface for the diagram objects.
            MouseEventElement notifies whether it is node or connector or selector model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Connector">
            <summary>
            returns the collection of connectors
            ObservableCollection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Connectors">
            <summary>
            returns the collection of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.NodeCollection">
            <summary>
            returns the collection of connector id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.ConnectorCollection">
            <summary>
            returns the collection of connector id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Node">
            <summary>
            returns the collection of node
            ObservableCollection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEventObjectCollection.Nodes">
            <summary>
            returns the collection of node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject">
            <summary>
            MouseEventElement notifies whether it is node or connector or selector model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject.Connector">
            <summary>
            returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject.Node">
            <summary>
            returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMouseEventObject.Selector">
            <summary>
            Defines the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject">
            <summary>
            Notifies whether the changed object is the node, connector or diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents PropertyChanged = "Changed" ></ DiagramEvents >
            </ SfDiagram >
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Changed(IBlazorPropertyChangeEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null) && (args.Cause == DiagramAction.Render))
                   {
                       Console.WriteLine("Changed");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject.Connector">
            <summary>
            Returns the connector when the connector properties were changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject.Diagram">
            <summary>
            Returns the diagram when diagram properties were changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPropertyChangeObject.Node">
            <summary>
            Returns the node when the node properties were changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject">
            <summary>
            Represents the object when the change is reverted, restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Connector">
            <summary>
            Returns the connector when changes are made in the connector history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Diagram">
            <summary>
            Returns the diagram when changes are made in the diagram history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Node">
            <summary>
            Returns the node when changes are made in the node history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Object">
            <summary>
            Returns the custom objects when changes are made in the custom objects otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.PathAnnotation">
            <summary>
            Returns a path annotation object when changes are made in the path annotation history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.PointPortModel">
            <summary>
            Returns a port object when changes are made in port history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.Selector">
            <summary>
            Returns the selected object when changes are made in selector history otherwise, it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HistoryChangeEventObject.ShapeAnnotation">
            <summary>
            Returns the shape annotation object when changes are made in shape annotation history otherwise, it returns null.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs">
            <summary>
            Notifies when clicking on an object or diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height=”600px” Nodes=”@NodeCollection">
               <DiagramEvents Clicked = "Clicked" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Clicked(IBlazorClickEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.Count == 1) && (args.Position != null) && (args.ActualObject != null))
                   {
                       Console.WriteLine("Clicked");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.ActualObject">
            <summary>
            Returns the object to be clicked on, or returns the diagram Id when the diagram clicks on.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Count">
            <summary>
            Returns number of times the object or diagram has clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Element">
            <summary>
            Returns the object or id of the diagram based on which has been clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Button">
            <summary>
            Returns which mouse button is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorClickEventArgs.Position">
            <summary>
            Returns the position of the clicked object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs">
            <summary>
            IBlazorCollectionChangeEventArgs notifies while the node/connector are added or removed in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Cancel">
            <summary>
            returns whether to cancel the change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Cause">
            <summary>
            returns the action of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Element">
            <summary>
            returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.State">
            <summary>
            returns the state of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCollectionChangeEventArgs.Type">
            <summary>
            returns the type of the collection change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs">
            <summary>
            Notifies when the connector’s source id or target id was changed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorCollection">
               <DiagramEvents OnConnectionChange = "ConnectionChange" ></ DiagramEvents >
            </ SfDiagram >
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               public void ConnectionChange(IBlazorConnectionChangeEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.Connector != null) && (args.ConnectorEnd != null) && (args.State == EventState.Changing) && (args.NewValue != null) && (args.OldValue != null))
                   {
                       Console.WriteLine("commandExecuted");
                   }
               }
               protected override void OnInitialized()
               {
                   DiagramConnector DiagramConnector = new DiagramConnector()
                   {
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                       Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                       ///Specify the segments types as straight.
                       Type = Segments.Straight,
                   };
                   ConnectorCollection.Add(DiagramConnector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.Cancel">
            <summary>
            Defines wether the user can prevent the connection or disconnection of the connector or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.Connector">
            <summary>
            Returns the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.ConnectorEnd">
            <summary>
            Returns the wether it is source end or target end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.NewValue">
            <summary>
            Returns the current source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.OldValue">
            <summary>
            Returns the previous source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorConnectionChangeEventArgs.State">
            <summary>
            Returns the state of connection endpoint dragging such as starting,  completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs">
            <summary>
            Notifies when a custom entry change is reverted or restored.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs.EntryType">
            <summary>
            Returns the type of entry such as undo, redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs.NewValue">
            <summary>
            Returns the collection of objects where each object represents changed made in current undo, redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorCustomHistoryChangeArgs.OldValue">
            <summary>
            Returns the collection of objects where each object represents changes made in last undo, redo.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs">
            <summary>
            Triggers while double click on the diagram or its objects.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnDoubleClick = "DoubleClick" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void DoubleClick(IBlazorDoubleClickEventArgs args)
               {
                   if ((args != null) && (args.Count == 2) && (args.Position != null) && (args.Source != null))
                   {
                       Console.WriteLine("doubleClick");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs.Count">
            <summary>
            Returns the number of times clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs.Position">
            <summary>
            Returns the object position that is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDoubleClickEventArgs.Source">
            <summary>
            Returns the object that is clicked or id of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs">
            <summary>
            Triggers when the element entered in the diagram from the symbol palette.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette id = "palettes" Height="600px"  SymbolWidth="100" SymbolHeight="100">
               <SymbolPalettePalettes>
                   <SymbolPalettePalette Id = "flow" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Flow Shapes">
                   </SymbolPalettePalette>
               </SymbolPalettePalettes>
            </SfSymbolPalette>
            <SfDiagram Height="600px"  >
               <DiagramEvents DragEnter = "DragEnter" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public void DragEnter(IBlazorDragEnterEventArgs args)
               {
                   if ((args != null) && (args.Element != null))
                   {
                       Console.WriteLine("Dragged");
                   }
               }
               public ObservableCollection<DiagramNode> BasicShapes { get; set; } = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode BasicShape1 = new DiagramNode()
                   {
                       Id = "child1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Rectangle }
                   };
                   BasicShapes.Add(BasicShape1);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent drag event or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.DiagramId">
            <summary>
            Returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.Element">
            <summary>
            Returns the element of the diagram, such as the node, the connector that is to be dragged into the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragEnterEventArgs.Source">
            <summary>
            Returns the element of the diagram, such as the node, the connector that is to be dragged into the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDragLeaveEventArgs">
            <summary>
             Notifies when the elements leave from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragLeaveEventArgs.DiagramId">
            <summary>
            Returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDragLeaveEventArgs.Element">
            <summary>
            Returns the element of the diagram, such as the node, the connector that is dragged outside of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs">
            <summary>
            Notifies when the node or connector is dragged.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnPositionChange = "PositionChanged" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void PositionChanged(IBlazorDraggingEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.State == State.Completed))
                   {
                       Console.WriteLine("Dragging");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.AllowDrop">
            <summary>
            Defines the object that can be dropped over another element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.Cancel">
            <summary>
            Defines if the user can prevent dragging of element over the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.NewValue">
            <summary>
            Returns the current node or connector that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.OldValue">
            <summary>
            Returns the previous node or connector that has dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.Source">
            <summary>
            Returns the node or connector that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.State">
            <summary>
            Returns the current action of the dragged element such as starting, dragging, completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.Target">
            <summary>
            Returns the node or connector that has dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDraggingEventArgs.TargetPosition">
            <summary>
            Returns the position of the Target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs">
            <summary>
            Notifies when the element is dropped in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette id="palettes" Height="600px" SymbolWidth="100" SymbolHeight="100">
               <SymbolPalettePalettes>
                   <SymbolPalettePalette Id = "flow" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Flow Shapes">
                   </SymbolPalettePalette>
               </SymbolPalettePalettes>
            </SfSymbolPalette>
            <SfDiagram Height="600px">
               <DiagramEvents OnDrop = "Drop" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public void Drop(IBlazorDropEventArgs args)
               {
                   if ((args != null))
                   {
                       Console.WriteLine("Drop");
                   }
               }
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public ObservableCollection<DiagramNode> BasicShapes { get; set; } = new ObservableCollection<DiagramNode>();
               protected override void OnInitialized()
               {
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                         // An annotation is created and stored in an Annotation collection of Node.
                          new DiagramNodeAnnotation() { Content = "Offset(0,0)", Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                       }
                   };
                   NodeCollection.Add(Node);
                   DiagramNode BasicShape1 = new DiagramNode()
                   {
                       Id = "child1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Rectangle }
                   };
                   BasicShapes.Add(BasicShape1);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Cancel">
            <summary>
            Returns whether the event is canceled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Element">
            <summary>
            Returns the element such as node, connector that is being dropped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Position">
            <summary>
            Returns the position of the object that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Source">
            <summary>
            Returns the object from where the object such as node, connector is dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorDropEventArgs.Target">
            <summary>
            Returns the object over which the object such as node, connector is dropped.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs">
            <summary>
            Notifies when the change is reverted, restored or any custom actions detected in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
               <SfDiagram Height = "600px" Nodes="@NodeCollection">
               <DiagramEvents HistoryChanged = "History" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void History(IBlazorHistoryChangeArgs args)
               {
                   if ((args != null) && (args.Action == HistoryChangeAction.CustomAction) && (args.Change != null) && (args.Source != null))
                   {
                       Console.WriteLine("Dragged");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Action">
            <summary>
            Returns the action of an element such as undo, redo, or any custom action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Cause">
            <summary>
            Returns the cause of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Change">
            <summary>
            Returns the collection of objects that have changed in the last action such as undo, redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorHistoryChangeArgs.Source">
            <summary>
            Returns the collection of objects that have changed in the last action such as undo, redo.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs">
            <summary>
            Notifies when the mouse events such as mouse enter, mouse leave, and mouseover are detected.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Blazor Property: MouseEnter</td>
            <td style = "border:none">Triggers when the mouse enters a node or connector</td>
            </tr>
            <tr>
            <td style = "border:none">Blazor Property: MouseLeave</td>
            <td style = "border:none">Triggers when the mouse leave from  the node or connector</td>
            </tr>
            <tr>
            <td style = "border:none">The following code shows how to define MouseEnter event.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
                   < DiagramEvents MouseEnter="Enter"></DiagramEvents>
            </SfDiagram>
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Enter(IBlazorMouseEventArgs args)
               {
                   if ((args != null) && (args.Element == null) && (args.ActualObject != null) && (args.Targets != null))
                   {
                       Console.WriteLine("Entered");
                   }
               }
               protected override void OnInitialized()
               {
                   /// A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs.ActualObject">
            <summary>
            Returns the object such as node or connector when the mouse hovers over the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs.Element">
            <summary>
            Returns the parent of the target node or connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorMouseEventArgs.Targets">
            <summary>
            Returns the target object over which the selected object is dragged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs">
            <summary>
            Notifies when the node, connector, or diagram property has changed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents PropertyChanged = "Changed" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Changed(IBlazorPropertyChangeEventArgs args)
               {
                   if ((args != null) && (args.Element != null) && (args.NewValue != null) && (args.OldValue != null) && (args.Cause == DiagramAction.Render))
                   {
                       Console.WriteLine("Changed");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.Cause">
            <summary>
            Returns the cause of the event whether it nudge or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.Element">
            <summary>
            Returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.NewValue">
            <summary>
            Returns the new value of the node or connectors property that is being changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorPropertyChangeEventArgs.OldValue">
            <summary>
            Returns the old value of the node or connector’s property that is being changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs">
            <summary>
            IBlazorSegmentCollectionChangeEventArgs notifies while the segment of the connectors changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.AddSegments">
            <summary>
            returns the action of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.Cancel">
            <summary>
            returns whether to cancel the change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.Element">
            <summary>
            returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.RemoveSegments">
            <summary>
            returns the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSegmentCollectionChangeEventArgs.Type">
            <summary>
            returns the type of the collection change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs">
            <summary>
            Notifies when select or deselect any objects from the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramEvents SelectionChanged = "Selection" ></ DiagramEvents >
            </ SfDiagram >
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Selection(IBlazorSelectionChangeEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.State == EventState.Changed) && (args.NewValue != null))
                   {
                       Console.WriteLine("Edited");
                   }
               }
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.Cancel">
            <summary>
            Users can define whether the element can be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.Cause">
            <summary>
            Returns the actual cause of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.NewValue">
            <summary>
            Returns the selected element after the event has triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.OldValue">
            <summary>
            Returns the last selected elements, it's empty if previously, not objects have selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.State">
            <summary>
            Triggers before and after adding the selection to the object
            in the diagram which can be differentiated through `state` argument.
            We can cancel the event only before the selection of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorSelectionChangeEventArgs.Type">
            <summary>
            Returns whether the item is added or removed from the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs">
            <summary>
            Notifies when the label of an element undergoes editing.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramEvents TextEdited = "TextEdited" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void TextEdited(IBlazorTextEditEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.Annotation != null) && (args.Element != null))
                   {
                       Console.WriteLine("Edited");
                   }
               }
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                         // An annotation is created and stored in an Annotation collection of Node.
                          new DiagramNodeAnnotation() { Content = "Offset(0,0)", Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.Annotation">
            <summary>
            Returns the annotation which is being edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.Cancel">
            <summary>
            Users can define whether the annotation can be edit or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.Element">
            <summary>
            Returns the element such as node or connector in which the label is being edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.NewValue">
            <summary>
            Returns the new text value of the element which has edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IBlazorTextEditEventArgs.OldValue">
            <summary>
            Returns the old text value of the element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ICommandExecuteEventArgs">
            <summary>
            Notifies when a command executed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnCommandExecuted = "CommandExecute" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void CommandExecute(ICommandExecuteEventArgs args)
               {
                   if ((args != null))
                   {
                       Console.WriteLine("commandExecuted");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ICommandExecuteEventArgs.Gesture">
            <summary>
            Returns the key value and key modifier value when command gets executed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IConnectorInitEventArgs">
            <summary>
            IConnectorInitEventArgs notifies when the connector is initiated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IConnectorInitEventArgs.Element">
            <summary>
            returns connector that is being changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDataLoadedEventArgs">
            <summary>
            IDataLoadedEventArgs defines the event arguments after data is loaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDataLoadedEventArgs.Diagram">
            <summary>
            returns the id of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDragLeaveEventArgs">
            <summary>
            IDragLeaveEventArgs notifies when the element leaves from  the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragLeaveEventArgs.Diagram">
            <summary>
            returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragLeaveEventArgs.Element">
            <summary>
            returns the node or connector that is dragged outside of the diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDragOverEventArgs">
            <summary>
            IDragOverEventArgs notifies when an element drag over another diagram element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.Diagram">
            <summary>
            returns the id of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.Element">
            <summary>
            returns the node or connector that is dragged over diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.MousePosition">
            <summary>
            returns the mouse position of the node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDragOverEventArgs.Target">
            <summary>
            returns the node/connector over which the symbol is dragged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IKeyEventArgs">
            <summary>
            Notifies while performing key actions.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Blazor property: OnKeyUP</td>
            <td style = "border:none">Triggers when the user releases the key</td>
            </tr>
            <tr>
            <td style = "border:none">Blazor property: OnKeyDown</td>
            <td style = "border:none">Triggers when the user press the key</td>
            </tr>
            <tr>
            <td style = "border:none">The following code demonstrates how to define IKeyEvent and OnKeyDown property</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnKeyDown = "Down" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Down(IKeyEventArgs args)
               {
                   if ((args != null) && (args.Key != null) && (args.KeyCode != null) && (args.Label != null) && (args.Text != null))
                   {
                       Console.WriteLine("Entered");
                   }
               }
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node array.
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Height = 100,
                       Width = 100,
                       OffsetX = 300,
                       OffsetY = 100,
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                       {
                         // An annotation is created and stored in an Annotation collection of Node.
                          new DiagramNodeAnnotation() { Content = "Offset(0,0)", Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                       }
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Element">
            <summary>
            Returns the selected element of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Key">
            <summary>
            Returns the value of the key action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.KeyCode">
            <summary>
            Returns a number that represents the actual key pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.KeyModifiers">
            <summary>
            Returns any, modifier keys were pressed when the flick gesture occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Label">
            <summary>
            Returns the label which is being edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Target">
            <summary>
            Returns the Id of the text box element in an editing mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IKeyEventArgs.Text">
            <summary>
            Returns the text content of the label which is currently editing.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IPaletteSelectionChangeArgs">
            <summary>
            IPaletteSelectionChangeArgs notifies when the selection objects change in the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPaletteSelectionChangeArgs.NewValue">
            <summary>
            returns the new palette item that is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPaletteSelectionChangeArgs.OldValue">
            <summary>
            returns the old palette item that is selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IRotationEventArgs">
            <summary>
            Notifies when the selected element has rotated.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramEvents OnRotateChange = "Rotate" ></ DiagramEvents >
            </ SfDiagram >
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Rotate(IRotationEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.Cancel == false) && (args.State == State.Completed) && (args.Source != null) && (args.NewValue != null))
                   {
                       Console.WriteLine("Rotated");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                  {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.Cancel">
            <summary>
            Users can define whether the selected node can be edit or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.NewValue">
            <summary>
            Returns the element with the new rotation angle after the event has triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.OldValue">
            <summary>
            Returns the element with the old size property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.Source">
            <summary>
            Returns the element which has selected for the rotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IRotationEventArgs.State">
            <summary>
            Returns the state of the event such as start, completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs">
            <summary>
            Notifies when the element is being resized.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
                   <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
                   < DiagramEvents OnSizeChange="Size"></DiagramEvents>
            </SfDiagram>
            @code
               {
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public void Size(ISizeChangeEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.State == State.Completed) && (args.Source != null) && (args.NewValue != null))
                   {
                       Console.WriteLine("Resized");
                   }
               }
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>()
                   {
                       new DiagramNode(){
                           Id="node1",
                           Height = 100,
                           Width = 100,
                           OffsetX = 300,
                           OffsetY = 100
                       },
                   };
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.Cancel">
            <summary>
            Users can define whether the selected node can be resized or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.NewValue">
            <summary>
            Returns the element with new size property after the event has triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.OldValue">
            <summary>
            Returns the element with the old size property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.Source">
            <summary>
            Returns the element which has selected for the resizing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISizeChangeEventArgs.State">
            <summary>
            Returns the state of the event such as start, completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ScrollValues">
            <summary>
            Specifies the functionalities of the diagram scroll bar.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramScrollSettings CurrentZoom = "2" HorizontalOffset="20" VerticalOffset="20" ViewPortHeight="20" ViewPortWidth="20">
               </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.CurrentZoom">
            <summary>
            Defines the current close-up view of the diagram. By default, CurrentZoom is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.HorizontalOffset">
            <summary>
            Sets the value of the horizontal scroll offset. By default, the HorizontalOffset is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.VerticalOffset">
            <summary>
            Sets the value of the vertical scroll offset. By default, the VerticalOffset is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.ViewportHeight">
            <summary>
            Sets the height of the user-visible area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ScrollValues.ViewportWidth">
            <summary>
            Sets the width of the user-visible area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UserHandleEventsArgs">
            <summary>
            Notifies when the mouse events such as mouse enter, mouse leave, mouse down, mouse up carried on the user handle.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none;font-weight: bold;">Property</td>
            <td style = "border:none;font-weight: bold;">Descriptions</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseDown</td>
            <td style = "border:none">Triggers when the mouseDown on the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseUp</td>
            <td style = "border:none">Triggers when the mouseUp on the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseEnter</td>
            <td style = "border:none">Triggers when the mouseEnter on the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">OnUserHandleMouseLeave</td>
            <td style = "border:none">Triggers when the mouseLeave from the user handle.</td>
            </tr>
            <tr>
            <td style = "border:none">The following code shows how to define OnUserHandleMoudeDown property.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" SelectedItems="@SelectedModel">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
               < DiagramEvents OnUserHandleMouseDown="MouseDown"></DiagramEvents>
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines diagram's SelectedItems
               public Syncfusion.Blazor.Diagrams.DiagramSelectedItems SelectedModel { get; set; }
               ObservableCollection<DiagramUserHandle> UserHandles { get; set; }
               public void MouseDown(UserHandleEventsArgs args)
               {
                   if ((args != null) && (args.Element != null))
                   {
                       Console.WriteLine("MouseDown");
                   }
               }
               protected override void OnInitialized()
               {
                   //Creating the user handle for cloning the objects
                   DiagramUserHandle CloneHandle = new DiagramUserHandle()
                   {
                       //Name of the user handle
                       Name = "clone",
                       //Set pathdata for userhandle
                       PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z",
                   };
                   //Add user handle to the user handle collection
                   UserHandles = new ObservableCollection<DiagramUserHandle>()
                   {
                       CloneHandle
                   };
                   SelectedModel = new Syncfusion.Blazor.Diagrams.DiagramSelectedItems()
                   {
                       //Enable user handle for selected items...
                       Constraints = SelectorConstraints.UserHandle,
                       UserHandles = this.UserHandles
                   };
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                   };
                   NodeCollection.Add(DiagramNode);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.UserHandleEventsArgs.Element">
            <summary>
            Returns the user handle object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FixedUserHandleClickEventArgs">
            <summary>
            Notifies when the mouse up carried on the fixed user handle.
            </summary>
            <remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection" @ref="diagram">
              <DiagramEvents FixedUserHandleClick = "Changed" ></ DiagramEvents >
            </ SfDiagram >
              @code{
                 SfDiagram diagram;
                // Defines diagram's nodes collection
                public ObservableCollection<DiagramNode> NodeCollection { get; set; }
                public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
                public async void Changed(FixedUserHandleClickEventArgs args)
                {
                 if (args.Element.Connector.Id == "connector1" && args.FixedUserHandle.ConnectorFixedUserHandle.Id == "user3")
                 {
                   await diagram.Remove();
                 }
                 else if (args.Element.Connector.Id == "connector1" && args.FixedUserHandle.ConnectorFixedUserHandle.Id == "user4")
                 {
                    await diagram.Copy();
                    await diagram.Paste();
                  }
                }
               protected override void OnInitialized()
               {
                ConnectorCollection = new ObservableCollection<DiagramConnector>();
                DiagramConnector connector1 = new DiagramConnector()
                {
                  // Unique name for the connector
                  Id = "connector1",
                  // Source and Target node's name to which connector needs to be connected.
                  SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 50 },
                  TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 150 },
                  Type = Segments.Orthogonal,
                  FixedUserHandles = new ObservableCollection<DiagramConnectorFixedUserHandle>()
                  {
                    new DiagramConnectorFixedUserHandle() { Id = "user3",Height = 20, Width = 20, Offset = 1,Visibility = true,Alignment = FixedUserHandleAlignment.Before,Displacement = new ConnectorDisplacementPoint{X = 5, Y = 5 }, PathData = "M18.693,3.338h-1.35l0.323-1.834c0.046-0.262-0.027-0.536-0.198-0.739c-0.173-0.206-0.428-0.325-0.695-0.325 H3.434c-0.262,0-0.513,0.114-0.685,0.312c-0.173,0.197-0.25,0.46-0.215,0.721L2.79,3.338H1.307c-0.502,0-0.908,0.406-0.908,0.908 c0,0.502,0.406,0.908,0.908,0.908h1.683l1.721,13.613c0.057,0.454,0.444,0.795,0.901,0.795h8.722c0.458,0,0.845-0.34,0.902-0.795 l1.72-13.613h1.737c0.502,0,0.908-0.406,0.908-0.908C19.601,3.744,19.195,3.338,18.693,3.338z M15.69,2.255L15.5,3.334H4.623 L4.476,2.255H15.69z M13.535,17.745H6.413L4.826,5.193H15.12L13.535,17.745z" },
                    new DiagramConnectorFixedUserHandle() { Id = "user4",Height = 25, Width = 25, Offset = 0.5,Visibility = true,Alignment = FixedUserHandleAlignment.After,Displacement = new ConnectorDisplacementPoint{X = 5, Y = 5 }, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                  },
                };
              ConnectorCollection.Add(connector1);
              NodeCollection = new ObservableCollection<DiagramNode>();
              DiagramNode node1 = new DiagramNode()
              {
                Id = "node1",
                OffsetX = 100,
                OffsetY = 100,
                Width = 100,
                Height = 100,
                FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                {
                  new DiagramNodeFixedUserHandle() { Id = "user1",Height = 20, Width = 20, Visibility = true, Margin = new NodeMargin(){ Right = 20} ,Offset = new IconOffset() { X = 0, Y = 0 }, PathData = "M18.693,3.338h-1.35l0.323-1.834c0.046-0.262-0.027-0.536-0.198-0.739c-0.173-0.206-0.428-0.325-0.695-0.325 H3.434c-0.262,0-0.513,0.114-0.685,0.312c-0.173,0.197-0.25,0.46-0.215,0.721L2.79,3.338H1.307c-0.502,0-0.908,0.406-0.908,0.908 c0,0.502,0.406,0.908,0.908,0.908h1.683l1.721,13.613c0.057,0.454,0.444,0.795,0.901,0.795h8.722c0.458,0,0.845-0.34,0.902-0.795 l1.72-13.613h1.737c0.502,0,0.908-0.406,0.908-0.908C19.601,3.744,19.195,3.338,18.693,3.338z M15.69,2.255L15.5,3.334H4.623 L4.476,2.255H15.69z M13.535,17.745H6.413L4.826,5.193H15.12L13.535,17.745z" },
                  new DiagramNodeFixedUserHandle() { Id = "user2",Height = 20, Width = 20, Visibility = true, Margin = new NodeMargin(){ Left = 20} ,Offset = new IconOffset() { X = 1, Y = 0 }, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                 },
                Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
               };
              NodeCollection.Add(node1);
             }
             ]]>
             </code>
            </example>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FixedUserHandleClickEventArgs.Element">
            <summary>
            Returns the node or connector in whixh the fixed user handle is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FixedUserHandleClickEventArgs.FixedUserHandle">
            <summary>
            Returns fixed user handle which is clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ColorValue">
            <summary>
            Represents the intensity of the color as an integer between 0 to 225.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ColorValue.B">
            <summary>
            Defines the intensity of the blue color as an integer between 0 and 255.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ColorValue.G">
            <summary>
            Defines the intensity of the green color as an integer between 0 and 255.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ColorValue.R">
            <summary>
            Defines the intensity of the red color as an integer between 0 and 255.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ContextMenuItemModel">
            <summary>
            Represents the custom context menu items.
            </summary>
            <remarks>
            The custom context menu provides an option to add the new custom items to the context menu. Those additional custom items have to be defined and added to the Items property of the context menu.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
              // Defines context menu and set the ShowCustomMenuOnly to false to render the custom context menu along with the default context menu
              <DiagramContextMenuSettings Show = "true" Items="@ContextMenuItemModels"  ShowCustomMenuOnly="true">
              </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
              //Defines diagram's nodes collection
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
              public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
              protected override void OnInitialized()
              {
                  //Create a node
                  DiagramNode Node = new DiagramNode()
                 {
                    OffsetX = 100,
                    OffsetY = 100,
                    Height = 100,
                    Width = 100,
                    Id = "node1",
                    Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Ellipse },
                    Style = new NodeShapeStyle()
                    {
                        Fill = "#6BA5D7",
                        StrokeColor = "#6BA5D7",
                     },
                  };
                  //Add node into node's collection
                  NodeCollection.Add(Node);
                 }
                // Add the custom context menu items
                List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
                {
                  new ContextMenuItemModel()
                  {
                    Text ="color",
                    Id="Save",
                    Target =".e-elementcontent1",
                    // Add the nested custom context menu items
                    Items = new List<ContextMenuItemModel>()
                    {
                      new ContextMenuItemModel(){  Text ="Red", Id="Red", Separator = true },
                      new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow", Separator = true },
                      new ContextMenuItemModel(){  Text ="Green", Id="Green", IconCss = "e-save", Separator = true }
                    }
                  },
                };
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.IconCss">
            <summary>
            This property is used to include an icon to the context menu item.
            </summary>
            <remarks>
            The IconCss property defines the class/multiple classes separated by a space for the menu item that is used to include an icon. A menu item can include a font icon and sprite image.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Id">
            <summary>
            Returns the unique id of the menu item.
            </summary>
            <remarks>
            Menu item Id needs to be unique to use. When creating a menu item, the user should not provide the same id to other menu items.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Items">
            <summary>
            This property enables users to add custom context menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Separator">
            <summary>
            Defines the horizontal line used to separate the menu items. Users can enable or disable the separator to group the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Target">
            <summary>
            Defines the target to show the menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Text">
            <summary>
            This property allows the users to set the text for a menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Hidden">
            <summary>
            This property allows the users to set the text for a menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ContextMenuItemModel.Url">
            <summary>
            Specifies URL for the menu item that creates the anchor link to navigate to the URL provided.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs">
            <summary>
            Triggers before opening the context menu.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
               <DiagramEvents OnContextMenuOpen = "Open" ></ DiagramEvents >
               < DiagramContextMenuSettings Show="true" Items="@ContextMenuItemModels" ShowCustomMenuOnly="true">
               </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
               //Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
               public void Open(DiagramBeforeMenuOpenEventArgs args)
               {
                   args.Cancel = true;
                   if ((args != null) && (args.Element != null) && (args.Event != null) && (args.Items != null))
                   {
                       Console.WriteLine("MenuOpen");
                   }
               }
               protected override void OnInitialized()
               {
                   //Create a node
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 100,
                       OffsetY = 100,
                       Height = 100,
                       Width = 100,
                       Id = "node1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Ellipse },
                       Style = new NodeShapeStyle()
                       {
                           Fill = "#6BA5D7",
                           StrokeColor = "#6BA5D7",
                       },
                   };
                   //Add node into node's collection
                   NodeCollection.Add(Node);
               }
               // Add the custom context menu items
               List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
               {
                   new ContextMenuItemModel()
                   {
                       Text ="color",
                       Id="Save",
                       Target =".e-elementcontent1",
                       // Add the nested custom context menu items
                       Items = new List<ContextMenuItemModel>()
                       {
                           new ContextMenuItemModel(){  Text ="Red", Id="Red"},
                           new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow"},
                           new ContextMenuItemModel(){  Text ="Green", Id="Green" }
                       }
                   },
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent the context menu opening.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Element">
            <summary>
            Returns which element has been clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Event">
            <summary>
            Returns event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.HiddenItems">
            <summary>
            Returns the array of hidden context menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Items">
            <summary>
            Return the context menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Left">
            <summary>
            Returns the left position value of the clicked menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.ParentItem">
            <summary>
            Returns the parent menu items if the sub-menu opens.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBeforeMenuOpenEventArgs.Top">
            <summary>
            Returns the top position value of the clicked menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs">
            <summary>
            Triggers when a context menu item clicked.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="@DiagramConstraints">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
               < DiagramEvents ContextMenuItemClicked="ItemClicked"></DiagramEvents>
               <DiagramContextMenuSettings Show = "true" Items="@ContextMenuItemModels" ShowCustomMenuOnly="true">
               </DiagramContextMenuSettings>
            </SfDiagram>
            @code
            {
               ///Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
               public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
               public void ItemClicked(DiagramMenuEventArgs args)
               {
                   args.Cancel = false;
                   if ((args != null) && (args.Element != null) && (args.Event != null) && (args.Item != null) && (args.Name != null))
                   {
                       Console.WriteLine("commandExecuted");
                   }
               }
               protected override void OnInitialized()
               {
                   ///Create a node
                   DiagramNode Node = new DiagramNode()
                   {
                       OffsetX = 100,
                       OffsetY = 100,
                       Height = 100,
                       Width = 100,
                       Id = "node1",
                       Shape = new DiagramShape() { Type = Syncfusion.Blazor.Diagrams.Shapes.Basic, BasicShape = BasicShapes.Ellipse },
                       Style = new NodeShapeStyle()
                       {
                           Fill = "#6BA5D7",
                           StrokeColor = "#6BA5D7",
                       },
                   };
                   ///Add node into node's collection
                   NodeCollection.Add(Node);
               }
               List<ContextMenuItemModel> ContextMenuItemModels = new List<ContextMenuItemModel>()
               {
                   new ContextMenuItemModel()
                   {
                       Text ="color",
                       Id="Save",
                       Target =".e-elementcontent1",
                       /// Add the nested custom context menu items
                       Items = new List<ContextMenuItemModel>()
                       {
                           new ContextMenuItemModel(){  Text ="Red", Id="Red"},
                           new ContextMenuItemModel(){  Text ="Yellow", Id="Yellow"},
                           new ContextMenuItemModel(){  Text ="Green", Id="Green" }
                       }
                   },
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Cancel">
            <summary>
            Defines whether the user can prevent action when clicking on the menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Element">
            <summary>
            Returns the clicked menu item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Event">
            <summary>
            Returns the event when the menu item is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Item">
            <summary>
            Returns the clicked menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramMenuEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IExportOptions">
            <summary>
            Provides support to export the diagram content to various file format.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<input type="button" value="Export" @onclick="@OnExport" />
            <SfDiagram ID = "diagram" Height="600px" @ref="@Diagram">
            </SfDiagram>
            @code {
              SfDiagram Diagram;
              private void OnExport()
               {
                //Sets the export option for diagram
                IExportOptions Options = new IExportOptions()
                {
                  //Sets the Mode for diagram export
                  Mode = ExportModes.Data,
                  //Sets the custom bound for diagram export
                  Bounds = new exportBounds() { x = 10, y = 10, width = 100, height = 100 },
                  Format = FileFormats.SVG
                };
                Diagram.ExportDiagram(Options);
               }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Bounds">
            <summary>
            Defines the specific region to be exported from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.FileName">
            <summary>
            Sets the name of the file to be downloaded.
            </summary>
            <remarks>
            By default, the FileName is set to Diagram.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
             {
                FileName = "format",
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Format">
            <summary>
            Sets the file format to be downloaded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Margin">
            <summary>
            Defines the amount of space that has to be left around the diagram.
            </summary>
            <remarks>
            By default, the margin is set to 0 in all the four sides.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
            {
               Margin = new Syncfusion.Blazor.Diagrams.MarginModel() { Left = 10, Right = 10, Bottom = 10, Top = 10 }
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Mode">
            <summary>
            Sets export mode to diagram content either download or some data format.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
            {
              Mode = ExportModes.Download,
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.MultiplePage">
            <summary>
            Defines whether the diagram must be exported as single or multiple images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PageHeight">
            <summary>
            Sets the height of the page to be printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[     IExportOptions Options = new IExportOptions()
             {
               PageHeight = 400,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PageOrientation">
            <summary>
            Sets the orientation of the page to be printed as either landscape or portrait.
            </summary>
            <remarks>
            By default, the PageOrientation is set to Landscape.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
             {
              PageOrientation= PageOrientation.Landscape
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PageWidth">
            <summary>
            Sets the width of the page to be printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
            {
             PageWidth = 400,
            };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.PrintOptions">
            <summary>
            Sets the property of print options to be printed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Region">
            <summary>
            Defines to export any particular region of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IExportOptions Options = new IExportOptions()
             {
             Region = DiagramRegions.CustomBounds,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IExportOptions.Stretch">
            <summary>
            Sets the aspect ratio for the image.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[     IExportOptions Options = new IExportOptions()
             {
                Stretch = Stretch.None,
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IFitOptions">
            <summary>
            Represents the diagram content can be fit within the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.CanZoomIn">
            <summary>
            Allows the user to enable or disable the zooming, to insert the smaller content into the larger viewport.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.CustomBounds">
            <summary>
            Defines the custom region that can be fit into the viewport.
            </summary>
            <remarks>
            CustomBounds depends on region property of IFitOptions. It will take the bounds of the region as a customBounds.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.Margin">
            <summary>
            Defines the page to be left between the viewport and the content. By default, it will be 25 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.Mode">
            <summary>
            Defines whether the diagram is horizontally or vertically fit into the viewport.
            </summary>
            <remarks>
             The mode has the following three options. They are Page, Width, and Height. Users can customize the Mode property by choosing any one of the above options. By default, the Mode will be Page.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IFitOptions.Region">
            <summary>
            Defines the region that can be fit into the viewport.
            </summary>
            <remarks>
            The region has the following three options. They are PageSettings, Content, CustomBounds. By default, the region will be PageSettings.
            </remarks>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IPrintOptions">
            <summary>
            Provides support to print the diagram content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[@using Syncfusion.Blazor.Diagrams
            <input type = "button" value="Print" @onclick="@OnPrint" />
            <SfDiagram @ref = "@Diagram" >
            </ SfDiagram >
            @code{
             SfDiagram Diagram;
             private void OnPrint()
             {
               //Sets the print option for diagram
               IPrintOptions Options = new IPrintOptions()
               {
                 MultiplePage = true,
                 Margin = new Syncfusion.Blazor.Diagrams.MarginModel()
                 {
                    Bottom = 10,
                    Top = 10,
                    Left = 10,
                    Right = 10
                 },
                 PageOrientation = PageOrientation.Landscape,
                 //Set the Stretch to Slice here
                 Stretch = Stretch.Slice
                }
               Diagram.Print(Options);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.Margin">
            <summary>
            Sets the margin of the page to be printed.
            </summary>
            <remarks>
            By default, the margin is set to 0 in all the four sides.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.MultiplePage">
            <summary>
            Defines whether the diagram has to be exported as single or multiple images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.PageHeight">
            <summary>
            It sets the height of the page to be printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IPrintOptions Options = new IPrintOptions()
             {
                PageHeight = 400,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.PageOrientation">
            <summary>
            Sets the orientation of the page to be printed as Landscape or Portrait.
            </summary>
            <remarks>
            By default, PageOrientation is set to Landscape.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.PageWidth">
            <summary>
            Sets the width of the page to be printed. printed.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ IPrintOptions Options = new IPrintOptions()
             {
                PageWidth = 400,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.Region">
            <summary>
            Sets any particular region of the diagram to be exported. By default, Region is set to PageSettings.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[IPrintOptions Options = new IPrintOptions()
             {
                Region = DiagramRegions.PageSettings,
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IPrintOptions.Stretch">
            <summary>
            Sets the aspect ratio for the image to be printed. By default, Stretch is set to Stretch.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ZoomOptions">
            <summary>
            Represents the scaling of diagram control by the given factor.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <input type="button" value="Zoom" @onclick="@OnZoom" />
            <input type = "button" value="Zoom To" @onclick="@OnZoomRegion" />
            <SfDiagram @ref = "@Diagram" Height="600px" Nodes="@NodeCollection" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               SfDiagram Diagram;
               public ObservableCollection<DiagramNode> NodeCollection;
               public ObservableCollection<DiagramConnector> ConnectorCollection;
               public ObservableCollection<DiagramLayer> LayersCollection;
               protected override void OnInitialized()
               {
                   // A node is created and stored in the node's collection.
                   NodeCollection = new ObservableCollection<DiagramNode>(){
                       new DiagramNode()
                       {
                           Id = "Node1",
                           // Position of the node
                           OffsetX = 250, OffsetY = 250,
                           // Size of the node
                           Width = 100, Height = 100,
                           Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                       }
                   };
                   ConnectorCollection = new ObservableCollection<DiagramConnector>()
                   {
                       new DiagramConnector()
                       {
                           Id = "Connector1",
                           SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 100 },
                           TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 200 },
                           Type = Segments.Orthogonal
                       }
                   };
               }
               // Zoom the diagram
               public void OnZoom()
               {
                   Diagram.Zoom(0.5);
               }
               public void OnZoomRegion()
               {
                   ZoomOptions Options = new ZoomOptions() { FocusPoint = new PointModel() { X = 100, Y = 100 }, Type = ZoomTypes.ZoomIn, ZoomFactor = 2.5 };
                   Diagram.ZoomTo(Options);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ZoomOptions.FocusPoint">
            <summary>
            It allows the user to read the focus value of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ZoomOptions.Type">
            <summary>
            Defines the zoom type as zoom in or zoom out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ZoomOptions.ZoomFactor">
            <summary>
            Sets the factor by which we can zoom in or zoom out.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SelectorModel">
            <summary>
            Represents the collection of selected items in the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Connectors">
            <summary>
            Get the collection of selected connector objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Constraints">
            <summary>
            The constraints property is used to enable or disable certain behaviors of the Selected Items. .
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">This property controls the visibility of the selector.   </td>
            </tr>
            <tr>
            <td style = "border: none">Users can able to control the resize, user handles behaviors, etc. </td>
            </tr>
            <tr>
            <td style = "border: none"> By default, the constraints will be SelectorConstraints.All. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Height">
            <summary>
            Gets the height of the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Nodes">
            <summary>
            Gets the collection of selected node objects in the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.OffsetX">
            <summary>
            Gets the X coordinate position of the selected region.  Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.OffsetY">
            <summary>
            Gets the Y coordinate position of the selected region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Pivot">
            <summary>
            Gets the position(X,Y) to the selector .By default, this will be (0.5,0.5) to the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.RotateAngle">
            <summary>
            Gets the rotate angle of the selection area. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.RubberBandSelectionMode">
            <summary>
            Specifies whether the diagram objects can be selected, when the selection region intersects the objects or selected only when the complete object's bounds inside the selection region.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">This property has two options. They are    </td>
            </tr>
            <tr>
            <td style = "border: none">CompleteIntersect  </td>
            </tr>
            <tr>
            <td style = "border: none"> PartialIntersect  </td>
            </tr>
            <tr>
            <td style = "border: none"> By default, this Mode will be CompleteIntersect.  </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.UserHandles">
            <summary>
            Defines the collection of UserHandle objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorModel.Width">
            <summary>
            Gets the width of the selection region. Its value may vary based on the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolSizeModel">
            <summary>
            Specifies the size of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
              <div style="width: 200px; float: left">
                   <SfSymbolPalette Height = "600px" @ref="@SymbolPalette" Palettes="@Palettes">
                   </SfSymbolPalette>
               </div>
               <SfDiagram ID = "diagram" @ref="@Diagram" Width="500px" Height="600px">
            </SfDiagram>
            @code{
                   SfDiagram Diagram;
               SfSymbolPalette SymbolPalette;
               public ObservableCollection<Object> Connectors { get; set; }
               public ObservableCollection<SymbolPalettePalette> Palettes;
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   //Initializes connector symbols for the symbol palette
                   Connectors = new ObservableCollection<Object>()
                                   {
                                   new DiagramConnector()
                       {
                           Id = "Link1",
                           // Sets the preview size
                           PreviewSize = new SymbolSizeModel() { Width = 100, Height = 100 },
                           // Type of the connector segemnts
                           Type = Segments.Straight,
                           // Set the source and target point of the connector
                           SourcePoint = new ConnectorSourcePoint() { X = 0, Y = 0 },
                           TargetPoint = new ConnectorTargetPoint() { X = 60, Y = 60 }
                       },
                                   };
                   Palettes.Add(new SymbolPalettePalette() { Id = "Connectors", Expanded = true, Symbols = Connectors, Title = "Connectors" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolSizeModel.Height">
            <summary>
            Sets the height of the symbols. By default, it`s set to undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolSizeModel.Width">
            <summary>
            Sets the width of the symbols.  By default, it`s set to undefined.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PointModel">
            <summary>
            Represents the position of the diagram elements.
            </summary>
            <remarks>
            PointModel represents the position of the diagram elements such as label, port, etc., which is used to define properties like offset, pivot.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PointModel.X">
            <summary>
            Sets the x-coordinate of a position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PointModel.Y">
            <summary>
            Sets the y-coordinate of a position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.OverviewModel">
            <summary>
            Allows user to see a preview or an overall view of the content of a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Created">
            <summary>
            Triggers after render the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Height">
            <summary>
            Defines the height of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.SourceID">
            <summary>
            Defines the ID of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewModel.Width">
            <summary>
            Defines the width of the overview .
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolDescription">
            <summary>
            Specifies the description of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram ID="diagram" Width="500px" Height="600px">
               <SfSymbolPalette Width = "100px" Height="600px" SymbolHeight="60" SymbolWidth="60" SymbolInfo="@SymbolInfo">
                   <SymbolPalettePalettes>
                       @* Sets the palette header property for the symbols *@
                       <SymbolPalettePalette Id = "basic" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Group Shapes">
                       </SymbolPalettePalette>
                   </SymbolPalettePalettes>
               </SfSymbolPalette>
            </SfDiagram>
            @code{
               // Defines palette's basic-shape collection
               public ObservableCollection<DiagramNode> BasicShapes { get; set; }
               public SymbolInfo SymbolInfo;
               protected override void OnInitialized()
               {
                   ///Sets the size, appearance and description of a symbol
                   SymbolInfo = new SymbolInfo()
                   {
                       Description = new SymbolDescription()
                       {
                           Text = "GroupCollection",
                           Overflow = TextOverflow.Wrap,
                           Wrap = TextWrap.Wrap
                       },
                       Height = 50,
                       Width = 50
                   };
                   //Initialize the basicshapes for the symbol palette
                   BasicShapes = new ObservableCollection<DiagramNode>();
                   DiagramNode GroupNode = createNode("groupnode", 100, 100, "GroupNode", Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle);
                   DiagramNode Node1 = createNode("node1", 100, 100, "Node1", Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle);
                   DiagramNode Node2 = createNode("node2", 150, 150, "Node2", Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse);
                   //Grouping node 1 and node 2 into a single group
                   GroupNode.Children = new string[] { "Node1", "Node2" };
                   BasicShapes.Add(Node1);
                   BasicShapes.Add(Node2);
                   BasicShapes.Add(GroupNode);
               }
               public DiagramNode createNode(string id, double offx, double offy, string content, Syncfusion.Blazor.Diagrams.BasicShapes shape)
               {
                   DiagramNodeAnnotation Annotation = new DiagramNodeAnnotation()
                   {
                       Id = "annotation1",
                       Content = content,
                       Style = new AnnotationStyle() { Color = "white", Fill = "transparent", StrokeColor = "None" },
                   };
                   if (content == "GroupNode")
                   {
                       Annotation.Style.Color = "black";
                   }
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = id,
                       OffsetX = offx,
                       OffsetY = offy,
                       Height = 50,
                       Width = 50,
                       Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = shape },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { Annotation }
                   };
                   if (content != "GroupNode")
                   {
                       Node.Style = new NodeShapeStyle() { Fill = "#6BA5D7" };
                   }
                   return Node;
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDescription.Overflow">
            <summary>
            Represents how to handle the text when its size exceeds the given symbol size. By default, it's set to Ellipsis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDescription.Text">
            <summary>
            Specifies the symbol description.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDescription.Wrap">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds. By default, it's set to wrap.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolInfo">
            <summary>
            Specifies the information of the symbol.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" SymbolInfo="@SymbolInfo" Palettes="@Palettes">
            </SfSymbolPalette>
            @code{
               public ObservableCollection<SymbolPalettePalette> Palettes;
               // Defines palette's basic-shape collection
               public ObservableCollection<Object> BasicShapes { get; set; }
               public SymbolInfo SymbolInfo;
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   SymbolInfo = new SymbolInfo() { Fit = true };
                   //Initialize the basicshapes for the symbol palette
                   BasicShapes = new ObservableCollection<Object>
                       ()
                   {
                   new DiagramNode()
                   {
                   Id = "Rectangle",
                   Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle }
                   }
                   };
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Description">
            <summary>
            Defines the text to be displayed and how that is to be handled. By default its empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Fit">
            <summary>
            Specifies whether the symbol has to be fit inside the size, which is defined by the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Height">
            <summary>
            Defines the height of the symbol to be drawn over the palette. By default, it's undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Template">
            <summary>
            Define the template of the symbol that is to be drawn over the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Tooltip">
            <summary>
            Define the text to be displayed when mouse hover on the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolInfo.Width">
            <summary>
            Defines the width of the symbol to be drawn over the palette. By default, it's undefined.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolDragSizeModel">
            <summary>
            Specifies the drag size of the individual palette items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDragSizeModel.Height">
            <summary>
            Sets the drag height of the symbols.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolDragSizeModel.Width">
            <summary>
            Sets the drag width of the symbols.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings">
            <summary>
            Animation options that are common for both open and close actions of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings.Delay">
            <summary>
            It is used to denote the delay value in milliseconds and indicating the waiting time before the animation begins.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings.Duration">
            <summary>
            It is used to denote the duration of the animation that is completed per the animation cycle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimationSettings.Effect">
            <summary>
            It is used to apply the Animation effect on the Tooltip, during open and close actions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimation">
            <summary>
            Interface for a class Animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimation.CloseAnimationSettings">
            <summary>
            Animation settings to be applied to the Tooltip when it is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTooltipAnimation.OpenAnimationSettings">
            <summary>
            Animation settings to be applied on the Tooltip, while it is being shown over the target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.CollapseIconMargin">
            <summary>
            Represents the space around the CollapseIcon.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Node has different kinds of states such as expand state and collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed. </td>
            </tr>
            <tr>
            <td style = "border: none">•    This property allows the user to set the space that the icon can be moved from its actual position. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
              // A node is created and stored in nodes collection.
              DiagramNode Node = new DiagramNode()
              {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                 CollapseIcon = new NodeCollapseIcon()
                 {
                    Width = 20,
                    Height = 20,
                    Shape = IconShapes.ArrowUp,
                    Margin = new CollapseIconMargin { Top = 10, Bottom = 10, Left = 10, Right = 10 }
                 }
               };
               NodeCollection.Add(Node);
              }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.CollapseIconMargin.#ctor">
            <summary>
            Represents the space around the CollapseIcon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ExpandIconMargin">
            <summary>
            Represents the space around the ExpandIcon.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Node has different kinds of states such as expand state and collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed. </td>
            </tr>
            <tr>
            <td style = "border: none">•    This property allows the user to set the space that the icon can be moved from its actual position. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[    <SfDiagram Height="600px" Nodes="@NodeCollection">
              <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
               // A node is created and stored in nodes collection.
               DiagramNode Node = new DiagramNode()
               {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  ExpandIcon = new NodeExpandIcon()
                  {
                     Width = 20,
                     Height = 20,
                     Shape = IconShapes.ArrowDown,
                     //sets the margin value to an icon
                     Margin = new ExpandIconMargin { Top = 10, Bottom = 10, Left = 10, Right = 0 }
                   }
                };
                NodeCollection.Add(Node);
               }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ExpandIconMargin.#ctor">
            <summary>
            Represents the space around the ExpandIcon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FailureSubEvent">
            <summary>
            Specifies the size and position of the failure port.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FailureSubEvent.#ctor">
            <summary>
            Initialize the size and position of the failure port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Annotations">
            <summary>
            Defines the collection of textual annotations of the sub events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Event">
            <summary>
            Sets the type of the BPMN Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Height">
            <summary>
            Sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.HorizontalAlignment">
            <summary>
            Sets how to horizontally align a node with respect to its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Id">
            <summary>
            Sets the id of the BPMN sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Margin">
            <summary>
            Defines the space to be left between the node and its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Offset">
            <summary>
            Defines the position of the sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Ports">
            <summary>
            Defines the collection of connection points of the sub events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Trigger">
            <summary>
            Defines the type of the trigger.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.VerticalAlignment">
            <summary>
            Sets how to vertically align a node with respect to its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Visible">
            <summary>
            Sets the visibility of the sub event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FailureSubEvent.Width">
            <summary>
            Sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.FirstVector">
            <summary>
            Represents the length and angle between the source point and the first control point of a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.FirstVector.#ctor">
            <summary>
            Represents the length and angle between the source point and the first control point of a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FirstVector.Angle">
            <summary>
            Defines the angle between the connector end point and control point of the bezier segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.FirstVector.Distance">
            <summary>
            Defines the distance between the connector end point and control point of the bezier segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SecondVector">
            <summary>
            Represents the length and angle between the source point and the second control point of a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SecondVector.#ctor">
            <summary>
            Represents the length and angle between the source point and the second control point of a diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IDiagram">
            <summary>
            This interface specifies the properties of the diagrams.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.AddInfo">
            <summary>
            Allows the user to save custom information/data about diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.AnnotationTemplate">
            <summary>
            Customizes the annotation template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.BackgroundColor">
            <summary>
            Defines the background color of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is rendered when the segments are intersected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.ConnectorDefaults">
            <summary>
            Helps to assign the default properties of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Connectors">
            <summary>
            Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Constraints">
            <summary>
            Constraints are used to enable/disable certain behaviors of the diagram, nodes, and connectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.ContextMenuSettings">
            <summary>
            Defines type of menu that appears when you perform right-click operation. An object to customize the context menu of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.CustomCursor">
            <summary>
            A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DiagramSettings">
            <summary>
            Defines the settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DrawingObject">
            <summary>
            Defines the object to be drawn using drawing tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Height">
            <summary>
            Defines the height of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.HistoryManager">
            <summary>
            Customizes the undo redo functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Layers">
            <summary>
            A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Mode">
            <summary>
            Defines the diagram rendering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.NodeDefaults">
            <summary>
            Helps to assign the default properties of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.NodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Nodes">
            <summary>
            Defines the collection of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.PageSettings">
            <summary>
            Page settings enable to customize the appearance, width, and height of the Diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.RulerSettings">
            <summary>
            Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and view port size of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.SelectedItems">
            <summary>
            Defines the collection of selected items, size and position of the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.SerializationSettings">
            <summary>
            Defines the serialization settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.SnapSettings">
            <summary>
            Defines the gridlines and defines how and when the objects have to be snapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Tooltip">
            <summary>
            Defines the tooltip that should be shown when the mouse hovers over a node or connector
            An object that defines the description, appearance and alignments of tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.Width">
            <summary>
            Defines the width of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IDiagram.DiagramTemplates">
            <summary>
            Represents the template’s content to the node, annotation, and user handles. The User can define any HTML content as a template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IOverview">
            <summary>
            This interface specifies the properties of the overview of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.Height">
            <summary>
            Defines the height of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.SourceID">
            <summary>
            Defines the ID of the overview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IOverview.Width">
            <summary>
            Defines the width of the overview.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ISymbolPalette">
            <summary>
            This interface specifies the properties of the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.AccessKey">
            <summary>
            Configures the key, when it pressed the symbol palette will be focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.AllowDrag">
            <summary>
            Defines whether the symbols can be dragged from palette or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.ConnectorDefaults">
            <summary>
            Helps to return the default properties of connectors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnableAnimation">
            <summary>
            Enables/Disables animation when the palette header is expanded/collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.EnableSearch">
            <summary>
            Enables/Disables search option in symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.ExpandMode">
            <summary>
            Defines how many palettes can be at expanded mode at a time.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Height">
            <summary>
            Defines the height of the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.IgnoreSymbolsOnSearch">
            <summary>
            Defines the symbols to be added in search palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.NodeDefaults">
            <summary>
            Helps to return the default properties of node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Palettes">
            <summary>
            Defines the collection of symbol groups.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolDragSize">
            <summary>
            Defines the size of a drop symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolHeight">
            <summary>
            Defines the height of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolInfo">
            <summary>
            Defines the size, appearance and description of a symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolMargin">
            <summary>
            Defines the space to be left around a symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolPreview">
            <summary>
            Defines the size and position of the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.SymbolWidth">
            <summary>
            Defines the width of the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ISymbolPalette.Width">
            <summary>
            Defines the width of the symbol palette.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ISymbolPalette.updateChildProperties(System.String,System.Object)">
            
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDataSource">
            <summary>
            Acts as a repository for the collection of objects to be mapped and populated in the layout of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
              <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource" DataMapSettings="@Datamap">
                  <DiagramDataMapSettings>
                      <DiagramDataMapSetting Property = "Annotations[0].Content" Field="Name"></DiagramDataMapSetting>
                  </DiagramDataMapSettings>
              </DiagramDataSource>
            </SfDiagram>
            public class HierarchicalDetails
            {
              public string Name { get; set; }
              public string FillColor { get; set; }
              public string Category { get; set; }
              {
                List<DiagramDataMapSetting> Datamap { get; set; } = new List<DiagramDataMapSetting>()
                new DiagramDataMapSetting() { Property = "Shape.TextContent", Field = "Name" }
              };
              //Create the data source with node name and fill color values.
              public List<object> DataSource = new List<object>()
              {
               new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#916DAF"},
               };
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.UpdateProperty``1(System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            Acts as a repository for the collection of objects to be mapped and populated in the layout of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.ConnectionDataSource">
            <summary>
            Defines the collection of connector’s data source objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.DataMapSettings">
            <summary>
            A collection of JSON objects, where each object represents the items mapped to the specific node. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.DataSource">
            <summary>
            A repository for the collection of objects to be mapped and populated in the diagram.
            </summary>
            <example>
            <code lang="Razor">  
            <![CDATA[<SfDiagram>
            //Set the DataSource in the DiagramDataSource
              <DiagramDataSource DataSource = ”@DataSource”>
             </DiagramDataSource>
            </SfDiagram>
            //Create the data source with node name and fill color values.
              public List<object> DataSource = new List<object>()
             {
                new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#916DAF"},
                new HierarchicalDetails(){ Name ="Layout", Category="Diagram",FillColor=""},
             };
            ]]>
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.Id">
            <summary>
            Sets a unique Id for the data source in the diagram.
            </summary>
            <remarks>
            The Id should be unique always, else overlap over the data source might occur.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.ParentId">
            <summary>
            Defines a unique Id for all the Data source items. The ParentId clubs all the data source items as a collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataSource.Root">
            <summary>
            The Root property is used to set the root (primary) node of the diagram populated from the data source.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.updateChildProperties(System.String,System.Object)">
            <returns>  Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataSource.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramsGradientStop">
            <summary>
            Represents the color and a position, where the previous color transition ends, and a new color transition starts.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                 DiagramNode Node = new DiagramNode()
                 {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle()
                    {
                    Gradient = new DiagramGradient()
                    {
                      //Center point of inner circle
                      Fx = 20,
                      Fy = 20,
                      //Center point of outer circle
                      Cx = 50,
                      Cy = 50,
                      //Radius of a radial gradient
                      R = 50,
                      //Sets an array of stop objects
                      Stops = new ObservableCollection<DiagramsGradientStop>()
                      {
                        new DiagramsGradientStop(){ Color = "white", Offset = 0},
                        new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                      },
                      Type = GradientType.Radial
                    }
                   },
                 };
                 // Add node
                 NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.#ctor">
            <summary>
            Represents the color and a position, where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.Color">
            <summary>
            Gets or sets the color to be filled over the specified region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagrams.DiagramsGradientStop._color">
            <summary>
            Defines the color to be filled over the specified region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.Offset">
            <summary>
            Gets or sets the position where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramsGradientStop.Opacity">
            <summary>
            Gets or sets the transparency level of the region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator">
            <summary>
            Defines the properties and features of highlighting the connector source point.
            </summary>
            <remarks>
            A connector’s source decorator can be customized as per the user’s perspective like adding fill color, stroke color, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
              protected override void OnInitialized()
              {
               ConnectorCollection = new ObservableCollection<DiagramConnector>();
               DiagramConnector Connector = new DiagramConnector()
               {
                 SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                 TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                 SourceDecorator = new ConnectorSourceDecorator()
                 {
                    Shape = DecoratorShapes.Circle,
                    Style = new DecoratorShapeStyle() { StrokeColor = "#37909A", Fill = "#37909A", StrokeWidth = 1 },
                    Height = 40,
                    Width = 40,
                    Pivot = new DecoratorPivot()
                    {
                           X = 0.5,
                           Y = 0.5
                    }
                 },
              };
              ConnectorCollection.Add(Connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.#ctor">
            <summary>
            Defines the properties and features of highlighting the connector source point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Height">
            <summary>
            Defines the height of the source decorator. By default, the Height of source decorator is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.PathData">
            <summary>
            Gets or sets the geometry of the source decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Pivot">
            <summary>
            Gets or sets the position of the connector’s source decorator. The pivot points range from 0 to 1 for both X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Shape">
            <summary>
            Sets the shape of the source decorator.
            </summary>
            <remarks>
            The Shape can be set to Diamond, Doublearrow, OpenArrow, Circle, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[SourceDecorator = new ConnectorSourceDecorator()
            {
               Height=40,
               //Set the shape as desired
               Shape=DecoratorShapes.Diamond,
               Width=40,
               Pivot=new DecoratorPivot()
               {
                 X = 0.5,
                 Y = 0.5
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Style">
            <summary>
            Gets or sets the appearance of the source decorator.
            </summary>
            <remarks>
            The fill color, stroke width, stroke color, etc., of the source decorator, is set in Style.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[SourceDecorator = new ConnectorSourceDecorator()
            {
              Shape=DecoratorShapes.Diamond,
              //Set the style for source decorator
              Style=new DecoratorShapeStyle()
              {
                Fill = "red",
                StrokeColor = "blue"
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorSourceDecorator.Width">
            <summary>
            Defines the width of the source decorator. By default, the Width of the source decorator is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator">
            <summary>
            Defines the properties and features of highlighting the connector’s endpoint.
            </summary>
            <remarks>
            A connector’s target decorator can be customized as per the user’s perception like adding fill color, stroke color, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                 ConnectorCollection = new ObservableCollection<DiagramConnector>();
                 DiagramConnector Connector = new DiagramConnector()
                 {
                  SourcePoint = new ConnectorSourcePoint() { X = 300, Y = 40 },
                  TargetPoint = new ConnectorTargetPoint() { X = 400, Y = 160 },
                  TargetDecorator = new ConnectorTargetDecorator()
                  {
                    Shape = DecoratorShapes.Circle,
                    Style = new DecoratorShapeStyle() { StrokeColor = "#37909A", Fill = "#37909A", StrokeWidth = 1 },
                    Height = 40,
                    Width = 40,
                    Pivot = new DecoratorPivot()
                    {
                      X = 0.5,
                      Y = 0.5
                    }
                 },
               };
               ConnectorCollection.Add(Connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.#ctor">
            <summary>
            Defines the properties and features of highlighting the connector’s endpoint.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Height">
            <summary>
            Defines the height of the target decorator. By default, the Height is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.PathData">
            <summary>
            Gets or sets the geometry of the target decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Pivot">
            <summary>
            Gets or sets the position of the connector’s target decorator. The pivot points range from 0 to 1 for both X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Shape">
            <summary>
            Sets the shape of the target decorator.
            </summary>
            <remarks>
            The Shape can be set to Diamond, Doublearrow, OpenArrow, Circle, etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[TargetDecorator = new ConnectorTargetDecorator()
             {
                 Shape = DecoratorShapes.Arrow,
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Style">
            <summary>
            Gets or sets the appearance of the target decorator.
            </summary>
            <remarks>
            The fill color, stroke width, stroke color, etc., of the target decorator, is set in Style.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[TargetDecorator = new ConnectorTargetDecorator()
               {
                Shape = DecoratorShapes.Arrow,
                Style = new DecoratorShapeStyle() { Fill = "red", StrokeWidth = 1 },
               },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorTargetDecorator.Width">
            <summary>
            Defines the width of the target decorator. By default, the Width is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle">
            <summary>
             Represents the appearance of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's connector collection
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
              {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                  Style = new ConnectorShapeStyle()
                  {
                    StrokeColor = "#6f409f",
                    StrokeWidth = 1,
                    Fill = "#6f409f",
                    Opacity = 1,
                    StrokeDashArray = "2,2"
                   },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                };
                ConnectorCollection.Add(DiagramConnector);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.#ctor">
            <summary>
             Represents the appearance of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the connector. By default, it’s set to 1.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border: none">•    0 represents completely transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    0 represents completely transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    1 represents not transparent at all. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.ConnectorShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeShapeStyle">
            <summary>
             Represents the appearance of the node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              //Initialize node collection with node
              ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
              {
                //Creates a text node
                new DiagramNode()
                {
                  Id="node1",
                  // Size of the node
                  Height=100,
                  Width=100,
                  // Position of the node
                  OffsetX=100,
                  OffsetY=100,
                  //Sets type of the shape as text
                  Shape=new DiagramShape(){Type=Shapes.Text,Content="Text Node"},
                  //Set the style property to the shape
                  Style = new NodeShapeStyle() { Bold= true, Color = "red", Fill  = "#6BA5D7"  , FontSize = 15 , Italic = true, Opacity = 0.5}
                 }
               };
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeShapeStyle.#ctor">
            <summary>
             Represents the appearance of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Bold">
            <summary>
            This property allows the users to enable or disable the bold style of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Color">
            <summary>
            Gets or sets the font color of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Fill">
            <summary>
             Gets or sets the fill color of a shape/path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.FontFamily">
            <summary>
            Gets or sets the font type of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.FontSize">
            <summary>
            Gets or sets the font size of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The gradient stop’s opacity property defines the transparency level of the region. The gradient stop property defines the color and a position, where the previous color transition ends, and a new color transition starts. There are two types of gradients as follows, </td>
            </tr>
            <tr>
            <td style = "border: none">•    LinearGradient</td>
            </tr>
            <tr>
            <td style = "border: none">•    RadialGradient</td>
            </tr>
            <tr>
            <td style = "border: none">The following code demonstrates how to define the linear and radial gradient</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
             <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
             </ SfDiagram >
               @code{
                //Initialize node collection with node
                ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
                {
                 // . . .
                 // . . .
                 Style = new NodeShapeStyle()
                 {
                    Gradient = new DiagramGradient()
                    {
                     //Start point of linear gradient
                     X1 = 0,
                     Y1 = 0,
                     //End point of linear gradient
                     X2 = 50,
                     Y2 = 50,
                     //Sets an array of stop objects
                     Stops = new ObservableCollection<DiagramsGradientStop>()
                     {
                        new DiagramsGradientStop(){ Color = "white", Offset = 0},
                        new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
                     },
                     Type = GradientType.Linear
                    }
                 },
                 // . . .
                 // . . .
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Italic">
            <summary>
            This property allows the users to enable or disable the italic style of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the shape or path.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border: none">•    0 represents completely transparent.</td>
            </tr>
            <tr>
            <td style = "border: none">•    0.5 represents Partially transparent.</td>
            </tr>
            <tr>
            <td style = "border: none">•    1 represents not transparent at all.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.StrokeColor">
            <summary>
            Gets or sets the color to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextAlign">
            <summary>
            Defines the alignment of the text inside the node bounds. By default, it’s set to center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextDecoration">
            <summary>
            Specifies how the text should be decorated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextOverflow">
            <summary>
            Specifies how to handle the text when it exceeds the given size. By default, it’s set to Wrap.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.TextWrapping">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds. By default, it’s set to WrapWithOverflow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeShapeStyle.WhiteSpace">
            <summary>
            Specifies how to white space and new line characters must be handled. By default, it’s set to CollapseSpace.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle">
            <summary>
            Represents the appearance of the decorator.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's connector collection
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
              {
               DiagramConnector DiagramConnector = new DiagramConnector()
               {
                 SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                 TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                 TargetDecorator = new ConnectorTargetDecorator()
                 {
                    Width = 20,
                    Height = 20,
                    Shape = DecoratorShapes.Arrow,
                    //set the style property to the decorator
                    Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1, Opacity = 0.5, StrokeDashArray = "2,2" }
                  },
                  Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                };
                ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.#ctor">
            <summary>
            Represents the appearance of the decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or decorator. By default, it will be white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the source or target decorator.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The gradient stop’s opacity property defines the transparency level of the region. The gradient stop property defines the color and a position, where the previous color transition ends, and a new color transition starts. There are two types of gradients as follows,</td>
            </tr>
            <tr>
            <td style = "border:none">• LinearGradient</td>
            </tr>
            <tr>
            <td style = "border:none">• RadialGradient</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 , Opacity = 1, StrokeDashArray ="2,2" ,  Gradient = new DiagramGradient()
             {
               //Center point of inner circle
               Fx = 20,
               Fy = 20,
               //Center point of outer circle
               Cx = 50,
               Cy = 50,
               //Radius of a radial gradient
               R = 50,
               //Sets an array of stop objects
               Stops = new ObservableCollection<DiagramsGradientStop>()
               {
                 new DiagramsGradientStop() { Color = "white", Offset = 0},
                 new DiagramsGradientStop() { Color = "#6BA5D7", Offset = 100}
                },
                Type = GradientType.Radial
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the shape or path.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border:none">• 0 represents completely transparent</td>
            </tr>
            <tr>
            <td style = "border:none">• 0.5 represents Partially transparent</td>
            </tr>
            <tr>
            <td style = "border:none">• 1 represents not transparent at all.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.StrokeColor">
            <summary>
            Gets or sets the color to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the shape or path.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DecoratorPivot">
            <summary>
            Represents the position (X, Y) of the decorator to the source or target point of the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
              //Defines diagram's connector collection
              public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
              protected override void OnInitialized()
              {
                DiagramConnector DiagramConnector = new DiagramConnector()
                  {
                    SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                    TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                    TargetDecorator = new ConnectorTargetDecorator()
                    {
                      Shape = DecoratorShapes.Arrow,
                      Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 1 },
                      //set pivot value to target decorator
                      Pivot = new DecoratorPivot() { X = 0, Y = 0.5 },
                    },
                    Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
                    //Specify the segments types as straight.
                    Type = Segments.Straight,
                  };
                ConnectorCollection.Add(DiagramConnector);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DecoratorPivot.#ctor">
            <summary>
            Represents the position (X, Y) of the decorator to the source or target point of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorPivot.X">
            <summary>
            Gets or sets X coordinate position of the decorator. By default, it will be 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DecoratorPivot.Y">
            <summary>
            Gets or sets Y coordinate position of the decorator. By default, it will be 0.5.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AnnotationStyle">
            <summary>
            Represents the annotation style for an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AnnotationStyle.#ctor">
            <summary>
            Represents the annotation style for an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Bold">
            <summary>
            Specifies whether a font appears in bold or not. By default, it`s false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Color">
            <summary>
            Specifies the font color of a text. By default, it`s black.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Fill">
            <summary>
            Sets the fill color of a shape/path. By default, it`s transparent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.FontFamily">
            <summary>
            Specifies the font type of a text. By default, it`s Arial.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.FontSize">
            <summary>
            Specifies the font size of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Gradient">
            <summary>
            Specifies the gradient of shape/path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Italic">
            <summary>
            Enables/disables the italic style of text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.Opacity">
            <summary>
            Sets the opacity of a shape/path. By default, it`s 1. It varies between 0 to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.StrokeColor">
            <summary>
            Sets the stroke color of a shape/path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.StrokeDashArray">
            <summary>
            Specifies the patterns of dashes and spaces to stroke the path/shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.StrokeWidth">
            <summary>
            Specifies the stroke width of the path/shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextAlign">
            <summary>
            Specifies how they should be aligned within its bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextDecoration">
            <summary>
            Specifies how the text should be decorated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextOverflow">
            <summary>
            Specifies how to handle the text when it exceeds the given size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.TextWrapping">
            <summary>
            Specifies how the text should be wrapped when the text size exceeds some specific bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AnnotationStyle.WhiteSpace">
            <summary>
            Specifies how to white space and new line characters must be handled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.LayoutMargin">
            <summary>
            Represents the class to define the space between the viewport and the layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.LayoutMargin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagrams.LayoutMargin"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Bottom">
            <summary>
            Gets or sets the space to be left from the bottom side of the immediate parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Left">
            <summary>
            Gets or sets the space to be left from the left side of the immediate parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Right">
            <summary>
            Gets or sets the space to be left from the right side of the immediate parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.LayoutMargin.Top">
            <summary>
            Gets or sets the space to be left from the top side of the immediate parent of an element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodePortOffset">
            <summary>
            Represents the position of the port relative to the bounds of the node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in the node array.
                DiagramNode Node = new DiagramNode()
                {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  // Initialize port collection
                  Ports = new ObservableCollection<DiagramPort>() {
                  new DiagramPort() {
                     Id = "port1",
                     //Set offset value to the port
                     Offset = new NodePortOffset(){X= 0.5, Y= 0.5 },
                     Visibility = PortVisibility.Visible,
                     Style= new PortShapeStyle(){ Fill="gray"},
                    }},
                    };
                   NodeCollection.Add(Node);
                  }
               }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodePortOffset.#ctor">
            <summary>
            Represents the position of the port relative to the bounds of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePortOffset.X">
            <summary>
            Gets or sets x coordinate position .
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePortOffset.Y">
            <summary>
            Gets or sets Y coordinate position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.BpmnSubEventOffset">
            <summary>
            Represents the position of the sub-event.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">BpmnSubEventOffset is used to set the fraction relative to the parent that represents the position of the BpmnSubEvent. Fraction value ranges from 0 to 1. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the event will be position at the top left corner of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the event will be position at the center of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the event will be position at the bottom right corner of the node.   </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Shape = new DiagramShape()
              {
                Type = Shapes.Bpmn, BpmnShape = BpmnShapes.Activity,
                //Sets activity to SubProcess
                Activity=new DiagramBpmnActivity()
                {
                   Activity = BpmnActivities.SubProcess,
                   //Sets the collapsed to true and type to Event
                   SubProcess = new DiagramBpmnSubProcess()
                   {
                     Collapsed = true,
                     Type = BpmnSubProcessTypes.Event,
                     //Sets event to Start and trigger to Message
                     Events = new ObservableCollection<DiagramBpmnSubEvent>()
                     {
                        new DiagramBpmnSubEvent()
                        {
                         Event = BpmnEvents.Start, Trigger = BpmnTriggers.Message, Offset = new BpmnSubEventOffset { X= 0, Y=0}
                        }
                      }
                    }
                 }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.BpmnSubEventOffset.#ctor">
            <summary>
            Represents the position of the sub-event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UserHandleOffset">
            <summary>
            Represents the position of the fixed user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[   FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() {  Offset = new UserHandleOffset() { X = 1, Y = 0 },Id = "user1", Height = 20, Width = 20, Visibility = true,Margin = new UserHandleMargin() { Right = 20, Bottom = 20 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.UserHandleOffset.#ctor">
            <summary>
            Represents the position of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.UserHandleOffset.X">
            <summary>
            Gets or sets the x coordinate position of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.UserHandleOffset.Y">
            <summary>
            Gets or sets the Y coordinate position of the fixed user handle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IconPadding">
            <summary>
            Represents the space inside the border of an icon.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
              @code{
                public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
                protected override void OnInitialized()
                {
                  // A node is created and stored in nodes collection.
                  DiagramNode Node = new DiagramNode()
                  {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    ExpandIcon = new NodeExpandIcon()
                    {
                      Width = 20,
                      Height = 20,
                      Shape = IconShapes.ArrowDown,
                      Fill = "red",
                      CornerRadius = 3
                      //set padding to expand icon
                      Padding = new IconPadding { Top = 0, Left = 0, Bottom = 0, Right = 0 },
                     },
                  };
                  NodeCollection.Add(Node);
                }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.IconPadding.#ctor">
            <summary>
            Represents the space inside the border of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Bottom">
            <summary>
            Specifies the space to be left within the icon border on the bottom. By default, it is set to 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Left">
            <summary>
            Specifies the space to be left within the icon border on the left. By default, it is set to 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Right">
            <summary>
            Specifies the space to be left within the icon border on the right. By default, it is set to 2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconPadding.Top">
            <summary>
            Specifies the space to be left within the icon border on the top. By default, it is set to 2.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.IconOffset">
            <summary>
            Represents the position of the icon at the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">IconOffset is used to align the icon in the node based on the fractions. Fraction values are range from 0 to 1. By default, the offset values will be X=0.5 and  Y=1.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the icon will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the icon will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the icon will be position at the bottom right corner of the node.  </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
              <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in nodes collection.
                DiagramNode Node = new DiagramNode()
                {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                 ExpandIcon = new NodeExpandIcon()
                 {
                   Width = 20,
                   Height = 20,
                   Shape = IconShapes.ArrowDown,
                   Fill = "red",
                   //set the offset value to the expand icon
                   Offset = new IconOffset() { X = 0, Y = 0 }
                  },
                };
                NodeCollection.Add(Node);
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.IconOffset.#ctor">
            <summary>
            Represents the position of the icon at the bounds of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconOffset.X">
            <summary>
            Gets or sets the x coordinate position of the icon. By default, it is set to 0.5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.IconOffset.Y">
            <summary>
            Gets or sets the Y coordinate position of the icon. By default, it is set to 1.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeAnnotationOffset">
            <summary>
            Represents the position of the label relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">NodeAnnotationOffset is used to align the annotation in the node based on the fractions. Fraction value ranges from 0 to 1. Default value for NodeAnnotationOffset is set to X=0.5 and  Y=0.5.</td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the label will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the label will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the label will be position at the bottom right corner of the node. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
              {
                // A node is created and stored in the node array.
                DiagramNode Node = new DiagramNode()
                {
                 // Position of the node
                 OffsetX = 250,
                 OffsetY = 250,
                 // Size of the node
                 Width = 100,
                 Height = 100,
                 Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                 // Initialize port collection
                 Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                 {
                   // An annotation is created and stored in an Annotation collection of Node.
                   new DiagramNodeAnnotation() { Content = "Offset(0,0)",
                   //set offset value to an annotation
                   Offset = new NodeAnnotationOffset() { X = 0, Y = 0 }}
                  }
                };
                NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeAnnotationOffset.#ctor">
            <summary>
            Represents the position of the label relative to the bounds of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SelectorPivot">
            <summary>
            Represents the actual control point for the selector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SelectorPivot.#ctor">
            <summary>
            Represents the actual control point for the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorPivot.X">
            <summary>
            Gets or sets the actual control point to the horizontal in direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SelectorPivot.Y">
            <summary>
            Gets or sets the actual control point to the vertical in direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodePivotPoint">
            <summary>
            It represents the actual control point for the nodes. In this respect, the node can be rotated.
            </summary>
            <remarks>
            Rotation of the node is controlled by using the pivot property. These values are range from 0 to 1.
             The default value for the node’s pivot point is (0.5,0.5), which means the center of the node.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
              // A node is created and stored in the node array.
              DiagramNode Node = new DiagramNode()
             {
               // Position of the node
               OffsetX = 250,
               OffsetY = 250,
               // Size of the node
               Width = 100,
               Height = 100,
               Pivot = new NodePivotPoint { X = 0, Y = 0 },
               Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
              };
              NodeCollection.Add(Node);
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodePivotPoint.#ctor">
            <summary>
            It represents the actual control point for the nodes. In this respect, the node can be rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePivotPoint.X">
            <summary>
            Gets or sets the actual control point to the horizontal in direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodePivotPoint.Y">
            <summary>
            Gets or sets the actual control point to the vertical in direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AutoScrollMargin">
            <summary>
            Specifies the maximum distance to be left between the object and the scroll bar to trigger auto-scrolling.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            @using Syncfusion.Blazor.Diagrams
            <SfDiagram Height = "600px" >
                   @* Sets the auto scroll border for the diagram *@
                   <AutoScrollMargin Left = "50" Bottom="50" Right="50" Top="50"></AutoScrollMargin>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.AutoScrollMargin.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.AutoScrollPadding">
            <summary>
            Specifies the maximum distance to be left between the object and edge of the page.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
                @* Sets the Padding for the diagram Scroll*@
                <AutoScrollPadding Right = "50" Bottom="50"></AutoScrollPadding>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollPadding.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.AutoScrollPadding.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns> /// <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramBackground">
            <summary>
            Represents the appearance of the diagram background.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
               @* Initialize the page settings with page orientation and break lines*@
               <DiagramPageSettings Height = "300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
               //set image to the background
                <DiagramBackground Source = "https://www.w3schools.com/images/w3schools_green.jpg" />
                //set color to the background
                < DiagramBackground Color="lightblue"/>
               </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Align">
            <summary>
            Defines the alignment of background image over the diagram area.
            </summary>
            <remarks>
            Users can customize the alignment of the background image by using the Align property of the background. The Align Property contains some options such as XMinYMin, XMidYMid, XMaxYMin, and XMaxYMin, etc. Users can choose any one of the above options. By default, it will be None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Color">
            <summary>
            Defines the background color of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" ShowPageBreaks="true">
            //set color to the background
            <DiagramBackground Color="lightblue" />
            </DiagramPageSettings>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Scale">
            <summary>
            This property allows the user to stretch or scale the images to diagram bounds.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The following values can be set to the scale property, </td>
            </tr>
            <tr>
            <td style = "border: none">1.	None - Scale value will be set as None for the image. </td>
            </tr>
            <tr>
            <td style = "border: none">2.	Meet – The entire diagram is visible within the viewport. </td>
            </tr>
            <tr>
            <td style = "border: none">3.	Slice - Entire viewport is visible within the diagram. </td>
            </tr>
            <tr>
            <td style = "border: none">By default, the scale will be None. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" ShowPageBreaks="true">
            //set image to the background
            <DiagramBackground Source="https://www.w3schools.com/images/w3schools_green.jpg" Scale="@Scale" />
            </DiagramPageSettings>
            @code{
               ImageAlignment Scale = ImageAlignment.Meet;
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramBackground.Source">
            <summary>
            Defines the source path to the background image.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" ShowPageBreaks="true">
            //set image to the background
            <DiagramBackground Source="https://www.w3schools.com/images/w3schools_green.jpg" Scale="@Scale" />
            </DiagramPageSettings>
             @code{
             ImageAlignment Scale = ImageAlignment.Meet;
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBackground.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBackground.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramBackground.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCommand">
            <summary>
            Specifies a command and a key gesture to define when the command should be executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.Gesture">
            <summary>
            Specifies a combination of keys and key modifiers, on recognition of which the command will be executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.Name">
            <summary>
            Specifies the name of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommand.Parameter">
            <summary>
            Specifies any additional parameters that are required at runtime.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommand.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCommandManager">
            <summary>
            Represents to map or bind command execution with the desired combination of key gestures.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">CommandManager provides support to define custom commands. The custom commands are executed when the specified key gesture is recognized.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram @ref="@Diagram" Height="600px"
               Nodes="@NodeCollection">
               @* Initializing the custom commands*@
               <DiagramCommandManager>
                   <DiagramCommands>
                       <DiagramCommand Name = "customGroup" >
                           < DiagramKeyGesture Key="Keys.G" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                       <DiagramCommand Name = "customUnGroup" >
                           < DiagramKeyGesture Key="Keys.U" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                   </DiagramCommands>
               </DiagramCommandManager>
               @* To define the custom commands execution event *@
               <DiagramEvents OnCommandExecuted="@CommandExecute"></DiagramEvents>
            </SfDiagram>
            @code
               {
                   // Reference to diagram
                   SfDiagram Diagram;
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                   //Initializing the nodes collection
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   DiagramNode DiagramNode1 = new DiagramNode()
                   {
                       Id = "node1",
                       OffsetX = 100,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode1);
                   DiagramNode DiagramNode2 = new DiagramNode()
                   {
                       Id = "node2",
                       OffsetX = 300,
                       OffsetY = 100,
                       Width = 100,
                       Height = 100,
                       Style = new NodeShapeStyle() { Fill = "#659be5", StrokeColor = "none" },
                       Annotations = new ObservableCollection<DiagramNodeAnnotation>() { new DiagramNodeAnnotation() { Content = "Node" } }
                   };
                   NodeCollection.Add(DiagramNode2);
               }
               /// <summary>
               /// Custom command execution event
               /// </summary>
               public void CommandExecute(ICommandExecuteEventArgs args)
               {
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.G)
                   {
                       //Custom command to group the selected nodes
                       Diagram.Group();
                   }
                   if (args.Gesture.KeyModifiers == KeyModifiers.Control && args.Gesture.Key == Keys.U)
                   {
                       //Custom command to ungroup the selected items
                       if (Diagram.SelectedItems.Nodes.Count > 0 && Diagram.SelectedItems.Nodes[0].Children != null && Diagram.SelectedItems.Nodes[0].Children.Length > 0)
                       {
                           Diagram.UnGroup();
                       }
                   }
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommandManager.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommandManager.Commands">
            <summary>
            Stores the multiple command names with the corresponding command objects
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommandManager.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramCommands">
            <summary>
            Stores n number of actions to perform in the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfDiagram @ref="@Diagram" Height="600px">
               @* Initializing the custom commands*@
               <DiagramCommandManager>
                   <DiagramCommands>
                       <DiagramCommand Name = "customGroup" >
                           < DiagramKeyGesture Key="Keys.G" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                       <DiagramCommand Name = "customUnGroup" >
                           < DiagramKeyGesture Key="Keys.U" KeyModifiers="KeyModifiers.Control"></DiagramKeyGesture>
                       </DiagramCommand>
                   </DiagramCommands>
               </DiagramCommandManager>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommands.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramCommands.Commands">
            <summary>
            Defines the specific action to be performed in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommands.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramCommands.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource">
            <summary>
            Represents the Interface for a class ConnectionDataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.DataManager">
            <summary>
            Specifies the data source either as a collection of objects or as an URL of DataManager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.Id">
            <summary>
            Specifies an Id for connector dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.SourceID">
            <summary>
            Specifies the SourceID to connect with the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.SourcePointX">
            <summary>
            Specifies the SourcePoint to render connector start point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.SourcePointY">
            <summary>
            Specifies the SourcePoint to render connector start point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.TargetID">
            <summary>
            Specifies TargetID to connect with the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.TargetPointX">
            <summary>
            Specifies TargetPoint to render the connector target point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.TargetPointY">
            <summary>
            Specifies TargetPoint to render the connector target point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramConnectionDataSource.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting">
            <summary>
            Maps the data from the data source to the diagram layout nodes.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Based on the user-defined JSON (Local) data, the diagram is populated. This can be done only by mapping the local data to Data Source fields.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramDataSource Id = "Name" ParentId="Category" DataSource="@DataSource" DataMapSettings="@Datamap">
                   <DiagramDataMapSettings>
                       <DiagramDataMapSetting Property = "Annotations[0].Content" Field="Name"></DiagramDataMapSetting>
                   </DiagramDataMapSettings>
               </DiagramDataSource>
            </SfDiagram>
            @code{
               public class HierarchicalDetails
               {
                   public string Name { get; set; }
                   public string FillColor { get; set; }
                   public string Category { get; set; }
               }
               List<DiagramDataMapSetting> Datamap { get; set; } = new List<DiagramDataMapSetting>()
               {
                   new DiagramDataMapSetting() { Property = "Shape.TextContent", Field = "Name" }
               };
               ///Create the data source with node name and fill color values.
               public List<object> DataSource = new List<object>()
               {
                   new HierarchicalDetails(){ Name ="Diagram", Category="",FillColor="#916DAF"},
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.Field">
            <summary>
            Defines the Fields for the Data source item to be mapped with Node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
            <DiagramDataSource>
              <DiagramDataMapSettings>
                 //Set the field in DiagramDataMapSetting
                <DiagramDataMapSetting Field="Name"></DiagramDataMapSetting>
              </DiagramDataMapSettings>
             </DiagramDataSource>
            </SfDiagram>
            //Create the data map settings.
            new List<DiagramDataMapSetting>()
             {
               new DiagramDataMapSetting() { Field = "Name" }
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.Property">
             <summary>
             Defines the property mapped with the data source items value.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[<SfDiagram>
              <DiagramDataSource>
               <DiagramDataMapSettings>
                  //Set the property in DiagramDataMapSetting
                 <DiagramDataMapSetting Property="Annotations[0].Content"></DiagramDataMapSetting>
               </DiagramDataMapSettings>
              </DiagramDataSource>
            </SfDiagram>
             //Create the data map settings.
             new List<DiagramDataMapSetting>()
             {
                new DiagramDataMapSetting() { Property = "Shape.TextContent"}
             };
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSetting.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramDataMapSettings">
            <summary>
            Specifies to Mapping the collection of local data to Data Source fields.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramDataMapSettings.DataMapSettings">
            <summary>
            Maps the data from the data source to the diagram layout nodes. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramDataMapSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramEvents">
            <summary>
            It is used to defines the diagram events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.Clicked">
            <summary>
            Triggers when a node, connector or diagram is clicked
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnCommandExecuted">
            <summary>
            Triggers when a command executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnConnectionChange">
            <summary>
            Triggers when the connection is changed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.ContextMenuItemClicked">
            <summary>
            Triggers when a context menu item is clicked
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.FixedUserHandleClick">
            <summary>
            Triggers when a Fixed User Handle item is clicked
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnContextMenuOpen">
            <summary>
            Triggers before opening the context menu
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.Created">
            <summary>
            Triggered when the diagram is rendered completely.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.DataLoaded">
            <summary>
            Triggered when the diagram layout is rendered completely.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnDoubleClick">
            <summary>
            Triggers when a node, connector or diagram model is clicked twice
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.DragEnter">
            <summary>
            Triggers when a symbol is dragged into diagram from symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.DragLeave">
            <summary>
            Triggers when a symbol is dragged outside of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnDrop">
            <summary>
            Triggers when a symbol is dragged and dropped from symbol palette to drawing area
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.HistoryChanged">
            <summary>
            Triggers when a change is reverted or restored(undo/redo)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.CustomHistoryChanged">
            <summary>
            Triggers when a custom entry change is reverted or restored(undo/redo)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnKeyDown">
            <summary>
            Triggers when a user is pressing a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnKeyUp">
            <summary>
            Triggers when a user releases a key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.MouseEnter">
            <summary>
            Triggered when mouse enters a node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.MouseLeave">
            <summary>
            Triggered when mouse leaves node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseDown">
            <summary>
            Triggers when a mouseDown on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseEnter">
            <summary>
            Triggers when a mouseEnter on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseLeave">
            <summary>
            Triggers when a mouseLeave on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnUserHandleMouseUp">
            <summary>
            Triggers when a mouseUp on the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnPositionChange">
            <summary>
            Triggers while dragging the elements in diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.PropertyChanged">
            <summary>
            Triggers once the node or connector property changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnRotateChange">
            <summary>
            Triggers when the diagram elements are rotated
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.SelectionChanged">
            <summary>
            Triggers when the selection is changed in diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.OnSizeChange">
            <summary>
            Triggers when a node is resized
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramEvents.TextEdited">
            <summary>
            Triggers when editor got focus at the time of node’s label or text node editing.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramEvents.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramFitOptions">
            <summary>
            Represents the diagram content that can fit into the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
                <DiagramPageSettings >
                 <DiagramFitOptions CanFit = "true" Mode="FitModes.Width" CanZoomIn="true" Region="DiagramRegions.Content" ></DiagramFitOptions>
               </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.CanFit">
            <summary>
            It allows the user to enable or disable the fit of diagram content while rendering. It'll be false by default.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.CanZoomIn">
            <summary>
            It allows the user to enable or disable the zooming, to insert the smaller content into the larger viewport.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.CustomBounds">
            <summary>
            Defines the custom region that can be fit into the viewport.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.Margin">
            <summary>
            Specifies the space around the diagram content. By default, it will be 25 from all sides.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.Mode">
            <summary>
            Defines whether the diagram can fit within the viewport based on viewport width or viewport Height or page.
            </summary>
            <remarks>        
            <table style = "border: none"> 
            <tr>
            <td style = "border: none">The mode has the following three options. They are  </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Page </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Width </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Height</td>
            </tr>    
            <tr>
            <td style = "border: none">By default, the Mode is set to Page.</td>
            </tr>  
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptions.Region">
            <summary>
            Defines the region that can be fit into the viewport.
            </summary>
            <remarks>        
            <table style = "border: none"> 
            <tr>
            <td style = "border: none">The region has the following three options. They are </td>
            </tr>    
            <tr>
            <td style = "border: none">�	PageSettings </td>
            </tr>    
            <tr>
            <td style = "border: none">�	Content </td>
            </tr>    
            <tr>
            <td style = "border: none">�	CustomBounds</td>
            </tr>    
            <tr>
            <td style = "border: none">By default, the region is set to PageSettings.</td>
            </tr>  
            </table>
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptions.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin">
            <summary>
            Represents the space around the diagram content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
                <DiagramPageSettings>
                    <DiagramFitOptionsMargin Left = 50 Top=50 Bottom=50 Right=50></DiagramFitOptionsMargin>
                <DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramFitOptionsMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramKeyGesture">
            <summary>
            Defines a keyboard combination that can be used to invoke a command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.Key">
            <summary>
            Each key enables users to enter data when clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.KeyModifiers">
            <summary>
            A special key commonly used to enter keyboard shortcuts.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramKeyGesture.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramPageSettings">
            <summary>
            DiagramPagesetting enables to customize the appearance, width, and height of the diagram page.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" id="diagram">
               @* Initialize the page settings with page orientation and break lines*@
               <DiagramPageSettings Height = "300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
                   @* Set the page margin*@
                   <PageSettingsMargin Left = "10" Top="10" Bottom="10" />
               </DiagramPageSettings>
             </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Background">
            <summary>
            Defines the appearance of the page background.
            </summary>
            <remarks>
            Users can customize the background of the diagram page by using background property. Source property of background allows the user to set the path of the image to the background whereas the Color property of background allows the user to set a color to the background of the diagram page. By default, it is set to transparent.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" id="diagram">
             @*Initialize the page settings with page orientation and break lines*@
            <DiagramPageSettings Height="300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
              //set image to the background
              <DiagramBackground Source="https://www.w3schools.com/images/w3schools_green.jpg" />
              //set color to the background
              <DiagramBackground Color="lightblue" />
              <PageSettingsMargin Left="10" Top="10" Bottom="10" />
            </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.BoundaryConstraints">
            <summary>
            This property allows the user to customize the interactive region.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">�	The boundary constraints property restricts or customizes the interactive region, out of which the elements cannot be dragged, resized or rotated.</td>
            </tr>
            <tr>
            <td style = "border: none">�	The following values can be set to the boundary constraints property. They are infinity, diagram, page. By default, boundary constraints will be infinity.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.FitOptions">
            <summary>
            This property allows the user to specify the diagram content can fit within the diagram
            </summary>
            <remarks>
            Users can customize the FitOptions property when the diagram content is not fit into the diagram.
            There are some options available on the FitOptions property.They are Mode, Region, CustomBounds, Margin, CanZoomIn, and CanFit.These options have default values.Users can customize these options based on their requirements.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" id="diagram">
            <DiagramPageSettings Height="300" Width="300" Orientation="PageOrientation.Landscape" ShowPageBreaks="true">
               <DiagramFitOptions CanFit="true" Mode="FitModes.Width" CanZoomIn="true" Region=" DiagramRegion.Content"></DiagramFitOptions>
               <PageSettingsMargin Left="10" Top="10" Bottom="10" />
            </DiagramPageSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Height">
            <summary>
            Gets or sets the height of the diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Margin">
            <summary>
            Specifies the space around the diagram content. The default values for the margin are set to 25 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<DiagramPageSettings Height="300" Width="300" MultiplePage="true" ShowPageBreaks="true">
            <PageSettingsMargin Left="10" Top="10" Bottom="10" Right />
            </DiagramPageSettings>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.MultiplePage">
            <summary>
            This property allows users to enable or disable multiple pages.
            </summary>
            <remarks>
            When multiple pages are enabled, the size of the page dynamically increases or decreases to split the single page into multiple pages and completely fits the diagram within the page boundaries. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Orientation">
            <summary>
            Gets or sets the orientation of the page in the diagram. By default, the orientation of the page is set to landscape.
            </summary>
            <remarks>
            ShowPageBreaks property is used as a visual guide to see how pages are split into multiple pages. By default, it will be false. If it is true, then the page break lines will be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.ShowPageBreaks">
            <summary>
            This property allows, the user to enable or disable the page break lines
            </summary>
            <remarks>
            ShowPageBreaks property is used as a visual guide to see how pages are split into multiple pages. By default, it will be false. If it is true, then the page break lines will be visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramPageSettings.Width">
            <summary>
            Gets or sets the width of the diagram page
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramPageSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramRulerSettings">
            <summary>
            The diagram has vertical and horizontal rulers that show measurements at the scale objects like nodes etc.,.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The ShowRulers should be set to true in DiagramRulerSettings, to make the rulers visible</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
             <SfDiagram Nodes="@NodeCollection">
            <DiagramRulerSettings ShowRulers = true HorizontalRuler="@Horizontal"></DiagramRulerSettings>
            </SfDiagram>
            @code{
               HorizontalRuler Horizontal = new HorizontalRuler()
               {
                   SegmentWidth = 50,
                   Orientation = RulerOrientation.Horizontal,
                   Interval = 10
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.DynamicGrid">
            <summary>
            The Dynamic Grid allows user to create dynamic responsive grid lines and sets the gridlines can be relative to the ruler ticks or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.HorizontalRuler">
            <summary>
            Defines the properties of the horizontal ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.ShowRulers">
            <summary>
            A Boolean type which enables or disables ruler both horizontally and vertically. By default, ShowRulers is set to false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.VerticalRuler">
            <summary>
            Defines the properties of the vertical ruler.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
            <DiagramRulerSettings HorizontalRuler="@Vertical">
            </ DiagramRulerSettings>
            </SfDiagram>
             VerticalRuler Vertical = new VerticalRuler()
             {
               SegmentWidth = 50,
               Thickness = 10,
               Interval = 10
             };
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramRulerSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and viewport size of the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The diagrams can be scrolled both horizontally and vertically, over the diagram content. Even, the mouse wheel can be used to scroll</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
            //Sets the ScrollSettings for the diagram
               <DiagramScrollSettings HorizontalOffset = ”100” VerticalOffset = ”100” CurrentZoom="60" ScrollLimit="ScrollLimit.Limited">
               </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.AutoScrollBorder">
            <summary>
            Specifies the space between the object (Node/Connector) and the diagram edge such that, auto-scroll triggers.
            </summary>
            <remarks>
            By default, the value is set to 15 on all four sides (Left, Right, Bottom, Top). AutoScrollMargin should be set to the diagram to set the border.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px">
            //Sets the ScrollSettings for the diagram
            <DiagramScrollSettings HorizontalOffset="100" VerticalOffset="50">
              //Sets the Auto Scroll border for the diagram
              <AutoScrollMargin Left="15" Bottom="15" Right="15" Top="15"></AutoScrollMargin>
            </DiagramScrollSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.CanAutoScroll">
            <summary>
            A boolean which enables or disables auto-scroll in the diagram while dragging any diagram object.
            </summary>
            <remarks>
            By default, CanAutoScroll is set as false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.CurrentZoom">
            <summary>
            Gets the current zoom level. By default, CurrentZoom is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset of the scroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.MaxZoom">
            <summary>
            Sets maximum zoom value of the scroller. By default, MaxZoom is set to 30.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.MinZoom">
            <summary>
            Sets the minimum zoom value of the scroller. By default, MinZoom is set to 0.2.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.Padding">
            <summary>
            Defines the maximum space between the object and the diagram viewport edge.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ScrollLimit">
            <summary>
            Controls and sets the scrollable region in the diagram. Scrollable Area can be set to Diagram, Limited, or Infinity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ScrollableArea">
            <summary>
            Scrolling beyond any rectangular area can be restricted by using the ScrollableArea property of scroll settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.VerticalOffset">
            <summary>
            Gets or sets the vertical offset of the scroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ViewPortHeight">
            <summary>
            Get the Viewport height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.ViewPortWidth">
            <summary>
            Get the Viewport width.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramScrollSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings">
            <summary>
            Defines the serialization settings of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSerializationSettings></DiagramSerializationSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.PreventDefaults">
            <summary>
            Enables or Disables serialization of default values.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram>
              <DiagramSerializationSettings PreventDefaults="true"></DiagramSerializationSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSerializationSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSettings">
            <summary>
            Defines the settings of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSettings.InversedAlignment">
            <summary>
            Enables or Disables serialization of default values.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramSnapSettings">
            <summary>
            Customizes and controls the gridlines and snap behavior of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px">
               // Shows horizontal gridlines
               <DiagramSnapSettings Constraints = SnapConstraints.ShowLines SnapAngle="10">
                   <HorizontalGridlines LineColor = "blue" LineDashArray="2,2">
                   </HorizontalGridlines>
                   <VerticalGridlines LineColor = "blue" LineDashArray="2,2">
                   </VerticalGridlines>
               </DiagramSnapSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.Constraints">
            <summary>
            Enables or disables features of gridlines and SnapSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.GridType">
             <summary>
            Defines the diagram Grid pattern.
             </summary>
             <remarks>
             The GridType can be set to lines or dots. By default, the GridType is set to lines.
             </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.HorizontalGridlines">
            <summary>
            Defines the pattern of horizontal gridlines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.SnapAngle">
            <summary>
            SnapAngle defines the angle by which the object needs to be rotated. By default, 5.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.SnapObjectDistance">
             <summary>
            Defines the minimum distance between the selected object and the nearest object. By default, 5.
             </summary>
             <example>
             <code lang="Razor">
             <![CDATA[<SfDiagram>
              <DiagramSnapSettings SnapObjectDistance="10">
              </DiagramSnapSettings>
             </SfDiagram>
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.VerticalGridlines">
            <summary>
            Defines the pattern of vertical gridlines.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramSnapSettings.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTemplates">
            <summary>
            Represents the template’s content to the node, annotation, and user handles. The User can define any HTML content as a template.
            </summary>
            <remarks>
            Represents the template’s content to the node, annotation, and user handles. The User can define any HTML content as a template.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplate">
            <summary>
            Represents the template content to the node. By default, it will be undefined.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplateData">
            <summary>
            Sets the template data to the node.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplateItems">
            <summary>
            Defines the collection of node templates.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.NodeTemplateID">
            <summary>
            Sets the id to the node template.
            </summary> 
            <remarks>
             NodeTemplateID needs to be unique to use. When creating a NodeTemplate, the user should not provide the same id to other NodeTemplates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplate">
            <summary>
            Represents the template content to the annotation. By default, it will be undefined.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplateData">
            <summary>
            Sets the template data to the annotation.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplateItems">
            <summary>
            Defines the collection of annotation templates.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.AnnotationTemplateID">
            <summary>
            Sets the Id to the annotation template.
            </summary>  
            <remarks>
            AnnotationTemplateID needs to be unique to use. When creating an AnnotationTemplate, the user should not provide the same id to other AnnotationTemplates.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplate">
            <summary>
            Represents the template content to the userhandle. By default, it will be undefined.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplateData">
            <summary>
            Sets the template data to the userhandle.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplateItems">
            <summary>
            Defines the collection of userhandle templates.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramTemplates.UserHandleTemplateID">
            <summary>
            Sets the Id to the userhandle template.
            </summary>  
            <remarks>
            UserhandleTemplateID needs to be unique to use. When creating UserHandleTemplate, the user should not provide the same id to UserhandleTemplates.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTemplates.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTemplates.OnAfterRenderAsync(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated </returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramTooltip">
            <summary>
            Represents the textual content which appears when the mouse hovers over an element of the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The Tooltip will be displayed, when dragging, resizing, rotating a node, and when the cursor hovers over any diagram elements. </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection" Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Tooltip="@Tooltip">
               <DiagramSnapSettings Constraints = "SnapConstraints.None" ></ DiagramSnapSettings >
            </ SfDiagram >
            @code{
               //Defines diagram's node collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               // Defines position of the tooltip
               public DiagramTooltip Tooltip = new DiagramTooltip()
               {
                   Content = "Nodes",
                   Position = Syncfusion.Blazor.Popups.Position.TopLeft
               };
               protected override void OnInitialized()
               {
                   NodeCollection = new ObservableCollection<DiagramNode>();
                   //Defines nodes
                   DiagramNode Node = new DiagramNode()
                   {
                       Id = "node1",
                       Width = 100,
                       Height = 100,
                       OffsetX = 200,
                       OffsetY = 200,
                       Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
                       Constraints = NodeConstraints.Default | NodeConstraints.InheritTooltip,
                   };
                   NodeCollection.Add(Node);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTooltip.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramTooltip.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HorizontalGridlines">
            <summary>
            Customizes the horizontal gridlines as per the user’s preference in the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">Horizontal Gridlines provides visual guidance while dragging or arranging the objects on the diagram surface.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSnapSettings>
                   //Shows horizontal gridlines
                   <HorizontalGridlines LineColor = "blue" LineDashArray="2,2">
                   </HorizontalGridlines>
               </DiagramSnapSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HorizontalGridlines.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalGridlines.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalGridlines.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.HorizontalRuler">
            <summary>
            Defines the appearance and properties of Horizontal ruler.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The Horizontal Ruler appearance can be customized according to the user’s perception.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
            //Set the HorizontallRuler in DiagramRulerSettings
               <DiagramRulerSettings HorizontalRuler = "@HorizontalRulers" ></ DiagramRulerSettings >
            </ SfDiagram >
            @code
            {
               HorizontalRuler HorizontalRulers = new HorizontalRuler()
               {
                   MarkerColor = "red",
                   Orientation = RulerOrientation.Horizontal,
                   TickAlignment = TickAlignment.LeftOrTop
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.HorizontalRuler.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalRuler.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.HorizontalRuler.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.OverviewEvents">
            <summary>
            It is used to defines the overview control events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.OverviewEvents.Created">
            <summary>
            Triggers after render the diagram elements
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.OverviewEvents.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PageSettingsMargin">
            <summary>
            Represents the space around the page of the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <DiagramPageSettings Height="300" Width="300" MultiplePage="true">
                <PageSettingsMargin Left = 10 Top=10 Bottom=10 Right = 10></PageSettingsMargin>
            </DiagramPageSettings>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PageSettingsMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PageSettingsMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolMargin">
            <summary>
            Defines the margin for symbols in symbol palette on all the four sides.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">By default, the margin is set to 0 in all the four sides.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette>
               ///Sets the margin for the symbols
               <SymbolMargin></SymbolMargin>
            </SfSymbolPalette>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolMargin.GetJSNamespace">
            <returns> Get the parent namespaces</returns>  
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.UserHandleMargin">
            <summary>
            Defines the margin for symbols in symbol palette on all the four sides.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPaletteEvents">
            <summary>
            It is used to defines the symbol palette events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteEvents.OnPaletteSelectionChange">
            <summary>
            Triggers after the selection changes in the symbol palette
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteEvents.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview">
            <summary>
            Defines the appearance of the symbols on preview(before dragging into the diagram).
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette>
               <SymbolPaletteSymbolPreview Height = "100" Width="100">
                   <SymbolPreviewOffset X = "0.5" Y="0.5"></SymbolPreviewOffset>
               </SymbolPaletteSymbolPreview>
            </SfSymbolPalette>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.Height">
            <summary>
            Defines the height of the symbols before drag. By default, the height is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.Offset">
            <summary>
            Defines the distance between the symbol and the cursor. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.Width">
            <summary>
            Defines the width of the symbols before drag. By default, the width is null.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPaletteSymbolPreview.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset">
            <summary>
            Sets the offset for the symbol on the preview.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette>`
               <SymbolPaletteSymbolPreview>
                   <SymbolPreviewOffset X="0.5" Y="0.5"></SymbolPreviewOffset>
               </SymbolPaletteSymbolPreview>
            </SfSymbolPalette>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPreviewOffset.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.VerticalGridlines">
            <summary>
            Customizes the vertical gridlines as per the user’s preference in the diagram.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none">The VerticalGridlines should be set in DiagramSnapSettings.</td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               <DiagramSnapSettings>
                   //Shows vertical gridlines
                   <VerticalGridlines LineColor = "blue" LineDashArray="2,2">
                   </VerticalGridlines>
               </DiagramSnapSettings>
            </SfDiagram>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalGridlines.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalGridlines.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.VerticalRuler">
            <summary>
            Defines the appearance and properties of the vertical ruler. The Vertical Ruler appearance can be customized according to the user’s perception.
            </summary>
            <remarks>
            <table>
            <tr>
            <td style = "border:none"></td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram>
               //Set the VerticalRuler in DiagramRulerSettings
               <DiagramRulerSettings VerticalRuler = "@VerticalRulers" ></ DiagramRulerSettings >
            </ SfDiagram >
            @code
            {
               VerticalRuler VerticalRulers = new VerticalRuler()
               {
                   MarkerColor = "red",
                   Orientation = RulerOrientation.Horizontal,
                   TickAlignment = TickAlignment.LeftOrTop
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalRuler.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.VerticalRuler.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle">
            <summary>
            Specifies the behavior of fixedUserHandles.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.#ctor">
            <summary>
            Specifies the behavior of fixedUserHandles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Fill">
            <summary>
            Specifies the fill color of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.IconStrokeColor">
            <summary>
            Specifies the stroke color of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.IconStrokeWidth">
            <summary>
            Specifies the stroke width of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Visibility">
            <summary>
            Specifies the visibility of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Id">
            <summary>
             Specifies the unique id of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Width">
            <summary>
            Specifies the width of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Height">
            <summary>
            Specifies the height of the fixed user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.HandleStrokeColor">
            <summary>
            Specifies the stroke color of the fixed user handle container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.HandleStrokeWidth">
            <summary>
            Specifies the stroke width of the fixed user handle container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.PathData">
            <summary>
            Specifies the shape information of the fixed user handle.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[  FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() { Id = "user1",Height = 20, Width = 20, Visibility = true,Margin = new NodeMargin() { Right = 20, Bottom = 20 }, Offset = new IconOffset() { X = 1, Y = 0 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.CornerRadius">
            <summary>
            Specifies the cornerRadius for fixed user handle container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.FixedUserHandle.Padding">
            <summary>
            Specifies the space between the fixed user handle and container.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ FixedUserHandles = new ObservableCollection<DiagramNodeFixedUserHandle>()
                    {
                      new DiagramNodeFixedUserHandle() { Id = "user1", Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 },Height = 20, Width = 20, Visibility = true,Margin = new NodeMargin() { Right = 20, Bottom = 20 }, Offset = new IconOffset() { X = 1, Y = 0 },CornerRadius = 4, PathData = "M60.3,18H27.5c-3,0-5.5,2.4-5.5,5.5v38.2h5.5V23.5h32.7V18z M68.5,28.9h-30c-3,0-5.5,2.4-5.5,5.5v38.2c0,3,2.4,5.5,5.5,5.5h30c3,0,5.5-2.4,5.5-5.5V34.4C73.9,31.4,71.5,28.9,68.5,28.9z M68.5,72.5h-30V34.4h30V72.5z" }
                    },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Internal.SymbolPaletteContent.Items">
            <summary>
            Defines the collection of accordion item
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfDiagram">
            <summary>
            SfDiagram renders the diagram. It contains all the properties for the diagram to be rendered.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                 // A node is created and stored in the nodes collection.
                 DiagramNode node1 = new DiagramNode()
                 {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" }
                  };
                  // Add node
                  NodeCollection.Add(node1);
                }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.IsUpdated">
            <summary>
            SfDiagram renders the diagram. It contains all the properties for the diagram to be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.#ctor">
            <summary>
            Initialize the diagram members.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BeginUpdate">
            <summary>
            Prevents redrawing of model on the client side.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.EndUpdate">
            <summary>
            Enable redrawing of model on the client side.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Tool">
            <summary>
            Defines the precedence of the interactive tools. They are,.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RandomString(System.Int32)">
            <summary>
            Generate random string for setting name for nodes/connectors.
            </summary>
            <param name="length"> Sets a length of the string.</param>
            <returns>returns a random string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramCollectionModel(System.String,System.String[],System.Int32[],System.String,System.Int32[],System.Int32[])">
            <summary>
            Synchronousing the properties from client.
            </summary>
            <param name="DiagramObject">Specifies the Diagram object. </param>
            <param name="ObjectType">Specifies the object type.</param>
            <param name="RemovalIndex">Specifies the removal index.</param>
            <param name="connectorObject">Specifies the connector object.</param>
            <param name="AnnotationIndex">Specifies the annotation index.</param>
            <param name="PortIndex">Specifies the port index.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramModel(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            It is used to synchronising client changes into the server changes.
            </summary>
            <param name="DiagramObject">Specifies the Diagram object. </param>
            <param name="ObjectType">Specifies the object type.</param>
            <param name="RemovalIndex">Specifies the removal index.</param>
            <param name="annotationIndex">Specifies the annotation index.</param>
            <param name="portIndex">Specifies the port index.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramModelLayers(System.String,System.Boolean)">
            <summary>
            Update layers collection changes from client to server.
            </summary>
            <param name="DiagramObject">Specifies the Diagram object. </param>
            <param name="isRemove">Specifies whether it should be removed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorDiagramObjects(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update objects collection changes from client to server.
            </summary>
            <param name="DiagramObject">Specifies the objects in the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateBlazorProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Update property changes from client to server.
            </summary>
            <param name="properties">Specifies the property changes.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetEdges(System.String,System.Boolean)">
            <summary>
            Return the edges for the given node.
            </summary>
            <param name="id">Specifies the Id of the node.</param>
            <param name="outEdge">Specifies whether it has a outedge or not.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetParentId(System.String)">
            <summary>
            Returns the parent id for the node.
            </summary>
            <param name="id">Specifies the Id of the node.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddBlazorObjects(System.String,System.Boolean)">
            <summary>
            Adds the object into the diagram.
            </summary>
            <param name="DiagramObject">Specifies the diagram object.</param>
            <param name="IsConnector">Specifies whether the its connector or not.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateDiagramObjects(System.Boolean,System.Object[])">
            <summary>
            Adds the given object to diagram control.
            </summary>
            <param name="IsAdding">Specifies whether its adding or not. </param>
            <param name="methodParam">Specifies the object to be updated.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetNode(System.String)">
            <summary>
            The node can be captured from its id itself.
            </summary>
            <param name="Id">Returns the id of the node to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetConnector(System.String)">
            <summary>
            It is used to get the connector back.
            </summary>
            <param name="Id"> Specifies the id of the connector which has taken from the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Paste(System.Object)">
            <summary>
            Adds the given objects/ the objects in the diagram clipboard to diagram control.
            </summary>
            <param name="obj">Defines the objects to be added to diagram.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Clear">
            <summary>
            Clears all nodes and objects in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.LoadDiagram(System.String)">
            <summary>
            Converts the given string as a Diagram Control.
            </summary>
            <param name="data">Defines the behavior of the diagram to be loaded.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnAfterRenderAsync(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated. </returns>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.AddInfo">
            <summary>
            Allows the user to save custom information/data about diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.AnnotationTemplate">
            <summary>
            Customizes the annotation template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.BackgroundColor">
            <summary>
            Defines the background color of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.BridgeDirection">
            <summary>
            Defines the direction of the bridge that is inserted when the segments are intersected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.CommandManager">
            <summary>
            Defines a set of custom commands and binds them with a set of desired key gestures.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ConnectorDefaults">
            <summary>
            Helps to assign the default properties of connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Connectors">
            <summary>
            Defines a collection of objects, used to create link between two points, nodes or ports to represent the relationships between them.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Constraints">
            <summary>
            Constraints are used to enable/disable certain behaviors of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ContextMenuSettings">
            <summary>
            Defines type of menu that appears when you perform right-click operation
            An object to customize the context menu of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.CustomCursor">
            <summary>
            A collection of JSON objects where each object represents a custom cursor action. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.DataSourceSettings">
            <summary>
            Configures the data source that is to be bound with diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.DrawingObject">
            <summary>
            Defines the object to be drawn using drawing tool.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Height">
            <summary>
            Defines the height of the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.HistoryManager">
            <summary>
            Customizes the undo redo functionality.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Layers">
            <summary>
            A collection of JSON objects where each object represents a layer. Layer is a named category of diagram shapes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Layout">
            <summary>
            Layout is used to auto-arrange the nodes in the Diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Mode">
            <summary>
            Defines the diagram rendering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.NodeDefaults">
            <summary>
            Helps to assign the default properties of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.NodeTemplate">
            <summary>
            Customizes the node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Nodes">
            <summary>
            Defines the collection of nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.PageSettings">
            <summary>
            Page settings enable to customize the appearance, width, and height of the Diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.RulerSettings">
            <summary>
            Defines the properties of both horizontal and vertical guides/rulers to measure the diagram area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and view port size of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.SelectedItems">
            <summary>
            Defines the collection of selected items, size and position of the selector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.SerializationSettings">
            <summary>
            Defines the serialization settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.DiagramSettings">
            <summary>
            Defines the settings of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.SnapSettings">
            <summary>
            Defines the gridlines and defines how and when the objects have to be snapped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Tooltip">
            <summary>
            Defines the tooltip that should be shown when the mouse hovers over a node or connector
            An object that defines the description, appearance and alignments of tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.Width">
            <summary>
            Defines the width of the diagram model.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Add(System.Object,System.Nullable{System.Boolean})">
            <summary>
            It is used to add the nodes/connector to the diagram dynamically.
            </summary>
            <param name = "obj"> DiagramNode / DiagramConnector to be add dynamically.</param>
            <param name = "group"> Specifies whether the dynamically added was group or not.  </param>
            <remarks>
            You can refer to the code snippets from diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddChildToGroup(Syncfusion.Blazor.Diagrams.DiagramNode,System.Object)">
            <summary>
            It is used to add the node/connector to the group dynamically.
            </summary>
            <param name = "group"> The group to which the child has to be added.</param>
            <param name = "child">  The node/connector to be added to the group. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-child-to-group-node">public methods</a>.
            </remarks>
            <returns> Returns the Diagram Node/ Diagram Connector. </returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddConnector(Syncfusion.Blazor.Diagrams.DiagramConnector)">
            <summary>
            Connectors can be added dynamically using the server-side method AddConnector.
            </summary>
            <param name = "obj"> Connector to be added dynamically.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-connector">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddConnectorLabels(Syncfusion.Blazor.Diagrams.DiagramConnector,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramConnectorAnnotation})">
            <summary>
            It adds the label to the connector during run time dynamically.
            </summary>
            <param name = "obj"> The connector to which label should be added.</param>
            <param name = "labels"> The label to be added in runtime.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddConstraints(System.Double,System.Double)">
            <summary>
            It adds constraints at run time.
            </summary>
            <param name = "constraintsType"> Defines the type of constraint. </param>
            <param name = "constraintsValue"> Sets the value for constraint.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddCustomHistoryEntry(Syncfusion.Blazor.Diagrams.HistoryEntry)">
            <summary>
            History entry can be added during runtime using AddCustomHistoryEntry.
            </summary>
            <param name = "entry"> The history entry to be added during runtime. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-custom-history-entry">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddHistoryEntry(Syncfusion.Blazor.Diagrams.HistoryEntry)">
            <summary>
            Adds the given change in the diagram control to the track.
            </summary>
            <param name = "entry"> The history entry to be added during runtime. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/undo-redo/#track-custom-changes">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddLabels(System.Object,System.Collections.ObjectModel.ObservableCollection{System.Object})">
            <summary>
            Adds labels (annotations) to the node at runtime.
            </summary>
            <param name = "obj"> The node to which the label should be added. </param>
            <param name = "labels"> The annotation to be added during runtime. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-annotation">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddLayer(Syncfusion.Blazor.Diagrams.DiagramLayer,System.Object)">
            <summary>
            It allows the user to add layers to the diagram at runtime.
            </summary>
            <param name = "layer"> The new layer to be added at runtime. </param>
            <param name = "layerObject"> The node/connector to be added. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-layers">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveLayer(System.String)">
            <summary>
            Remove the layer from the diagram.
            </summary>
            <param name = "layerId"> Specifies the unique Id for the layer. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/layers/#remove-layer-at-runtime">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddNode(Syncfusion.Blazor.Diagrams.DiagramNode,System.Nullable{System.Boolean})">
            <summary>
            It adds the node to the diagram at runtime.
            </summary>
            <param name = "obj"> The node to be added to the diagram. </param>
            <param name = "group"> The group to which the node should be added. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddNodeLabels(Syncfusion.Blazor.Diagrams.DiagramNode,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramNodeAnnotation})">
            <summary>
            It adds labels to the nodes at runtime.
            </summary>
            <param name = "obj"> The node to which label(annotation) should be added. </param>
            <param name = "labels"> The label to be added in the node at runtime. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddPorts(Syncfusion.Blazor.Diagrams.DiagramNode,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramPort})">
            <summary>
            It is used to add the ports to the node dynamically.
            </summary>
            <param name = "obj"> DiagramNode that dynamically adds the port on. </param>
            <param name = "ports">Ports that are dynamically added to the node. </param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#add-the-ports">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddProcess(Syncfusion.Blazor.Diagrams.DiagramNode,System.String)">
            <summary>
            It is used to add a process shape into the BPMN subprocess shape.
            </summary>
            <param name = "process"> DiagramNode to be added dynamically. </param>
            <param name = "parentId">Specifies the node Id to add the subprocess. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.AddTextAnnotation(Syncfusion.Blazor.Diagrams.DiagramBpmnAnnotation,Syncfusion.Blazor.Diagrams.DiagramNode)">
            <summary>
            It is used to add the text annotation to the specific BPMN node.
            </summary>
            <param name = "annotation"> Defines the annotation to be added.</param>
            <param name = "node">Defines the node to which the annotation has to be added. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Align(Syncfusion.Blazor.Diagrams.AlignmentOptions,System.Object,System.Nullable{Syncfusion.Blazor.Diagrams.AlignmentMode})">
            <summary>
            Aligns the group of objects to with reference to the first object in the group.
            </summary>
            <param name = "objects"> Defines the object which has to align.</param>
            <param name = "option">Defines the factor, by which the objects have to be aligned. </param>
            <param name = "type">Defines the alignment mode of the object which has to align.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringIntoView(System.Object)">
            <summary>
            It is used to show the particular bounds to the viewport.
            </summary>
            <param name = "bound">Specifies the value of the bound which has to be shown in the viewport.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#bring-to-view">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringLayerForward(System.String)">
            <summary>
            It is used to move the layer forward.
            </summary>
            <param name = "layerName">Defines the name of the layer.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#bring-the-layer-to-forward">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringToCenter(System.Object)">
            <summary>
            It is used to bring the specified bounds to the center of the viewport.
            </summary>
            <param name = "bound">Specifies the bouns value which has to be shown in the viewport.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#bring-to-center">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.BringToFront">
            <summary>
            It is used to bring the selected node to the front.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#order-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ClearHistory">
            <summary>
            It is used to clear all nodes and objects from the diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clear">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ClearSelection">
            <summary>
            It allows the user to clear the selected nodes/connectors in the diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#selection">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.CloneLayer(System.String)">
            <summary>
            It allows the user to clone the layer.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clone-the-layer">public methods</a>.
            </remarks>
            <param name="layerName">Specifies the layer name. </param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Copy">
            <summary>
            It copies the selected nodes/connectors to the clipboard.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clipboard-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Cut">
            <summary>
            It removes the selected nodes/connectors and moves those to the clipboard.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#clipboard-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Distribute(Syncfusion.Blazor.Diagrams.DistributeOptions,System.Object)">
            <summary>
            It arranges the group of nodes/connectors with equal intervals but within the group of nodes/connectors.
            </summary>
            <param name = "option">The type of distributing option.</param>
            <param name = "objects">The collection of nodes/connectors.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#distribution-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.DoLayout">
            <summary>
            It allows the user to refresh the layout at runtime.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#refresh-the-layout">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Drag(System.Object,System.Double,System.Double)">
            <summary>
            It drags the given object by the specified pixels.
            </summary>
            <param name = "obj">The collection of nodes/connectors to be dragged.</param>
            <param name = "tx">X-coordinate of the node/connector to be captured.</param>
            <param name = "ty">Y-coordinate of the node/connector to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#drag">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.DragSourceEnd(Syncfusion.Blazor.Diagrams.DiagramConnector,System.Double,System.Double)">
            <summary>
            It drags the source point of the connector.
            </summary>
            <param name = "obj">The connector to be dragged.</param>
            <param name = "tx">X-coordinate of the node/connector to be captured.</param>
            <param name = "ty">Y-coordinate of the node/connector to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#drag-source-end">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.DragTargetEnd(Syncfusion.Blazor.Diagrams.DiagramConnector,System.Double,System.Double)">
            <summary>
            It drags the target point of the connector.
            </summary>
            <param name = "obj">The connector to be dragged.</param>
            <param name = "tx">X-coordinate of the node/connector to be captured.</param>
            <param name = "ty">Y-coordinate of the node/connector to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#drag-target-end">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.EndGroupAction">
            <summary>
            Closes grouping the actions that will be undone/restored as a whole.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#group-action">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ExportDiagram(Syncfusion.Blazor.Diagrams.IExportOptions)">
            <summary>
            It is used to export the diagram.
            </summary>
            <param name = "options">defines how the image should be export.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#export-the-diagram">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ExportImage(System.String,Syncfusion.Blazor.Diagrams.IExportOptions)">
            <summary>
            It is used to export the diagram to various image format.
            </summary>
            <param name = "options">Defines the export image properties.</param>
            <param name = "image">Defines the type of image content to be exported.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.FitToPage(Syncfusion.Blazor.Diagrams.IFitOptions)">
            <summary>
            It is used to fit the diagram to the page with respect to mode and region.
            </summary>
            <param name = "options">Defines the fit options properties.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#fit-to-page">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetActiveLayer">
            <summary>
            It is used to get the active layer back.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-the-active-layer">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetConnectorObject(System.String)">
            <summary>
            It is used to get the connector object for the given node Id.
            </summary>
            <param name = "id">Specifies the id of the connector which has taken from the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetCursor(System.String,System.Boolean)">
            <summary>
            It is used to define the cursor that corresponds to the given action.
            </summary>
            <param name = "action">Defines the action that is going to be performed.</param>
            <param name = "active">Specifies whether the cursor has to be activated or not.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetDiagramBounds">
            <summary>
            It allows the user to capture the diagram bounds.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-diagram-bounds">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetDiagramContent(System.Object)">
            <summary>
            It allows the user to get the HTML content.
            </summary>
            <param name = "styleSheets">Defines the collection of style files to be considered while exporting.</param>
            <returns> Returns the HTML content.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetHistoryStack(System.Boolean)">
            <summary>
            The number of undo or redo actions can be stored on the history list.
            </summary>
            <param name = "isUndoStack">Returns the history stack values.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-history-stack">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetModuleName">
            <summary>
            It returns the module name of the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetNodeObject(System.String)">
            <summary>
            The node can be captured from its id itself.
            </summary>
            <param name = "id">Returns the id of the node to be captured.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#get-the-node">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetPersistData">
            <summary>
            Get the properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Group">
            <summary>
            Group the selected nodes and connectors in diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#grouping-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.HideTooltip(System.Object)">
            <summary>
            It is used to hide the tooltip for the corresponding diagram object.
            </summary>
            <param name = "obj">Defines the object, which tooltip has to be hidden.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#tool-tip">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.MoveForward">
            <summary>
            It is used to send the selected nodes or connectors to forward.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#order-commands">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.MoveObjects(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            It is used to move the objects from one layer to another layer in the diagram.
            </summary>
            <param name = "objects">Defines the object id of the string array.</param>
            <param name = "targetLayer">Specifies the target layer to which the object has to be moved.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#move-object-from-one-to-another-layer">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Nudge(Syncfusion.Blazor.Diagrams.NudgeDirection,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            It is used to move the selected objects towards the given direction.
            </summary>
            <param name = "direction">Defines the object id of the string array.</param>
            <param name = "x">Defines the distance by which the selected objects have to be moved horizontally.</param>
            <param name = "y">Defines the distance by which the selected objects have to be moved vertically.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#nudge">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Pan(System.Double,System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            It is used to pan the diagram control to the horizontal and vertical offsets.
            </summary>
            <param name = "horizontalOffset">Defines the horizontal distance to which the diagram has to be scrolled.</param>
            <param name = "verticalOffset">Defines the vertical distance to which the diagram has to be scrolled.</param>
            <param name = "focusedPoint">Defines the point at which the diagram to be focused.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#pan">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Print(Syncfusion.Blazor.Diagrams.IPrintOptions)">
            <summary>
            It is used to print the diagram.
            </summary>
            <param name = "options">Defines how the image to be printed.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#print-and-exporting">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.PrintImage(System.String,Syncfusion.Blazor.Diagrams.IExportOptions)">
            <summary>
            It is used to print the native/html nodes of the diagram.
            </summary>
            <param name = "image">Defines the image content.</param>
            <param name = "options">Defines the properties of the image.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Redo">
            <summary>
            It is used to restore the last undo action.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#redo">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Remove(System.Object)">
            <summary>
            It is used to remove the given object from the diagram.
            </summary>
            <param name="obj">Specifies the object in the diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveConstraints(System.Double,System.Double)">
            <summary>
            Remove constraints at run time.
            </summary>
            <param name = "constraintsType">Specifies the type of constraints.</param>
            <param name = "constraintsValue">Specifies the constraints which have to be removed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveLabels(System.Object,System.Collections.ObjectModel.ObservableCollection{System.Object})">
            <summary>
            Remove Labels at the run time.
            </summary>
            <param name = "obj">The node to which the label should be removed.</param>
            <param name = "labels">The annotation to be removed during runtime.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemovePorts(Syncfusion.Blazor.Diagrams.DiagramNode,System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.DiagramPort})">
            <summary>
            Remove Ports at the run time.
            </summary>
            <param name = "obj">Specifies the ports to be removed at runtime.</param>
            <param name = "ports">Specifies the ports.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#remove-the-ports">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.RemoveProcess(System.String)">
            <summary>
            Remove a process from the sub-process.
            </summary>
            <param name = "id">Specifies the Id of the subprocess.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Render">
            <summary>
            Renders the diagram control with nodes and connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Reset">
            <summary>
            Resets the zoom and scroller offsets to default values.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#reset-the-segments">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ResetSegments">
            <summary>
            Resets the segments of the connectors.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#reset-the-segments">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Rotate(System.Object,System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            Rotates the given nodes/connectors by the given angle.
            </summary>
            <param name = "obj">Specifies the nodes/connector to be rotated.</param>
            <param name = "angle">Specifies the angle to be rotated.</param>
            <param name = "pivot">Specifies the point of rotation.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/interaction/#rotate">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SameSize(Syncfusion.Blazor.Diagrams.SizingOptions,System.Object)">
            <summary>
            Scales the given objects to the size of the first object in the group.
            </summary>
            <param name = "option">Specifies the sizing options of the selected items.</param>
            <param name = "objects">Specifies the selected items.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/commands/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SaveDiagram">
            <summary>
            Serializes the diagram control as a string.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#save-and-load-the-diagram">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Scale(System.Object,System.Double,System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            Scales the given objects by the given ratio.
            </summary>
            <param name = "obj">The object to which the scaling should beapplied.</param>
            <param name = "sx">Specifies the value of X.</param>
            <param name = "sy">Specifies the value of Y.</param>
            <param name = "pivot">Specifies the point where the object to be placed.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/interaction/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Select(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Selects the given collection of objects.
            </summary>
            <param name = "objects">Specifies the selected nodes/connectors.</param>
            <param name = "multipleSelection">specifies the selection of one or more nodes/connectors.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/tools/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SelectAll">
            <summary>
            Selects the all the objects.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SendBackward">
            <summary>
            send the selected nodes or connectors back.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/commands/#sendbackward-command">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SendLayerBackward(System.String)">
            <summary>
            move the layer backward.
            </summary>
            <param name = "layerName">Represents the layer name which is to be moved backward.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/layers/#sendlayerbackward">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SendToBack">
            <summary>
            send the selected nodes or connectors back.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/commands/#sendtoback-command">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SetActiveLayer(System.String)">
            <summary>
            set the active layer.
            </summary>
            <param name = "layerName">defines the name of the layer which is to be active layer.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/layers/#setactivelayer">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.SetStackLimit(System.Double)">
            <summary>
            To limit the history entry of the diagram.
            </summary>
            <param name = "stackLimit">Specifies the restriction of undo and redo action to a certain limit.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#set-stack-limit">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ShowTooltip(System.Object)">
            <summary>
            Shows tooltip for corresponding diagram object.
            </summary>
            <param name = "obj">Specifies the object to show tooltip.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#tool-tip">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.StartGroupAction">
            <summary>
            Starts grouping the actions that will be undone/restored as a whole.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#group-action">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.StartTextEdit(System.Object,System.String)">
            <summary>
            Edits the annotation of node/connector.
            </summary>
            <param name = "node">The node in which annotation should be edited.</param>
            <param name = "id">The id of the annotation.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UnGroup">
            <summary>
            UnGroup the selected nodes and connectors in diagram.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#undo">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UnSelect(System.Object)">
            <summary>
            Removes the given object from selection list.
            </summary>
            <param name = "obj">The object to be removed.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Undo">
            <summary>
            Restores the last action that is performed.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#undo">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.UpdateViewPort">
            <summary>
            Update the diagram clipboard dimension.
            </summary>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#update-view-port">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.Zoom(System.Double,Syncfusion.Blazor.Diagrams.PointModel)">
            <summary>
            Allows the user to zoom in or zoom out.
            </summary>
            <param name = "factor">Defines the factor by which the diagram is to be zoomed.</param>
            <param name = "focusedPoint">Defines the point with respect to which diagram has to be zoomed.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#zoom">public methods</a>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.ZoomTo(Syncfusion.Blazor.Diagrams.ZoomOptions)">
            <summary>
            Zooms to the specific point.
            </summary>
            <param name = "options">The options for zoom point.</param>
            <remarks>
            For better understanding refer to the diagram <a href="https://blazor.syncfusion.com/documentation/diagram/methods/#zoom">public methods</a>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnFocus">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnClick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMousemove">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMouseover">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMouseout">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMousedown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnMouseup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnDblclick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnKeydown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnKeyup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfDiagram.OnDrop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnHybridParametersSet">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagram.OnHybridAfterRender(System.Boolean)">
            <returns> Returns asynchronous operation which is executed when the rendering of all the references to the component are populated. </returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfDiagramBase">
            <summary>
            Represents to sync the client side diagram object properties with server side objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagramBase.UpdateCollection(System.Collections.IList,System.Boolean)">
            <summary>
            Update collection changes to client from server.
            </summary>
            <param name="obj">Current list.</param>
            <param name="isRemoved">If true, the object removed from collection; false to add the object to collection.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfDiagramBase.RandomString(System.Int32)">
            <summary>
            Generate random string for setting name for nodes/connectors.
            </summary>
            <param name="length"> Sets a length of the string.</param>
            <returns>Returns the random string.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfOverview">
            <summary>
            It allows the user to see a preview or an overall view of the entire content of a diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Nodes="@NodeCollection" Constraints="@DiagramConstraints" id="diagram" Height="600px">
             <DiagramScrollSettings ScrollLimit = "@ScrollLimit.Infinity" />
             < DiagramSnapSettings Constraints="@SnapConstraints.None"/>
             <DiagramRulerSettings ShowRulers = "true" />
            </ SfDiagram >
            < SfOverview Width="100%" Height="150px" SourceID="diagram" />
            @Code
            {
              //Defines diagram's nodes collection
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>();
              public DiagramConstraints DiagramConstraints = DiagramConstraints.Default;
              protected override void OnInitialized()
              {
              DiagramNode Node = new DiagramNode()
              {
                Id = "group",
                OffsetX = 200,
                OffsetY = 200,
                Width = 100,
                 Height = 100,
                Annotations = new ObservableCollection<DiagramNodeAnnotation>()
                {
                 new DiagramNodeAnnotation()
                 {
                   Content = "Node1",
                   Style = new AnnotationStyle()
                   {
                     Color = "white",
                   }
                  }
                 },
                Style = new NodeShapeStyle() { Fill = "cornflowerblue", StrokeColor = "white" }
               };
               NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.updateChildProperties(System.String,System.Object)">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.Height">
            <summary>
            Defines the height of the overview
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.SourceID">
            <summary>
            Defines the ID of the overview
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.Width">
            <summary>
            Defines the width of the overview
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.GetPersistData">
            <summary>
            Get the properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnFocus">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnClick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMousemove">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMouseover">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMouseout">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMousedown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnMouseup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnDblclick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnKeydown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnKeyup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfOverview.OnDrop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfOverview.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SfSymbolPalette">
            <summary>
            The SymbolPalette represents to displays a collection of palettes. The palette shows a set of nodes and connectors. It allows to drag and drop the nodes and connectors into the diagram.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" SymbolInfo="@SymbolInfo">
             <SymbolPalettePalettes>
               @* Sets the palette header property for the symbols *@
               <SymbolPalettePalette Id = "basic" Expanded="true" Symbols="@BasicShapes" IconCss="e-ddb-icons e-flow" Title="Basic Shapes">
               </SymbolPalettePalette>
             </SymbolPalettePalettes>
            </SfSymbolPalette>
            @Code{
              // Defines palette's basic-shape collection
              public ObservableCollection<DiagramNode> BasicShapes { get; set; }
              public SymbolInfo SymbolInfo;
              protected override void OnInitialized()
              {
               // Enables to fit the content into the specified palette item size. When it is set as false, the element is rendered with actual node size
               SymbolInfo = new SymbolInfo() { Fit = true };
               //Initialize the basicshapes for the symbol palette
               BasicShapes = new ObservableCollection<DiagramNode>()
               {
                 new DiagramNode()
                 {
                   Id = "Rectangle",
                   Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle }
                 }
               };
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.IsUpdated">
            <summary>
            Represents all the properties for the diagram to be rendered.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.RandomString(System.Int32)">
            <summary>
            Generate random string for setting name for nodes/connectors.
            </summary>
            <param name="length"> Sets a length of the string.</param>
            <returns>Returns random string.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AddPalettes(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagrams.SymbolPalettePalette})">
            <summary>
            Add particular palettes to symbol palette at runtime.
            </summary>
            <param name="palettes">Specifies the palette details.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.RemovePalettes(System.String[])">
            <summary>
            Add particular palettes to symbol palette at runtime.
            </summary>
            <param name="palettes">Specifies the palette to be removed.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AccessKey">
            <summary>
            Configures the key, when it pressed the symbol palette will be focused
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AllowDrag">
            <summary>
            Defines whether the symbols can be dragged from palette or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.ConnectorDefaults">
            <summary>
            Helps to return the default properties of connectors
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnableAnimation">
            <summary>
            Enables/Disables animation when the palette header is expanded/collapsed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.EnableSearch">
            <summary>
            Enables/Disables search option in symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.ExpandMode">
            <summary>
            Defines how many palettes can be at expanded mode at a time
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Height">
            <summary>
            Defines the height of the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.IgnoreSymbolsOnSearch">
            <summary>
            Defines the symbols to be added in search palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.NodeDefaults">
            <summary>
            Helps to return the default properties of node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Palettes">
            <summary>
            Defines the collection of symbol groups
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolDragSize">
            <summary>
            Defines the size of a drop symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolHeight">
            <summary>
            Defines the height of the symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolInfo">
            <summary>
            Defines the size, appearance and description of a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolMargin">
            <summary>
            Defines the space to be left around a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolPreview">
            <summary>
            Defines the size and position of the symbol preview
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.SymbolWidth">
            <summary>
            Defines the width of the symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Width">
            <summary>
            Defines the width of the symbol palette
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.AddPaletteItem(System.String,System.Object)">
            <summary>
            Used to add the palette item as nodes or connectors in palettes
            </summary>
            <param name="paletteName">Specifies the name of the palette to be added</param>
            <param name="paletteSymbol">Specifies the symbol to be added</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.GetModuleName">
            <summary>
            To get Module name
             @private
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.GetPersistData">
            <summary>
            Get the properties to be maintained in the persisted state.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.RemovePaletteItem(System.String,System.String)">
            <summary>
            Used to remove the palette item as nodes or connectors in palettes
            </summary>
            <param name="paletteName">Specifies the palette name</param>
            <param name="symbolId">Specifies the ID in which it should be removed from the specified palette</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.Render">
            <summary>
            Renders nodes and connectors in the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnFocus">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnClick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMousemove">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMouseover">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMouseout">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMousedown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnMouseup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnDblclick">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnKeydown">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnKeyup">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnDrop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.updateChildProperties(System.String,System.Object)">
            <returns> Returns the properties of child components</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.GetJSNamespace">
            <returns> Get the parent namespaces</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SfSymbolPalette.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.Margin">
            <summary>
            Represents the margin for the diagram, nodes, connectors, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.Margin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Margin.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.Margin.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeCollapseIcon">
            <summary>
            Represents the collapsed state of the node.
            </summary>
            <remarks>
            Node has different kinds of states such as Expand and Collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
             public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
             protected override void OnInitialized()
             {
              // A node is created and stored in nodes collection.
              DiagramNode Node = new DiagramNode()
                {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  CollapseIcon = new NodeCollapseIcon()
                  {
                     Width = 70,
                     Height = 20,
                     Shape = IconShapes.ArrowUp,
                     Fill = "red",
                     BorderColor = "black",
                     BorderWidth = 2,
                     CornerRadius = 5
                   },
                };
                NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.#ctor">
            <summary>
            Represents the collapsed state of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.BorderColor">
            <summary>
            Gets or sets the border color of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.BorderWidth">
            <summary>
            Gets or sets the border width of an icon. By default, it is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Content">
            <summary>
            Gets or sets the custom content of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.CornerRadius">
            <summary>
            Gets or sets the corner radius of an icon border.
            </summary>
            <remarks>
            CornerRadius property is used to provide a rounded border instead of a sharp one. By default, it is set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Fill">
            <summary>
            Gets or sets the fill color of an Icon. By default, it will be white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Height">
            <summary>
            Gets or sets the height of an Icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.HorizontalAlignment">
            <summary>
            Describes how an Icon element is horizontally positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the Horizontal Alignment of an icon </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Margin">
            <summary>
            Sets the space around the collapse icon. By default, it is set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[CollapseIcon = new NodeCollapseIcon() {
               Margin = new CollapseIconMargin { Top = 10 , Left = 10, Bottom = 10, Right = 10 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Offset">
            <summary>
            Specifies the position of an icon relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=1. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the icon will be position at the top left corner of the node.   </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the icon will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.    When x= 1 and y = 1, then the icon will be position at the bottom right corner of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Padding">
            <summary>
            Specifies the space inside the border of an icon.
            </summary>
            <remarks>
            By default, the padding will be 2 from all sides. The following code shows how to define the padding property of a NodeCollapseIcon.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[CollapseIcon = new NodeCollapseIcon() {
              Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.PathData">
            <summary>
            Defines the geometry of a path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Shape">
            <summary>
            Defines the shape information of the icon.
            </summary>
            <remarks>
            There are several shapes in the shape category of an icon such as Minus, Plus, ArrowUp, Arrow down, etc., By default, it will be None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.VerticalAlignment">
            <summary>
            Describes how an Icon element is vertically positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the vertical Alignment of an icon. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeCollapseIcon.Width">
            <summary>
            Gets or sets the width of an icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeExpandIcon">
            <summary>
            Represents the expanded state of the node.
            </summary>
            <remarks>
            Node has different kinds of states such as Expand and Collapse state. When the user clicks ExpandIcon, all the children from the respective node will get expanded whereas CollapseIcon is clicked, then all children from the respective node will get collapsed.  The following code shows, how to define NodeExpandIcon and its properties.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
              public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
              protected override void OnInitialized()
               {
               // A node is created and stored in nodes collection.
               DiagramNode Node = new DiagramNode()
               {
                  // Position of the node
                  OffsetX = 250,
                  OffsetY = 250,
                  // Size of the node
                  Width = 100,
                  Height = 100,
                  Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                  ExpandIcon = new NodeExpandIcon()
                  {
                    Width = 70,
                    Height = 20,
                    Shape = IconShapes.ArrowDown,
                    Fill = "red",
                    BorderColor = "black",
                    BorderWidth = 2,
                    CornerRadius = 5
                  },
               };
               NodeCollection.Add(Node);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeExpandIcon.#ctor">
            <summary>
            Represents the expanded state of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.BorderColor">
            <summary>
            Gets or sets the border color of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.BorderWidth">
            <summary>
            Gets or sets the border width of an icon. By default, it is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Content">
            <summary>
            Gets or sets the custom content of an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.CornerRadius">
            <summary>
            Gets or sets the corner radius of an icon border.
            </summary>
            <remarks>
            CornerRadius property is used to provide a rounded border instead of a sharp one. By default, it set to 0.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Fill">
            <summary>
            Gets or sets the fill color of an Icon. By default, it is set to white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Height">
            <summary>
            Gets or sets the height of an Icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.HorizontalAlignment">
            <summary>
            Describes how an Icon element is horizontally positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options  is used to defining the Horizontal Alignment of an icon </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node.</td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node. </td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Margin">
            <summary>
            Sets the space around the expand icon. By default, it is set to 0 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[         ExpandIcon = new NodeExpandIcon() {
             Margin = new ExpandIconMargin { Top = 0 , Left = 0, Bottom = 0, Right = 0 } ,
             },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Offset">
            <summary>
            Specifies the position of an icon relative to the bounds of the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">Offset values range from 0 to 1. By default, the offset values are set to X= 0.5 and Y=1. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   When x= 0 and y = 0, then the icon will be position at the top left corner of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">2.   When x= 0.5 and y = 0.5, then the icon will be position at the center of the node.  </td>
            </tr>
            <tr>
            <td style = "border: none">3.   When x= 1 and y = 1, then the icon will be position at the bottom right corner of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Padding">
            <summary>
            Specifies the space inside the border of an icon. By default, it is set 2 from all sides.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[ExpandIcon = new NodeExpandIcon() {
              Padding = new IconPadding { Top = 0 , Left = 0, Bottom = 0, Right = 0 }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.PathData">
            <summary>
            Defines the geometry of a path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Shape">
            <summary>
            Defines the shape information of the icon.
            </summary>
            <remarks>
            There are several shapes in the shape category of an icon such as Minus, Plus, ArrowUp, Arrow down, etc., By default, it will be None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.VerticalAlignment">
            <summary>
            Describes how an Icon element is vertically positioned or stretched in the node.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The list of following options is used to defining the vertical Alignment of an icon. </td>
            </tr>
            <tr>
            <td style = "border: none">1.   Stretch - Stretches the diagram element throughout the node. </td>
            </tr>
            <tr>
            <td style = "border: none">2.   Left - Aligns the diagram element at the left of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">3.   Right - Aligns the diagram element at the right of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">4.   Center - Aligns the diagram element at the center of the node.</td>
            </tr>
            <tr>
            <td style = "border: none">5.   Auto - Aligns the diagram element based on the characteristics of the node.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeExpandIcon.Width">
            <summary>
            Gets or sets the width of an icon. By default, it is set to 10.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.DiagramHyperlink">
            <summary>
            It lets users navigate from one page to another.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.DiagramHyperlink.#ctor">
            <summary>
            It lets users navigate from one page to another.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.Color">
            <summary>
            Sets fill color to the hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.Content">
            <summary>
            The hyperlink can be defined using text. This definition can be set in content.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramNodeAnnotation() {
             Hyperlink = new NodeHyperlink()
              {
               Link = https://www.google.com,Content=” Google”}
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.Link">
            <summary>
            It is a reference for a page to be navigated.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramNodeAnnotation() {
             Hyperlink = new NodeHyperlink()
              {
               Link = https://www.google.com }
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.DiagramHyperlink.TextDecoration">
            <summary>
            Decorates the content of the hyperlink as per the user’s preference.
            </summary>
            <remarks>
            The content can be decorated using underline, overline, or line through.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[new DiagramNodeAnnotation() {
              Hyperlink = new NodeHyperlink()
              {
               Link = https://www.google.com,Content=”Google”,TextDecoration=TextDecoration.Underline}
              }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeHyperlink">
            <summary>
            It allows users to navigate from one page to another. Hyperlink need not be a text (annotation).
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code
            {
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                  NodeCollection = new ObservableCollection<DiagramNode>();
                  DiagramNode node = new DiagramNode()
                  {
                     Width = 100,
                     Height = 100,
                     Annotations = new ObservableCollection<DiagramNodeAnnotation>() {
                     new DiagramNodeAnnotation() {  Hyperlink = new NodeHyperlink()
                     { Link = https://www.google.com,
                       Color =’red’
                      }
                  }
               },
              };
              NodeCollection.Add(node);
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeHyperlink.#ctor">
            <summary>
            It allows users to navigate from one page to another. Hyperlink need not be a text (annotation).
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorHyperlink">
            <summary>
            Defines the appearance and properties of the hyperlinks in the connector label.
            </summary>
            <remarks>
            The hyperlink can be customized by adding text, color. The Hyperlink can be set to the DiagramConnectorAnnotations of the connector.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Connectors="@ConnectorsCollection">
            </SfDiagram>
            @code
            {
              public ObservableCollection<DiagramConnector> ConnectorsCollection { get; set; }
              protected override void OnInitialized()
              {
               ConnectorsCollection = new ObservableCollection<DiagramConnector>();
               DiagramConnector Connector = new DiagramConnector()
               {
                 Width = 100,
                 Height = 100,
                 Annotations = new ObservableCollection<DiagramConnectorAnnotation>() {
                 new DiagramConnectorAnnotation() {
                 Hyperlink = new ConnectorHyperlink()
                 {
                    Link = "https://www.google.com",
                    Color=”red”,
                    Content=”Google”}
                  }
                 },
               };
               ConnectorsCollection.Add(Connector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorHyperlink.#ctor">
            <summary>
            Defines the appearance and properties of the hyperlinks in the connector label.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.NodeTooltip">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a node.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px"
                  Constraints="DiagramConstraints.Default | DiagramConstraints.Tooltip" Nodes="@NodeCollection">
            </SfDiagram>
            @code{
               // Defines diagram's nodes collection
               public ObservableCollection<DiagramNode> NodeCollection { get; set; }
               protected override void OnInitialized()
               {
                NodeCollection = new ObservableCollection<DiagramNode>();
                //Defines nodes
                DiagramNode Node = new DiagramNode()
                 {
                    Id = "node1",
                    Width = 100,
                    Height = 100,
                    OffsetX = 200,
                    OffsetY = 200,
                    Style = new NodeShapeStyle() { StrokeColor = "#6BA5D7", Fill = "#6BA5D7" },
                    Constraints = NodeConstraints.Default | NodeConstraints.Tooltip,
                    //Defines mouse over tooltip for a node
                    Tooltip = new NodeTooltip()
                    {
                      Content = "Node1",
                      //Sets to show tooltip at mouse position
                      RelativeMode = TooltipRelativeMode.Mouse
                    }
                 };
                 NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.NodeTooltip.#ctor">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Animation">
            <summary>
            This property allows the user to enable the animation to the tooltip.
            </summary>
            <remarks>
            To animate the tooltip specific animation effects are available and it can be controlled by Animation property. This property allows the user to set some animation effects such as display, duration, ZoomIn, ZoomOut,etc.
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[Animation = new Syncfusion.Blazor.Popups.AnimationModel()
            {
              //Animation settings to be applied on the tooltip, while it is being shown over the target.
              Open = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
              {
                //Animation effect on the tooltip is applied during open and close actions.
                Effect = Syncfusion.Blazor.Popups.Effect.ZoomIn,
                //Duration of the animation that is completed per animation cycle.
                Duration = 1000,
                //Indicating the waiting time before the animation begins.
                Delay = 0
              },
              //Animation settings to be applied on the tooltip, when it is closed.
              Close = new Syncfusion.Blazor.Popups.TooltipAnimationSettings()
              {
                Effect = Syncfusion.Blazor.Popups.Effect.ZoomOut,
                Duration = 500,
                Delay = 0
              }
             }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Content">
            <summary>
            Defines the textual content of the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Height">
            <summary>
            Gets or sets the height of the tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.OpenOn">
            <summary>
            Specifies whether the tooltip can be open automatically or open manually using public API. By default, its set to Auto.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Position">
            <summary>
            Defines the position of the Tooltip.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">•    Tooltip can be aligned by using the NodeTooltip property.  </td>
            </tr>
            <tr>
            <td style = "border: none">•    There are applicable positions such as TopLeft,  TopRight, BottomLeft, BottomRight, etc., where the tooltip can be displayed over the specific target elements. </td>
            </tr>
            <tr>
            <td style = "border: none">•    By default, the position of the tooltip will be TopLeft.</td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.RelativeMode">
            <summary>
            This property defines whether the tooltip has to displayed around the object or at the mouse position. By default, it will be Mouse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.ShowTipPointer">
            <summary>
            Defines the tooltip has tip pointer or not. By default, it will be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.NodeTooltip.Width">
            <summary>
            Gets or sets the width of the tooltip.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.ConnectorTooltip">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code
            {
               //Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection = new ObservableCollection<DiagramConnector>();
               protected override void OnInitialized()
               {
                DiagramConnector DiagramConnector = new DiagramConnector()
                {
                  SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                  TargetPoint = new ConnectorTargetPoint() { X = 200, Y = 200 },
                  //Specify the segments types as straight.
                  Type = Segments.Straight,
                  Constraints = ConnectorConstraints.Default | ConnectorConstraints.Tooltip,
                  //Defines mouse over tooltip for a connector
                  Tooltip = new ConnectorTooltip()
                  {
                    //Sets the content of the tooltip
                    Content = "Connector1",
                    //Sets the position of the tooltip
                    Position = Syncfusion.Blazor.Popups.Position.BottomRight,
                    //Sets the tooltip position relative to the connector
                    RelativeMode = TooltipRelativeMode.Object
                  }
                };
               ConnectorCollection.Add(DiagramConnector);
              }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.ConnectorTooltip.#ctor">
            <summary>
            Represents the textual content that appears while the mouse is hovering over a connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PortShapeStyle">
            <summary>
            Represents the appearance of the port.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[<SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
             @code{
               public ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>() { };
               protected override void OnInitialized()
               {
                // A node is created and stored in nodes collection.
                DiagramNode Node = new DiagramNode()
                {
                    // Position of the node
                    OffsetX = 250,
                    OffsetY = 250,
                    // Size of the node
                    Width = 100,
                    Height = 100,
                    Style = new NodeShapeStyle() { Fill = "#6BA5D7", StrokeColor = "white" },
                    // Initialize port collection
                    Ports = new ObservableCollection<DiagramPort>() {
                    new DiagramPort() {
                       Id = "port1",
                       Offset = new NodePortOffset(){X= 0.5, Y= 0.5 }, Visibility = PortVisibility.Visible,
                       //Set the style for the port
                       Style=new PortShapeStyle(){ Fill="red" , Opacity = 1,
                       StrokeColor= "black", StrokeWidth= 1, StrokeDashArray= "2,2"},
                     }
                    },
                  };
                  NodeCollection.Add(Node);
               }
             }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PortShapeStyle.#ctor">
            <summary>
            Represents the appearance of the port.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or path. By default, it’s set to white.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.Gradient">
            <summary>
            This property allows the users to define and apply the gradient effect to the port.h.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none">The gradient stop’s opacity property defines the transparency level of the region. The gradient stop property defines the color and a position, where the previous color transition ends, and a new color transition starts. There are two types of gradients as follows, </td>
            </tr>
            <tr>
            <td style = "border: none">•    LinearGradient </td>
            </tr>
            <tr>
            <td style = "border: none">•    RadialGradient </td>
            </tr>
            </table>
            </remarks>
            <example>
            <code lang="Razor">
            <![CDATA[ Style = new PortShapeStyle() {
              Gradient = new DiagramGradient()
              {
               //Start point of linear gradient
               X1 = 0, Y1 = 0,
               //End point of linear gradient
               X2 = 50, Y2 = 50,
               //Sets an array of stop objects
               Stops = new ObservableCollection<DiagramsGradientStop>()
               {
                 new DiagramsGradientStop(){ Color = "white", Offset = 0},
                 new DiagramsGradientStop(){ Color = "#6BA5D7", Offset = 100}
               },
               Type = GradientType.Linear
              }
            },
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.Opacity">
            <summary>
            Defines the transparency level of the shape or path.
            </summary>
            <remarks>
            <table style = "border: none">
            <tr>
            <td style = "border: none"> Opacity values are ranges from 0 to 1 where,</td>
            </tr>
            <tr>
            <td style = "border: none"> •   0 represents completely transparent</td>
            </tr>
            <tr>
            <td style = "border: none">•    0.5 represents Partially transparent </td>
            </tr>
            <tr>
            <td style = "border: none">•    1 represents not transparent at all. </td>
            </tr>
            </table>
            </remarks>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.StrokeColor">
            <summary>
            Gets or sets the color to the stroke of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PortShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the shape or path.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PreviewMargin">
            <summary>
            Defines the space around the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.mainParent">
            <summary>
            Defines the space around the symbol preview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Bottom">
            <summary>
            It sets the space left at the bottom of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Left">
            <summary>
            It sets the space left at the left of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Right">
            <summary>
            It sets the space left at the right of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewMargin.Top">
            <summary>
            It sets the space left at the top of a symbol preview. By default, it is set to 0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewMargin.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewMargin.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewMargin.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.PreviewOffset">
            <summary>
            Represents the distance to be left between the cursor and the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewOffset._jsNamespace">
            <summary>
            Represents the distance to be left between the cursor and the symbol.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewOffset.X">
            <summary>
            Sets the x-coordinate position for the symbol. By default, X is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.PreviewOffset.Y">
            <summary>
            Sets the y-coordinate position for the symbol. By default, Y is set to 0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewOffset.GetJSNamespace">
            <returns> Get the parent namespaces.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewOffset.OnInitializedAsync">
            <returns>Returns asynchronous operation when the component is ready to start, having received its initial parameters from its parent in the render tree.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.PreviewOffset.OnParametersSetAsync">
            <returns> Returns asynchronous operation when the component has received parameters from its parent in the render tree, and the incoming values have been assigned to properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel">
            <summary>
            Specifies the source label to the connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram  Height="600px" Connectors="@ConnectorCollection">
            </SfDiagram>
            @code{
               ///Defines diagram's connector collection
               public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
               protected override void OnInitialized()
               {
                   ConnectorCollection = new ObservableCollection<DiagramConnector>();
                   DiagramConnector Connector = new DiagramConnector()
                   {
                       Id = "Connector1",
                       Type = Segments.Straight,
                       Shape = new DiagramConnectorShape()
                       {
                           Type = ConnectionShapes.UmlClassifier,
                           //Set an relationship for connector
                           Relationship = ClassifierShape.Dependency,
                           Multiplicity = new DiagramClassifierMultiplicity()
                           {
                               //Set multiplicity type
                               Type = Multiplicity.OneToMany,
                               //Set source label to connector
                               Source = new SourceMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "89",
                                   UpperBounds = "67"
                               },
                               //Set target label to a connector
                               Target = new TargetMultiplicityLabel()
                               {
                                   Optional = true,
                                   LowerBounds = "78",
                                   UpperBounds = "90"
                               }
                           }
                       },
                       //Define connector start and endpoints
                       SourcePoint = new ConnectorSourcePoint() { X = 100, Y = 100 },
                       TargetPoint = new ConnectorTargetPoint() { X = 300, Y = 300 }
                   };
                   ConnectorCollection.Add(Connector);
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.#ctor">
            <summary>
            Specifies the source label to the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.LowerBounds">
            <summary>
            Defines the minimum bounds of the Classifier Multiplicity. Lower bounds should be lesser than upper bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.Optional">
            <summary>
            Defines the optionality for the connector source label. By default, It`s set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SourceMultiplicityLabel.UpperBounds">
            <summary>
            Defines the maximum bounds of the Classifier Multiplicity. Upper bounds should be greater than or equal to Lower bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.TargetMultiplicityLabel">
            <summary>
            Specifies the target label to the UML type connector.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            //Set target label to connector
            Target = new TargetMultiplicityLabel()
            {
               Optional = true,
               LowerBounds = "78",
               UpperBounds = "90"
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.TargetMultiplicityLabel.#ctor">
            <summary>
            Specifies the target label to the UML type connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SuccessSubEvent">
            <summary>
            Represents the event within another subprocess.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfDiagram Height="600px" Nodes="@NodeCollection">
            </SfDiagram>
            @code {
               //Initialize the node collection with node
               ObservableCollection<DiagramNode> NodeCollection = new ObservableCollection<DiagramNode>()
               {
                   new DiagramNode()
                   {
                       // Position of the node
                       OffsetX = 100, OffsetY = 100,
                       // Size of the node
                       Width = 100, Height = 100,
                       // Unique id of the node
                       Id = "node1",
                       //Defines the type to BPMN and shape to activity
                       Shape = new DiagramShape()
                       {
                           Type = Shapes.Bpmn,
                           BpmnShape = BpmnShapes.Activity,
                           //Sets the activity to subprocess
                           Activity = new DiagramBpmnActivity()
                           {
                               Activity = BpmnActivities.SubProcess,
                               //Sets collapsed to true and type to Transaction
                               SubProcess = new DiagramBpmnSubProcess()
                               {
                                   Collapsed = true,
                                   Type = BpmnSubProcessTypes.Transaction,
                                   //Sets offset and visible for cancel and offset for failure
                                   Transaction = new DiagramBpmnTransactionSubProcess()
                                   {
                                       Success = new SuccessSubEvent(){ Visible = true, Offset = new BpmnSubEventOffset(){ X = 0.25, Y = 1}},
                                   }
                               },
                           }
                       }
                   }
               };
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SuccessSubEvent.#ctor">
            <summary>
            Represents the event within another subprocess.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Annotations">
            <summary>
            Represents an annotation element connected to the SubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Event">
            <summary>
            Gets or sets the type of BpmnEvent. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Height">
            <summary>
            Gets or sets the height of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.HorizontalAlignment">
            <summary>
            Represents how to horizontally align a node concerning its parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Id">
            <summary>
            Specifies the Id of the BpmnSubEvent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Margin">
            <summary>
            Specifies the space to be left between the node and its immediate parent. By default, it is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Offset">
            <summary>
            Specifies the position of the sub-event. By default, it is set to 0.5 in X and Y.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Ports">
            <summary>
            Specifies the collection of connection points of the sub-events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Trigger">
            <summary>
            Specifies the type of event trigger. By default, it is set to Start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.VerticalAlignment">
            <summary>
            Represents how to vertically align a node concerning its immediate parent. By default, it is set to Center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Visible">
            <summary>
            Specifies the visibility of the sub-event. By default, it is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SuccessSubEvent.Width">
            <summary>
            Gets or sets the width of the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagrams.SymbolPalettePalette">
            <summary>
            Defines the appearance and behavior of the symbol group in the symbol palette.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
                <SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" Palettes="@Palettes">
                   @* Sets the margin for the symbols *@
               @code{
                   public ObservableCollection<SymbolPalettePalette> Palettes;
               // Defines palette's basic-shape collection
               public ObservableCollection<Object> BasicShapes { get; set; }
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalette()
                   {
                        new DiagramNode()
                   {
                   Id = "Rectangle",
                   Shape = new DiagramShape() { Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Rectangle }},};
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.#ctor">
            <summary>
            Initialize the appearance and behavior of the symbol group in the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Expanded">
            <summary>
            Sets whether the symbol palette items should be expanded or not. By default, Expanded is set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Height">
            <summary>
            Specifies the height of the symbol group. By default, Height is undefined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.IconCss">
            <summary>
            Defines the content of the symbol group. By default, it is set to empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Id">
            <summary>
            Sets a unique id for the symbol group. By default, Id is set to empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Symbols">
            <summary>
            Defines the group of predefined symbols.
            </summary>
            <example>
            <code lang="Razor">
            <![CDATA[
            <SfSymbolPalette Height="600px" SymbolHeight="60" SymbolWidth="60" Palettes="@Palettes">
            </SfSymbolPalette>
            @code{
               public List<SymbolPalettePalette> Palettes;
               // Defines palette's basic-shape collection
               public ObservableCollection<object> BasicShapes { get; set; }
               protected override void OnInitialized()
               {
                   Palettes = new ObservableCollection<SymbolPalettePalette>();
                   BasicShapes = new ObservableCollection<object>
                   ()
               {
               new DiagramNode()
               {
                    Id="Ellipse",
                    Shape = new DiagramShape(){ Type = Shapes.Basic, BasicShape = Syncfusion.Blazor.Diagrams.BasicShapes.Ellipse  }
               },
               };
                   Palettes.Add(new SymbolPalettePalette() { Id = "BasicShapes", Expanded = true, Symbols = BasicShapes, Title = "Basicshapes" });
               }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Blazor.Diagrams.SymbolPalettePalette.Title">
            <summary>
            Displays a title for the symbol group in the symbol palette. By default, the Title is set to empty string.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.Uploader">
            <summary>
            Returns the upload locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.NumericTextBox">
            <summary>
            Returns the numerictextbox locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.LocaleData.FormValidator">
            <summary>
            Returns the formValidator locale.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Thickness">
            <summary>
            Represents the class that defines the styles and types to arrange objects in containers.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Thickness.#ctor(Syncfusion.Blazor.Diagram.Thickness)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> class.
            </summary>
            <param name="src">Thickness.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Thickness.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Left">
            <summary>
            Gets or sets the left value of the thickness.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Right">
            <summary>
            Gets or sets the right value of the thickness.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Top">
            <summary>
            Gets or sets the top value of the thickness.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Thickness.Bottom">
            <summary>
            Gets or sets the bottom value of the thickness.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Margin">
            <summary>
            Represents the class that defines the space to be left between an object and its immediate parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Margin.#ctor(Syncfusion.Blazor.Diagram.Margin)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Margin"/> class.
            </summary>
            <param name="src">Margin.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Margin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Margin"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Bottom">
            <summary>
            Gets or sets the space to be left from the bottom side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Left">
            <summary>
            Gets or sets the space to be left from the left side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Right">
            <summary>
            Gets or sets the space to be left from the right side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Margin.Top">
            <summary>
            Gets or sets the space to be left from the top side of the parent of an element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shadow">
            <summary>
            Represents the class that defines the Shadow appearance of the objects
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.#ctor(Syncfusion.Blazor.Diagram.Shadow)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Shadow"/> class.
            </summary>
            <param name="src">Shadow.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Shadow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Shadow"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Angle">
            <summary>
            Gets or sets the Angle of the shadow. By default, it is 45.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Distance">
            <summary>
            Gets or sets the Distance of shadow. By default, it is 5px.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shadow.Opacity">
            <summary>
            Gets or sets the Opacity of shadow. The opacity value ranges from 0 to 1.  By default, it is 0.7.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Gradient">
            <summary>
            Represents the class that defines to paints the node with a smooth transition from one color to another color.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Gradient.#ctor(Syncfusion.Blazor.Diagram.Gradient)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Gradient"/> class.
            </summary>
            <param name="src">Gradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Gradient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Gradient"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Gradient.ID">
            <summary>
            Gets or sets the Id of the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Gradient.Stops">
            <summary>
            Gets or sets the color and a position, where the previous color transition ends, and a new color transition starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Gradient.Type">
            <summary>
            Gets or sets the type of gradient.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LinearGradient">
            <summary>
            Represents the class that defines to paints the node with linear color transitions
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradient.#ctor(Syncfusion.Blazor.Diagram.LinearGradient)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LinearGradient"/> class.
            </summary>
            <param name="src">LinearGradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LinearGradient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LinearGradient"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradient.X1">
            <summary>
            Gets or sets the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradient.X2">
            <summary>
            Gets or sets the start point of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradient.Y1">
            <summary>
            Gets or sets the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.LinearGradient.Y2">
            <summary>
            Gets or sets the endpoint of the Linear gradient.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RadialGradient">
            <summary>
            Represents the focal point defines the beginning of the gradient, and a circle defines the end point of the gradient.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradient.#ctor(Syncfusion.Blazor.Diagram.RadialGradient)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.RadialGradient"/> class.
            </summary>
            <param name="src">RadialGradient.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.RadialGradient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.RadialGradient"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradient.Cx">
            <summary>
            Gets or sets the center point of the outer circle of the radial gradient 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradient.Cy">
            <summary>
            Gets or sets the center point of the outer circle of the radial gradient
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradient.Fx">
            <summary>
            Gets or sets the center point of the inner circle of the radial gradient
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradient.Fy">
            <summary>
            Gets or sets the center point of the inner circle of the radial gradient
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RadialGradient.R">
            <summary>
            Gets or sets the radius of a radial gradient
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientStop">
            <summary>
            Represents the class that defines the different colors and the region of color transitions.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.#ctor(Syncfusion.Blazor.Diagram.GradientStop)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.GradientStop"/> class.
            </summary>
            <param name="src">GradientStop.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.GradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.GradientStop"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Color">
            <summary>
            Gets or sets the color to be filled over the specified region.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Offset">
            <summary>
            Gets or sets the position where the previous color transition ends, and a new color transition starts.  
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GradientStop.Opacity">
            <summary>
            Gets or sets the transparency level of the region.  
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextShapeStyle">
            <summary>
            Represents the class that defines the appearance of text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextShapeStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextShapeStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextShapeStyle.#ctor(Syncfusion.Blazor.Diagram.TextShapeStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextShapeStyle"/> class.
            </summary>
            <param name="src">TextShapeStyle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.Bold">
            <summary>
            Gets or sets the users to enable or disable the bold style of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.Color">
            <summary>
            Gets or sets the font color of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.FontFamily">
            <summary>
            Gets or sets the font type of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.FontSize">
            <summary>
            Gets or sets the font size of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.Italic">
            <summary>
            Gets or sets the users to enable or disable the italic style of a text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.TextAlign">
            <summary>
            Gets or sets the alignment of the text inside the node bounds. By default, it's set to center.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.TextDecoration">
            <summary>
            Gets or sets how the text should be decorated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.TextOverflow">
            <summary>
            Gets or sets how to handle the text when it exceeds the given size. By default, it's set to Wrap.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.TextWrapping">
            <summary>
            Gets or sets how the text should be wrapped when the text size exceeds some specific bounds. By default, its set to WrapWithOverflow.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextShapeStyle.WhiteSpace">
            <summary>
            Gets or sets how to white space and new line characters must be handled. By default, it's set to CollapseSpace.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ShapeStyle">
            <summary>
            Represents the class that defines the style of shape/path.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ShapeStyle.#ctor(Syncfusion.Blazor.Diagram.ShapeStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ShapeStyle"/> class.
            </summary>
            <param name="src">ShapeStyle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Fill">
            <summary>
            Gets or sets the fill color of the shape or path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Gradient">
            <summary>
            Gets or sets the users to define and apply the gradient effect to the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.Opacity">
            <summary>
            Gets or sets the transparency level of the diagram elements. By default, it's set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeColor">
            <summary>
            Gets or sets the stroke color of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeDashArray">
            <summary>
            Gets or sets the pattern of dashes and space to the stroke of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeStyle.StrokeWidth">
            <summary>
            Gets or sets the width to the stroke of the diagram elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Canvas">
            <summary>
            Represents the Canvas that is used to define a plane(canvas) and to arrange the children based on margin.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.Measure(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures the minimum space that the canvas requires
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.Arrange(Syncfusion.Blazor.Diagram.Size,System.Nullable{System.Boolean})">
            <summary>
            Arranges the child elements of the canvas
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.AlignChildBasedOnParent(Syncfusion.Blazor.Diagram.ICommonElement,Syncfusion.Blazor.Diagram.Size,Syncfusion.Blazor.Diagram.Size,System.Double,System.Double)">
            <summary>
            Aligns the child element based on its parent
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Canvas.AlignChildBasedOnPoint(Syncfusion.Blazor.Diagram.DiagramElement,System.Double,System.Double)">
            <summary>
            Aligns the child elements based on a point
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Container">
            <summary>
            Represents the Container that is used to group related objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.#ctor(Syncfusion.Blazor.Diagram.Container)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Container"/> class.
            </summary>
            <param name="src">group related objects.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Container"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Container.Padding">
            <summary>
            Gets or sets the space between the container and its immediate children.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Container.Children">
            <summary>
            Gets or sets the collection of child elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.HasChildren">
            <summary>
            Returns a value indiciate whether the container has child elements or not
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.Measure(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures the minimum space that the container requires
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.Arrange(Syncfusion.Blazor.Diagram.Size,System.Nullable{System.Boolean})">
            <summary>
            Arranges the container and its children
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.StretchChildren(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Stretches the child elements based on the size of the container
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.ApplyPadding(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Considers the padding of the element when measuring its desired size.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Container.FindChildOffsetFromCenter(Syncfusion.Blazor.Diagram.DiagramElement,Syncfusion.Blazor.Diagram.Point)">
            <summary>
            Finds the offset of the child element with respect to the container.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramElement">
            <summary>
            Represent the diagram element that defines the basic unit of diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.#ctor(Syncfusion.Blazor.Diagram.DiagramElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/> class.
            </summary>
            <param name="src">basic unit of diagram.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Measure(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures the minimum space that the element requires
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.Arrange(Syncfusion.Blazor.Diagram.Size,System.Nullable{System.Boolean})">
            <summary>
            Arranges the element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.UpdateBounds">
            <summary>
            Updates the bounds of the element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramElement.ValidateDesiredSize(Syncfusion.Blazor.Diagram.Size,Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Validates the size of the element with respect to its minimum and maximum size
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramTemplates">
            <summary>
            Represents the template for the diagram element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.NodeTemplate">
            <summary>
            Represents the template content to the node. By default, it will be null.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramTemplates.UserHandleTemplate">
            <summary>
            Represents the template content to the UserHandle. By default, it will be null.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramHtmlElement">
            <summary>
            Represents the HTMLElement thast defines the basic html elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Corners">
            <summary>
            Gets or sets the corners of the rectangular bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.FlipOffset">
            <summary>
            Gets or sets the offset values for container in flipping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ElementActions">
            <summary>
            Defines whether the element is group or port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.IsExport">
            <summary>
            Set to true during print and export
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ExportScaleValue">
            <summary>
            Set scaling value for print and export
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ICommonElement.ExportScaleOffset">
            <summary>
            Set scaling value for print and export
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.CanApplyStyle">
            <summary>
            Check whether style need to be apply or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ID">
            <summary>
            Gets or sets the unique id of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Pivot">
            <summary>
            Gets or sets the reference point of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.IsDirt">
            <summary>
            Gets or sets whether the content of the element needs to be measured.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Visible">
            <summary>
            Gets or sets whether the content of the element to be visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.OffsetX">
            <summary>
            Gets or sets the x-coordinate of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.OffsetY">
            <summary>
            Gets or sets the y-coordinate of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.CornerRadius">
            <summary>
            Gets or sets the corner of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MinHeight">
            <summary>
            Sets/Gets the minimum height of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MinWidth">
            <summary>
            Gets or sets the minimum width of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MaxWidth">
            <summary>
            Sets/Gets the maximum width of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.MaxHeight">
            <summary>
            Gets or sets the maximum height of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Width">
            <summary>
            Gets or sets the width of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Height">
            <summary>
            Gets or sets the height of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.RotateAngle">
            <summary>
            Gets or sets the rotate angle of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Margin">
            <summary>
            Gets or sets the margin of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.HorizontalAlignment">
            <summary>
            Gets or sets how the element has to be horizontally arranged with respect to its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.VerticalAlignment">
            <summary>
            Gets or sets how the element has to be vertically arranged with respect to its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Flip">
            <summary>
            Gets or sets the mirror image of diagram element in both horizontal and vertical directions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.RelativeMode">
            <summary>
            Gets or sets whether the element has to be aligned with respect to a point/with respect to its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Transform">
            <summary>
            Gets or sets whether the element has to be transformed based on its parent or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Style">
            <summary>
            Gets or sets the style of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ParentId">
            <summary>
            Gets or sets the parent id for the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.DesiredSize">
            <summary>
            Gets or sets the minimum size that is required by the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ActualSize">
            <summary>
            Gets or sets the size that the element will be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.ParentTransform">
            <summary>
            Gets or sets the rotate angle that is set to the immediate parent of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.IsSvgRender">
            <summary>
            Gets or sets the boolean value for the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Bounds">
            <summary>
            Gets or sets the boundary of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Shadow">
            <summary>
            Defines the appearance of the shadow of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.Description">
            <summary>
            Defines the description of the diagram element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.StaticSize">
            <summary>
            Defines whether the element has to be measured or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.IsRectElement">
            <summary>
            Check whether the element is rect or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ICommonElement.OuterBounds">
            <summary>
            Gets or sets the outer bounds of the element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonElement.SetOffsetWithRespectToBounds(System.Double,System.Double,Syncfusion.Blazor.Diagram.UnitMode)">
            <summary>
            Sets the offset of the element with respect to its parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonElement.GetAbsolutePosition(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Gets the position of the element with respect to its parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Corners">
            <summary>
            Define the Corners class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopLeft">
            <summary>
            Gets or sets the top left point of canvas corner
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopCenter">
            <summary>
            Gets or sets the top center point of canvas corner
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.TopRight">
            <summary>
            Gets or sets the top right point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.MiddleLeft">
            <summary>
            Gets or sets the middle left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Center">
            <summary>
            Gets or sets the center point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.MiddleRight">
            <summary>
            Gets or sets the middle left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomLeft">
            <summary>
            Gets or sets the bottom left point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomCenter">
            <summary>
            Gets or sets the bottom center point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.BottomRight">
            <summary>
            Gets or sets the bottom right point of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Left">
            <summary>
            Gets or sets the left position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Right">
            <summary>
            Gets or sets the right position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Top">
            <summary>
            Gets or sets the top position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Bottom">
            <summary>
            Gets or sets the bottom position of canvas corner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Width">
            <summary>
            Gets or sets the width of canvas.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Corners.Height">
            <summary>
            Gets or sets height of canvas.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageElement">
            <summary>
            Represents the class that defines a basic image elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.#ctor(Syncfusion.Blazor.Diagram.ImageElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ImageElement"/> class.
            </summary>
            <param name="src">basic image element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ImageElement"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.Source">
            <summary>
            Gets or sets the source of the image element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageScale">
            <summary>
            Gets or sets the scaling factor of the image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ImageAlign">
            <summary>
            Gets or sets the alignment of the image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.Stretch">
            <summary>
            Gets or sets image element, which determines how content fits into the available space.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ImageElement.ContentSize">
            <summary>
            Gets or sets the actual size of the image.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Measure(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures minimum space that is required to render the image
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ImageElement.Arrange(Syncfusion.Blazor.Diagram.Size,System.Nullable{System.Boolean})">
            <summary>
            Arranges the image element
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramNativeElement">
            <summary>
            Represents the class which defines the basic native elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathElement">
            <summary>
            Represents the class which defines how to align the path based on offsetX and offsetY.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.#ctor(Syncfusion.Blazor.Diagram.PathElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PathElement"/> class.
            </summary>
            <param name="src">path element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.PathElement"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.Data">
            <summary>
            Gets or sets the geometry of the path element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.TransformPath">
            <summary>
            Gets or sets whether the path has to be transformed to fit the given x,y, width, height.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathElement.AbsolutePath">
            <summary>
            Gets or sets the equivalent path, that will have the origin as 0,0.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Measure(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures the minimum space that is required to render the element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.Arrange(Syncfusion.Blazor.Diagram.Size,System.Nullable{System.Boolean})">
            <summary>
            Arranges the path element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.PathElement.UpdatePath(System.String,Syncfusion.Blazor.Diagram.Rect,Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Translates the path to 0,0 and scales the path based on the actual size
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.StackPanel">
            <summary>
            Represents the class that is used to arrange its children in a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.StackPanel._considerPadding">
            <summary>
            Padding of the element needs to be measured
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation of the stack panel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.#ctor(Syncfusion.Blazor.Diagram.StackPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.StackPanel"/> class.
            </summary>
            <param name="src">StackPanel element.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.StackPanel"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Measure(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures the minimum space that the panel needs
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.Arrange(Syncfusion.Blazor.Diagram.Size,System.Nullable{System.Boolean})">
            <summary>
            Arranges the child elements of the stack panel
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.StackPanel.MeasureStackPanel(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures the minimum space that the panel needs
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextElement">
            <summary>
            Represents the text element is used to display text/annotations
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement._textContent">
            <summary>
            The image source
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.Hyperlink">
            <summary>
            sets the hyperlink color to blue
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextElement.Constraints">
            <summary>
            The constraints for the text element
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.#ctor(Syncfusion.Blazor.Diagram.TextElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.TextElement"/> class.
            </summary>
            <param name="src">TextElement.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.Content">
            <summary>
            Gets or sets the content for the text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.ChildNodes">
            <summary>
            Gets or sets the child element for the text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextElement.WrapBounds">
            <summary>
            Gets or sets the wrapBounds for the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Measure(Syncfusion.Blazor.Diagram.Size)">
            <summary>
            Measures the minimum size that is required for the text element
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.TextElement.Arrange(Syncfusion.Blazor.Diagram.Size,System.Nullable{System.Boolean})">
            <summary>
            Arranges the text element
            </summary>
            <param name="desiredSize"></param>
            <param name="isStack"></param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Left">
            <summary>
            Sets the space to be left from the left side of the immediate parent of an element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Right">
            <summary>
            Sets the space to be left from the right side of the immediate parent of an element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Top">
            <summary>
            Sets the space to be left from the top side of the immediate parent of an element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMargin.Bottom">
            <summary>
            Sets the space to be left from the bottom side of the immediate parent of an element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Background.Source">
            <summary>
            Defines the source of the background image
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Background.Color">
            <summary>
            Defines the background color of diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Background.Scale">
            <summary>
            Defines how the background image should be scaled/stretched
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Background.Align">
            <summary>
            Defines how to align the background image over the diagram area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageMargin">
            <summary>
            Sets the margin of a diagram page
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ChildContent">
            <summary>
            Sets the child content for the pagesettings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Width">
            <summary>
            Sets the width of a diagram Page
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Height">
            <summary>
            Sets the height of a diagram Page
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Orientation">
            <summary>
            Sets the orientation of the pages in a diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.BoundaryConstraints">
            <summary>
            Defines the editable region of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.MultiplePage">
            <summary>
            Sets whether multiple pages can be created to fit all nodes and connectors
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.ShowPageBreaks">
            <summary>
            Enables or disables the page break lines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Margin">
            <summary>
            Sets the margin of a diagram page
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PageSettings.Background">
            <summary>
            Defines the background color and image of diagram
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AutoScrollBorder">
            <summary>
            Sets the border for the auto scroll of the diagram
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AutoScrollPadding">
            <summary>
            Sets the padding for the auto scroll of the diagram
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollableArea">
            <summary>
            Sets the padding for the auto scroll of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollableArea.X">
            <summary>
            Sets the x-coordinate of the starting point of a rectangular region
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollableArea.Y">
            <summary>
            Sets the y-coordinate of the starting point of a rectangular region
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollableArea.Width">
            <summary>
            Sets the width of a rectangular region
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollableArea.Height">
            <summary>
            Sets the height of a rectangular region
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ChildContent">
            <summary>
            Sets the child content for the scrollsettings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.HorizontalOffset">
            <summary>
            Defines horizontal offset of the scroller
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.VerticalOffset">
            <summary>
            Defines vertical offset of the scroller
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.CurrentZoom">
            <summary>
            Defines the currentZoom value of diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ViewPortWidth">
            <summary>
            Allows to read the viewport width of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ViewPortHeight">
            <summary>
            Allows to read the viewport height of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MinZoom">
            <summary>
            Defines the minimum zoom value of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.MaxZoom">
            <summary>
            Defines the maximum zoom value of the scroller
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollLimit">
            <summary>
            Defines the scrollable region of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.ScrollableArea">
            <summary>
            Defines the scrollable area of diagram. Applicable, if the scroll limit is “limited”.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.CanAutoScroll">
            <summary>
            Enables or Disables the auto scroll option
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.AutoScrollBorder">
            <summary>
            Defines the maximum distance to be left between the object and the scroll bar to trigger auto scrolling
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollSettings.AutoScrollPadding">
            <summary>
            Defines the maximum distance to be left between the object and the edge of the page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineColor">
            <summary>
            Sets the line color of gridlines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineDashArray">
            <summary>
            Defines the pattern of dashes and gaps used to stroke horizontal grid lines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.LineIntervals">
            <summary>
            A pattern of lines and gaps that defines a set of horizontal/vertical gridlines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.DotIntervals">
            <summary>
            A pattern of lines and gaps that defines a set of horizontal/vertical gridlines
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.SnapIntervals">
            <summary>
            Specifies a set of intervals to snap the objects
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.GridLines.ScaledInterval">
            <summary>
            Specifies a set of intervals to snap the objects
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.ChildContent">
            <summary>
            Sets the child content for the snapsettings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.VerticalGridLines">
            <summary>
            Sets the Verticle gridline property for the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.HorizontalGridLines">
            <summary>
            Sets the Horizontal gridline property for the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.Constraints">
            <summary>
            Gets or sets the constraints for gridlines and snapping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapObjectDistance">
            <summary>
            Gets or sets the minimum distance between the selected object and the nearest object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.SnapAngle">
            <summary>
            Gets or sets the angle by which the object needs to be snapped
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SnapSettings.GridType">
            <summary>
            Sets the Grid type property 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramConstraints">
             <summary>
            Enables/Disables certain features of diagram.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.None">
            <summary>
            Disable DiagramConstraints constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Bridging">
            <summary>
            Enables/Disable Bridging support for connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.UndoRedo">
            <summary>
            Enables/Disable the Undo/Redo support.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.UserInteraction">
            <summary>
            Enables/Disable UserInteraction support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.ApiUpdate">
            <summary>
            Enables/Disable ApiUpdate support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PageEditable">
            <summary>
            Enables/Disable PageEditable support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Zoom">
            <summary>
            Enables/Disable Zoom support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PanX">
            <summary>
            Enables/Disable PanX support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.PanY">
            <summary>
            Enables/Disable PanY support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Pan">
            <summary>
            Enables/Disable Pan support the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Virtualization">
            <summary>
            Enables/Disable Virtualization support the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.ZoomTextEdit">
            <summary>
            Enables/Disables zooming the text box while editing the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramConstraints.Default">
            <summary>
            Enables/Disable all constraints.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlipDirection">
            <summary>
            Specifies how the diagram elements have to be flipped.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Horizontal">
            <summary>
            Flip the diagram shape horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Vertical">
            <summary>
            Flip the diagram shape vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.Both">
            <summary>
            Flip the diagram shape to both horizontally and vertically. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlipDirection.None">
            <summary>
            No flip will be applied and this is the default value. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HorizontalAlignment">
            <summary>
            Defines how the diagram elements must be aligned based on its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Stretch">
            <summary>
            Stretch the diagram element horizontally to its immediate parent�s. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Left">
            <summary>
            Align the diagram element horizontally to its immediate parent's left side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Right">
            <summary>
            Align the diagram element horizontally to its immediate parent's right side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Center">
            <summary>
            Align the diagram element horizontally to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HorizontalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent�s horizontal alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment">
            <summary>
            Defines how the fixedUserHandle have to be aligned with respect to its immediate parent
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.Center">
            <summary>
            Aligns the fixedUserHandle at the center of a connector segment. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.Before">
            <summary>
            Aligns the fixedUserHandle before a connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FixedUserHandleAlignment.After">
            <summary>
            Aligns the fixedUserHandle after a connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GridType">
            <summary>
            Defines how the grid line type
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GridType.Lines">
            <summary>
            Renders grid patterns as Lines. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GridType.Dots">
            <summary>
            Renders grid patterns as Dots.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.VerticalAlignment">
            <summary>
            Defines how the diagram elements must be aligned based on its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Stretch">
            <summary>
            Stretch the diagram element vertically to its immediate parent�s.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Top">
            <summary>
            Align the diagram element vertically to its immediate parent's top side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Bottom">
            <summary>
            Align the diagram element vertically to its immediate parent's bottom side.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Center">
            <summary>
            Align the diagram element vertically to the center of its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.VerticalAlignment.Auto">
            <summary>
            Aligns the diagram element based on its immediate parent�s Vertical alignment property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextDecoration">
            <summary>
            The TextDecoration property defines the decoration for a text in the text block.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.Overline">
            <summary>
            The Overline property draws a horizontal line above the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.Underline">
            <summary>
            This property draws a horizontal line under the text in the text block.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.LineThrough">
            <summary>
            LineThrough property draws a horizontal line in the center of the text of a node or a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextDecoration.None">
            <summary>
            The None property represents the default text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextAlign">
            <summary>
            The TextAlign property allows the user to define the alignment of the text inside the text block. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Left">
            <summary>
            Sets the alignment of text in the text block to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Right">
            <summary>
            Sets the alignment of text in the text block to the right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Center">
            <summary>
            Sets the alignment of text in the text block to the center.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextAlign.Justify">
            <summary>
            Sets the alignment of text in respective to left and right margins.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextOverflow">
            <summary>
            The overflow property allows the user to clip the text content or to add scrollbars when the content of the text element is too large to fit in the specified diagram area.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Wrap">
            <summary>
            Wraps the text to the next line, when it exceeds its bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Ellipsis">
            <summary>
            Ellipsis hides the text if the text size exceeds the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextOverflow.Clip">
            <summary>
            The text is restricted to the node/connector boundary and the text will not be overflown.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextWrap">
            <summary>
            TextWrap property is used to control the overflow of text in the node boundaries. The wrapping property defines how the text should be wrapped.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.WrapWithOverflow">
            <summary>
            Text-wrapping occurs when the text overflows beyond the available node width. However, the text may overflow beyond the node width in the case of a very long word.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.Wrap">
            <summary>
            The text will be wrapped inside the boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.TextWrap.NoWrap">
            <summary>
            The text will not be wrapped. If lengthy text exists, the boundary will not be a limitation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.WhiteSpace">
            <summary>
            Specifies how the white space and new line characters should be set.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.WhiteSpace.PreserveAll">
            <summary>
            Preserves (Includes) all empty spaces and empty lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.WhiteSpace.CollapseSpace">
            <summary>
            Collapses (Excludes) all consequent empty spaces and empty lines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.WhiteSpace.CollapseAll">
            <summary>
            Collapses (Excludes) the consequent spaces into one
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.GradientType">
            <summary>
            Specifies the type of transition between two or more colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GradientType.None">
            <summary>
            No gradient will be applied by default. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GradientType.Linear">
            <summary>
            Sets the type of gradient as Linear.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.GradientType.Radial">
            <summary>
            Sets the type of gradient as Radial.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RelativeMode">
            <summary>
            Specifies the relative mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RelativeMode.Point">
            <summary>
            Point - Diagram elements will be aligned with respect to a point
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RelativeMode.Object">
            <summary>
            Object - Diagram elements will be aligned with respect to its immediate parent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Transform">
            <summary>
            Specifies the type of Transform.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Transform.Self">
            <summary>
            Self - Sets the transform type as Self
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Transform.Parent">
            <summary>
            Parent - Sets the transform type as Parent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ElementAction">
            <summary>
            Specifies the element action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.None">
            <summary>
            Disables all element actions are none.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.ElementIsPort">
            <summary>
            Enable the element action is Port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ElementAction.ElementIsGroup">
            <summary>
            Enable the element action as Group.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.UnitMode">
            <summary>
            Specifies the type of unit mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.UnitMode.Absolute">
            <summary>
            Absolute - Sets the unit mode type as Absolute
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.UnitMode.Fraction">
            <summary>
            Fraction - Sets the unit mode type as Fraction
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortShapes">
            <summary>
            Specifies the shape of the ports.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.X">
            <summary>
            Sets the port shape as X.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Circle">
            <summary>
            Sets the port shape as Circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Square">
            <summary>
            Sets the port shape as Square.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortShapes.Custom">
            <summary>
            Sets the port shape as Custom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortVisibility">
            <summary>
            Constraints to control the visibility property of the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Connect">
            <summary>
            Shows the port when a connector endpoint is dragged over a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Hidden">
            <summary>
            Always hides the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Hover">
            <summary>
            Shows the port when the mouse hovers over a node. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortVisibility.Visible">
            <summary>
            Always shows the port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AlignmentMode">
             <summary>
            Defines the specific mode, with respect to which the objects to be aligned. 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentMode.Object">
             <summary>
            Aligns the objects based on the first object in the selected list. 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentMode.Selector">
             <summary>
            Aligns the objects based on the selection boundary. 
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AlignmentOptions">
             <summary>
            Defines the specific direction, with respect to which the objects to be aligned.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Left">
             <summary>
            Aligns all the selected objects at the left of the selection boundary.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Right">
            <summary>
            Aligns all the selected objects at the right of the selection boundary
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Top">
            <summary>
            	Aligns all the selected objects at the top of the selection boundary.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Bottom">
            <summary>
            Aligns all the selected objects at the bottom of the selection boundary
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Center">
             <summary>
            Aligns all the selected objects at the center of the selection boundary
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AlignmentOptions.Middle">
            <summary>
            Aligns all the selected objects at the middle of the selection boundary.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DistributeOptions">
            <summary>
            Specifies the Distribute otions
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.RightToLeft">
            <summary>
            Distributes the objects based on the distance between the right and left sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Center">
             <summary>
            Distributes the objects based on the distance between the center of the adjacent objects.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Left">
             <summary>
            Distributes the objects based on the distance between the left sides of the adjacent objects.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Right">
             <summary>
            Distributes the objects based on the distance between the right sides of the adjacent objects.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Bottom">
            <summary>
            Distributes the objects based on the distance between the bottom sides of the adjacent objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Top">
             <summary>
            Distributes the objects based on the distance between the top sides of the adjacent objects.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.BottomToTop">
             <summary>
            Distributes the objects based on the distance between the bottom and top sides of the adjacent objects.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DistributeOptions.Middle">
            <summary>
             Distributes the objects based on the distance between the vertical center of the adjacent objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizingTypes">
            <summary>
            Specifies the sizing types
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingTypes.Size">
             <summary>
            Scales the selected objects both vertically and horizontally.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingTypes.Height">
             <summary>
            Scales the height of the selected objects.
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SizingTypes.Width">
            <summary>
            Scales the width of the selected objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PortConstraints">
            <summary>
            The behavior and features of the ports can be enabled or disabled using the PortConstraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.None">
            <summary>
            Disables all the Port functionalities.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.Draw">
            <summary>
            Enables to create the connection when mouse hover on the port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.InConnect">
            <summary>
            Enables or disables to connect only the target end of connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.OutConnect">
            <summary>
            Enables or disables to connect only the source end of connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PortConstraints.Default">
            <summary>
            Enables all constraints for a port.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shapes">
            <summary>
            Specifies the type of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Basic">
            <summary>
            Sets the node as Basic.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Path">
            <summary>
            Sets the node as Path.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Text">
            <summary>
            Sets the node as Text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Image">
            <summary>
            Sets the node as Image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Flow">
            <summary>
            Sets the node as Flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Bpmn">
            <summary>
            Sets the node as Bpmn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.Native">
            <summary>
            Sets the node as Native.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Shapes.HTML">
            <summary>
            Sets the node as HTML.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BasicShapes">
            <summary>
            Specifies the common shapes that are used to represent information visually.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Rectangle">
            <summary>
            Sets the type of the basic shape as Rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Ellipse">
            <summary>
            Sets the type of the basic shape as Ellipse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Hexagon">
            <summary>
            Sets the type of the basic shape as Hexagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Parallelogram">
            <summary>
            Sets the type of the basic shape as Parallelogram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Triangle">
            <summary>
            Sets the type of the basic shape as Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Plus">
            <summary>
            Sets the type of the basic shape as Plus.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Star">
            <summary>
            Sets the type of the basic shape as Star.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Pentagon">
            <summary>
            Sets the type of the basic shape as Pentagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Heptagon">
            <summary>
            Sets the type of the basic shape as Heptagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Octagon">
            <summary>
            Sets the type of the basic shape as Octagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Trapezoid">
            <summary>
            Sets the type of the basic shape as Trapezoid.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Decagon">
            <summary>
            Sets the type of the basic shape as Decagon.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.RightTriangle">
            <summary>
            Sets the type of the basic shape as the Right Triangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Cylinder">
            <summary>
            Sets the type of the basic shape as Cylinder.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Diamond">
            <summary>
            Sets the type of the basic shape as Diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BasicShapes.Polygon">
            <summary>
            Sets the type of the basic shape as Polygon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlowShapes">
            <summary>
            Specifies the type of process flow used for analyzing designing and managing for documentation process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Terminator">
            <summary>
            Sets the flow shape type as Terminator.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Process">
            <summary>
            Sets the flow shape type as Process.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Decision">
            <summary>
            Sets the flow shape type as Decision.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Document">
            <summary>
            Sets the flow shape type as Document.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.PreDefinedProcess">
            <summary>
            Sets the flow shape type as PreDefinedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.PaperTap">
            <summary>
            Sets the flow shape type as PaperTap.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.DirectData">
            <summary>
            Sets the flow shape type as DirectData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.SequentialData">
            <summary>
            Sets the flow shape type as SequentialData.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Sort">
            <summary>
            Sets the flow shape type as Sort.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.MultiDocument">
            <summary>
            Sets the flow shape type as MultiDocument.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Collate">
            <summary>
            Sets the flow shape type as Collate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.SummingJunction">
            <summary>
            Sets the flow shape type as SummingJunction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Or">
            <summary>
            Sets the flow shape type as Or.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.InternalStorage">
            <summary>
            Sets the flow shape type as internal storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Extract">
            <summary>
            Sets the flow shape type as Extract.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.ManualOperation">
            <summary>
            Sets the flow shape type as ManualOperation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Merge">
            <summary>
            Sets the flow shape type as Merge.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.OffPageReference">
            <summary>
            Sets the flow shape type as OffPageReference.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.SequentialAccessStorage">
            <summary>
            Sets the flow shape type as SequentialAccessStorage.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Annotation">
            <summary>
            Sets the flow shape type as Annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Annotation2">
            <summary>
            Sets the flow shape type as Annotation2.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Data">
            <summary>
            Sets the flow shape type as Data.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Card">
            <summary>
            Sets the flow shape type as Card.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Delay">
            <summary>
            Sets the flow shape type as Delay.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Preparation">
            <summary>
            Sets the flow shape type as Preparation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.Display">
            <summary>
            Sets the flow shape type as Display.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.ManualInput">
            <summary>
            Sets the flow shape type as ManualInput.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.LoopLimit">
            <summary>
            Sets the flow shape type as LoopLimit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.FlowShapes.StoredData">
            <summary>
            Sets the flow shape type as stored data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeConstraints">
            <summary>
            Specifies the node constraints allow the users to enable or disable certain behaviors and features of the diagram nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.None">
            <summary>
            Disable all node Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Select">
            <summary>
            Enables or disables the selection of a node in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Drag">
            <summary>
            Enables or disables the dragging functionality of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Rotate">
            <summary>
            Enables or disables node rotation. It is done with the help of a curvy arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Shadow">
            <summary>
            Enables or disables to display the nodes shadow.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.PointerEvents">
            <summary>
            Enables or disables the mouse pointers events when clicking with a mouse.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Delete">
            <summary>
            Enables or disables node deletion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.InConnect">
            <summary>
            Enables node to allow only in coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.OutConnect">
            <summary>
            Enables node to allow only out coming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.AllowDrop">
            <summary>
            AllowDrop allows dropping a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorthEast">
            <summary>
            It enables or disables the resizing of the node in the NorthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeEast">
            <summary>
            It enables or disables the resizing of the node in the East direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouthEast">
            <summary>
            It enables or disables the resizing of the node in the SouthEast direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouth">
            <summary>
            It enables or disables the resizing of the node in the South direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeSouthWest">
            <summary>
            It enables or disables the resizing of the node in the SouthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeWest">
            <summary>
            It enables or disables the resizing of the node in the West direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorthWest">
            <summary>
            It enables or disables the resizing of the node in the NorthWest direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ResizeNorth">
            <summary>
            It enables or disables the resizing of the node in the North direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.AspectRatio">
            <summary>
            Enables the Aspect ratio of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.ReadOnly">
            <summary>
            Enables the ReadOnly mode(Write operations cannot be done) for the annotation in the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.HideThumbs">
            <summary>
            Enables to hide all resize thumbs for the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Resize">
            <summary>
            Enables or Disables the expansion or compression of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Default">
            <summary>
            Enables all the constraints for a node
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeConstraints.Inherit">
            <summary>
            It allows the node to inherit the interaction option from the parent object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorConstraints">
            <summary>
            The connector constraints allow the users to enable or disable certain behaviors and features of the connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.None">
            <summary>
            Disable all connector Constraints.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Select">
            <summary>
            Enables or Disables the selection of a  connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Delete">
            <summary>
            Enables or Disables the deletion of a connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Drag">
            <summary>
            Enables or Disables connector to be Dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragSourceEnd">
            <summary>
            Enables the connector's source end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragTargetEnd">
            <summary>
            Enables connectors target end to be dragged.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.DragSegmentThumb">
            <summary>
            Enables the control point and endpoint of every segment in a connector for editing.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Interaction">
            <summary>
            Enables or disables Interaction for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.AllowDrop">
            <summary>
            Enables to trigger drop event when any object is dragged or dropped to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Bridging">
            <summary>
            Enables bridging to the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.InheritBridging">
            <summary>
            Enables to inherit bridging option from the parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.PointerEvents">
            <summary>
            Enables to set the pointer-events.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ReadOnly">
            <summary>
            Enables or disables read-only for the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByNode">
            <summary>
            Enables to connect nearest node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByPort">
            <summary>
            Enables to connect nearest port.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.ConnectToNearByElement">
            <summary>
            Enables to connect nearest elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectorConstraints.Default">
            <summary>
            Enables all constraints for the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Segments">
            <summary>
            Specifies the segment type of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Segments.Straight">
            <summary>
            Sets the segment type as Straight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Segments.Orthogonal">
            <summary>
            Sets the segment type as Orthogonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Segments.Polyline">
            <summary>
            Sets the segment type as Polyline.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Segments.Bezier">
            <summary>
            Sets the segment type as Bezier.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DecoratorShapes">
            <summary>
            Specifies the connector decorator shape of the connector
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.Arrow">
            <summary>
            Sets the decorator shape as Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.None">
            <summary>
            Sets the decorator shape as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.Diamond">
            <summary>
            Sets the decorator shape as Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.OpenArrow">
            <summary>
            Sets the decorator shape as OpenArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.Circle">
            <summary>
            Sets the decorator shape as Circle
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.Square">
            <summary>
            Sets the decorator shape as Square
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.Fletch">
            <summary>
            Sets the decorator shape as Fletch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.OpenFetch">
            <summary>
            Sets the decorator shape as OpenFetch
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.IndentedArrow">
            <summary>
            Sets the decorator shape as Indented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.OutdentedArrow">
            <summary>
            Sets the decorator shape as Outdented Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.DoubleArrow">
            <summary>
            Sets the decorator shape as DoubleArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DecoratorShapes.Custom">
            <summary>
            Sets the decorator shape as Custom
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Direction">
            <summary>
            Specifies the orthogonal connector's connection segment direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Left">
            <summary>
            Sets the direction of the connector segment direction to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Right">
            <summary>
            Sets the direction of the connector segment direction to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Top">
            <summary>
            Sets the direction of the connector segment direction to Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Direction.Bottom">
            <summary>
            Sets the direction of the connector segment direction to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationType">
            <summary>
            Specifies the type of annotation template
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationType.String">
            <summary>
            Specifies that the annotation will be string content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationType.Template">
            <summary>
            Specifies that the annotation user defined Html template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationConstraints">
            <summary>
            Annotation constraints control the features and behaviors of the annotations.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.None">
            <summary>
            Disables all the functionalities of annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.ReadOnly">
            <summary>
            It enables the user to only read (cannot be edited) the annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationConstraints.InheritReadOnly">
            <summary>
            Enables or disables the user to inherit the ReadOnly option from the parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationTypes">
            <summary>
            Specifies the user to define the type of annotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationTypes.Shape">
            <summary>
            Sets the annotation type as Path.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationTypes.Path">
            <summary>
            Sets the annotation type as Shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.AnnotationAlignment">
            <summary>
            Specifies how the diagram elements must be aligned based on its immediate parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.Center">
            <summary>
            Annotation placed over the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.Before">
            <summary>
            Annotation placed top of the connector segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.AnnotationAlignment.After">
            <summary>
            Annotation placed bottom to the connector segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PageOrientation">
            <summary>
            Defines the orientation of the Page
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PageOrientation.Landscape">
            <summary>
            Display with page Width is more than the page Height
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.PageOrientation.Portrait">
            <summary>
            Display with page Height is more than the page width
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BoundaryConstraints">
            <summary>
            Specifies the users to set the region to allow interaction with the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Infinity">
            <summary>
            Allow the interactions to take place at the infinite height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Diagram">
            <summary>
            Allow the interactions to take place around the diagram height and width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BoundaryConstraints.Page">
            <summary>
            Allow the interactions to take place around the height and width mentioned on the page settings.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramRegions">
            <summary>
            Specifies the region that has to be drawn as an image
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegions.PageSettings">
            <summary>
            Sets to export the diagram with the given page settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegions.Content">
            <summary>
            Sets to export the diagram content alone.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramRegions.CustomBounds">
            <summary>
            Sets to export the diagram with the given bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ImageAlignment">
            <summary>
            Specifies the alignment of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.None">
            <summary>
            Sets the none alignments for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMin">
            <summary>
            Sets the smallest X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMin">
            <summary>
            Sets the midpoint X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMin">
            <summary>
            Sets the maximum X value of the view port and  smallest Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMid">
            <summary>
            Sets the smallest X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMid">
            <summary>
            Sets the maximum X value of the view port and  midpoint Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMinYMax">
            <summary>
            Sets the smallest X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMidYMax">
            <summary>
            Sets the midpoint X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ImageAlignment.XMaxYMax">
            <summary>
            Sets the maximum X value of the view port and  maximum Y value of the view port for the image.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Scale">
            <summary>
            Specifies the scale of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Scale.None">
            <summary>
            There will be no scaling to the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Scale.Meet">
            <summary>
            It aligns the image to the center of the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Scale.Slice">
            <summary>
            It zooms in to fill the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollLimit">
            <summary>
            Defines the scrollable region of the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimit.Diagram">
            <summary>
            Enables scrolling to view the diagram content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimit.Infinity">
            <summary>
            Diagram will be extended, when we try to scroll the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ScrollLimit.Limited">
            <summary>
            Enables scrolling to view the specified area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Stretch">
            <summary>
            Specifies the diagrams stretch.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.None">
            <summary>
            Sets the stretch type for diagram as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.Stretch">
            <summary>
            Sets the stretch type for diagram as Stretch.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.Meet">
            <summary>
            Sets the stretch type for diagram as Meet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Stretch.Slice">
            <summary>
            Sets the stretch type for diagram as Slice.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutType">
            <summary>
            Specifies the types of the automatic layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.None">
            <summary>
            None - None of the layouts is applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.HierarchicalTree">
            <summary>
            Sets the type of the layout as HierarchicalTree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.OrganizationalChart">
            <summary>
            Sets the type of the layout as Organizational Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutType.MindMap">
            <summary>
            Sets the type of the layout as MindMap
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SubTreeOrientation">
            <summary>
            Specifies the collection of sub tree orientations in an organizational chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeOrientation.Horizontal">
            <summary>
            Aligns the child nodes in horizontal manner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeOrientation.Vertical">
            <summary>
            Aligns the child nodes in vertical manner
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SubTreeAlignments">
            <summary>
            Specifies the collection of sub tree alignments in an organizational chart
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignments.Left">
            <summary>
            Aligns the child nodes at the left of the parent in a horizontal/vertical sub tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignments.Right">
            <summary>
            Aligns the child nodes at the right of the parent in a horizontal/vertical sub tree
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignments.Center">
            <summary>
            Aligns the child nodes at the center of the parent in a horizontal sub tree
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignments.Alternate">
            <summary>
            Aligns the child nodes at both left and right sides of the parent in a vertical sub tree
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SubTreeAlignments.Balanced">
            <summary>
            Aligns the child nodes in multiple rows to balance the width and height of the horizontal sub tree
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutOrientation">
            <summary>
            Specifies the orientation of the layout
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.TopToBottom">
            <summary>
            Aligns the Child nodes will be arranged in linear manner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.BottomToTop">
            <summary>
            Aligns the child nodes will be arranged in not linear manner
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.LeftToRight">
            <summary>
            Aligns the child nodes will be arranged in not linear manner
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.LayoutOrientation.RightToLeft">
            <summary>
            Aligns the child nodes will be arranged in not linear manner
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Orientation">
            <summary>
            Defines the orientation
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Orientation.Horizontal">
            <summary>
            Horizontal - Sets the orientation as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Orientation.Vertical">
            <summary>
            Vertical - Sets the orientation as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Actions">
            <summary>
            Specifies a custom cursor action in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.None">
            <summary>
            Disable all actions for cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Select">
            <summary>
            Sets the select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Drag">
            <summary>
            Sets the Drag action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeWest">
            <summary>
            Sets the ResizeWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ConnectorSourceEnd">
            <summary>
            Sets the Connector SourceEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ConnectorTargetEnd">
            <summary>
            Sets the Connector TargetEnd action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeEast">
            <summary>
            Sets the ResizeEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeSouth">
            <summary>
            Sets the ResizeSouth action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeNorth">
            <summary>
            Sets the select action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeSouthEast">
            <summary>
            Sets the Resize SouthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeSouthWest">
            <summary>
            Sets the Resize SouthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeNorthEast">
            <summary>
            Sets the Resize NorthEast action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.ResizeNorthWest">
            <summary>
            Sets the Resize NorthWest action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Rotate">
            <summary>
            Sets the Rotate action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Pan">
            <summary>
            Sets the Pan action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.BezierSourceThumb">
            <summary>
            Sets the Bezier SourceThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.BezierTargetThumb">
            <summary>
            Sets the Bezier TargetThumb action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.SegmentEnd">
            <summary>
            Disable all actions for cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.OrthogonalThumb">
            <summary>
            Disable all actions for cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.FixedUserHandle">
            <summary>
            Sets the FixedUserHandle action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Hyperlink">
            <summary>
            Sets the Hyperlink action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.Draw">
            <summary>
            Sets the Draw action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Actions.PortDraw">
            <summary>
            Sets the Draw action for the cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramTools.None">
            <summary>
            Disables all the drawing tools.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramTools.SingleSelect">
            <summary>
            It allows users to select only individual nodes or connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramTools.MultipleSelect">
            <summary>
            It allows users to select multiple nodes and connectors.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramTools.ZoomPan">
            <summary>
            It allows users to pan the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramTools.DrawOnce">
            <summary>
            Enables/Disable DrawOnce support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramTools.ContinuousDraw">
            <summary>
            Enables/Disable ContinuousDraw support for the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramTools.Default">
            <summary>
            Sets the drawing tools to default.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RubberBandSelectionMode">
            <summary>
            Specifies how to handle the selected items via rubber band selection.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RubberBandSelectionMode.CompleteIntersect">
            <summary>
            Selects the objects that are contained within the selected region.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RubberBandSelectionMode.PartialIntersect">
            <summary>
            Selects the objects that are partially intersected with the selected region.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectorConstraints">
            <summary>
            Specifies the visibility of the selector handles.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.None">
            <summary>
            Hides all the selector elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ConnectorSourceThumb">
            <summary>
            Shows the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ConnectorTargetThumb">
            <summary>
            Shows the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouthEast">
            <summary>
            Shows the bottom right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouthWest">
            <summary>
            Shows the bottom left resize handle of the selector. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorthEast">
            <summary>
            Shows the top right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorthWest">
            <summary>
            Shows the top left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeEast">
            <summary>
            Shows the middle right resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeWest">
            <summary>
            Shows the middle left resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeSouth">
            <summary>
            Shows the bottom center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeNorth">
            <summary>
            Shows the top center resize handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.Rotate">
            <summary>
            Shows the rotate handle of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.UserHandle">
            <summary>
             Shows/hides the user handles of the selector .
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.All">
            <summary>
            Shows all handles of the selector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SelectorConstraints.ResizeAll">
            <summary>
            Shows all resize handles of the selector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ChangeType">
            <summary>
            Specifies whether an object is added/removed from diagram
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ChangeType.Addition">
            <summary>
            Sets the ChangeType to Addition.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ChangeType.Removal">
            <summary>
            Sets the ChangeType to Removal.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramAction">
            <summary>
            Specifies to Enables/Disables certain actions of diagram
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Render">
            <summary>
             Indicates the diagram is in render state.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.PublicMethod">
            <summary>
            Indicates the diagram public method is in action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Interactions">
            <summary>
            Indicates whether drag or rotate tool has been activated.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Layouting">
            <summary>
            Indicates whether enable or disble the layouting.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.isGroupDragging">
            <summary>
            Indicates whether group dragging has been activated.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.UndoRedo">
            <summary>
            Indicates the diagram undo/redo is in action
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.Group">
            <summary>
            Indicates the group is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.DrawingTool">
            <summary>
            Indicates the diagram drawing tool is enabled
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.DiagramAction.EditText">
            <summary>
            Indicates the diagram text annotation edit box is enabled
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.MeasureDataJSCall">
            <summary>
            Indicates whether JS calling has been made.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventRefresh">
            <summary>
            Indicates to prevent the whole diagram refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PathDataMeasureAsync">
            <summary>
            Indicates whether path data is measuring has been made.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.EnableGroupAction">
            <summary>
            Enable the group action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventEventRefresh">
            <summary>
            Indicates to prevent the diagram refresh.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.ScrollActions">
            <summary>
            Indicates to diagram is preformed scroll actions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.PreventPathDataMeasure">
            <summary>
            Indicates to prevent the path data measure.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.SymbolDrag">
            <summary>
            Indicates the symbol is being dragged from the palette
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.CancelCollectionChange">
            <summary>
            Indicates to collection change event is cancelled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.GroupingCollectionChange">
            <summary>
            Indicates to collection change event is cancelled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.RealAction.RefreshSelectorLayer">
            <summary>
            Indicates to refresh the selector layer.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EventState">
            <summary>
            Specifies the events current state
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EventState.Changing">
            <summary>
            Sets the event state as Changing
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EventState.Changed">
            <summary>
            Sets the event state as Changed
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ThumbsConstraints">
            <summary>
            Specifies to enables/disbles the handles for the selected items
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ConnectorSource">
            <summary>
            Sets the source thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ConnectorTarget">
            <summary>
            Sets the target thumb of the connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.Default">
            <summary>
            Sets all handles of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeEast">
            <summary>
            Sets the middle right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorth">
            <summary>
            Sets the top center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorthEast">
            <summary>
            Sets the top right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeNorthWest">
            <summary>
            Sets the top left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouth">
            <summary>
            Sets the bottom center resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouthEast">
            <summary>
            Sets the bottom right resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeSouthWest">
            <summary>
            Sets the bottom left resize handle of the selected items. 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.ResizeWest">
            <summary>
            Sets the middle left resize handle of the selected items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ThumbsConstraints.Rotate">
            <summary>
            Sets the rotate handle of the selected items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnShapes">
            <summary>
             Defines the type of the Bpmn Shape
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Event">
            <summary>
            Sets the type of the Bpmn Shape as Event
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Gateway">
            <summary>
            Sets the type of the Bpmn Shape as Gateway
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Message">
            <summary>
            Sets the type of the Bpmn Shape as Message
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.DataObject">
            <summary>
            Sets the type of the Bpmn Shape as DataObject
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.DataSource">
            <summary>
            Sets the type of the Bpmn Shape as DataSource
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Activity">
            <summary>
             Sets the type of the Bpmn Shape as Activity
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.Group">
            <summary>
            Sets the type of the Bpmn Shape as Group
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShapes.TextAnnotation">
            <summary>
            Represents the shape as Text Annotation
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnEvents">
            <summary>
             Defines the type of the Bpmn Events
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.Start">
            <summary>
            Sets the type of the Bpmn Event as Start
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.Intermediate">
            <summary>
            Sets the type of the Bpmn Event as Intermediate
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.End">
            <summary>
            Sets the type of the Bpmn Event as End
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.NonInterruptingStart">
            <summary>
            Sets the type of the Bpmn Event as NonInterruptingStart 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.NonInterruptingIntermediate">
            <summary>
            Sets the type of the Bpmn Event as NonInterruptingIntermediate
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnEvents.ThrowingIntermediate">
            <summary>
            Sets the type of the Bpmn Event as ThrowingIntermediate
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTriggers">
            <summary>
            Defines the type of the Bpmn Triggers
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.None">
            <summary>
            Sets the type of the trigger as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Message">
            <summary>
            Sets the type of the trigger as Message 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Timer">
            <summary>
            Sets the type of the trigger as Timer
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Escalation">
            <summary>
            Sets the type of the trigger as Escalation
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Link">
            <summary>
            Sets the type of the trigger as Link
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Error">
            <summary>
             Sets the type of the trigger as Error
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Compensation">
            <summary>
            Sets the type of the trigger as Compensation
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Signal">
            <summary>
            Sets the type of the trigger as Signal
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Multiple">
            <summary>
            Sets the type of the trigger as Multiple
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Parallel">
            <summary>
            Sets the type of the trigger as Parallel
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Cancel">
            <summary>
            Sets the type of the trigger as Cancel 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Conditional">
            <summary>
            Sets the type of the trigger as Conditional
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTriggers.Terminate">
            <summary>
            Sets the type of the trigger as Terminate
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnGateways">
            <summary>
            Defines the type of the Bpmn gateways
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.None">
            <summary>
            Sets the type of the gateway as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Exclusive">
            <summary>
            Sets the type of the gateway as Exclusive
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Inclusive">
            <summary>
            Sets the type of the gateway as Inclusive
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Parallel">
            <summary>
            Sets the type of the gateway as Parallel
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.Complex">
            <summary>
            Sets the type of the gateway as Complex
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.EventBased">
            <summary>
             Sets the type of the gateway as EventBased
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.ExclusiveEventBased">
            <summary>
            Sets the type of the gateway as ExclusiveEventBased
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnGateways.ParallelEventBased">
            <summary>
            Sets the type of the gateway as ParallelEventBased
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDataObjects">
            <summary>
            Defines the type of the Bpmn  Data Objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjects.None">
            <summary>
            Sets the type of the data object as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjects.Input">
            <summary>
            Sets the type of the data object as Input
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnDataObjects.Output">
            <summary>
            Sets the type of the data object as Output
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnActivities">
            <summary>
            Defines the type of the Bpmn  Activity
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivities.Task">
            <summary>
            Sets the type of the Bpmn Activity as Task
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivities.None">
            <summary>
            Sets the type of the Bpmn Activity as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnActivities.SubProcess">
            <summary>
            Sets the type of the Bpmn Activity as SubProcess 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnLoops">
            <summary>
            Defines the type of the Bpmn Loops
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.None">
            <summary>
            Sets the type of the Bpmn loop as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.Standard">
            <summary>
            Sets the type of the Bpmn loop as Standard
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.ParallelMultiInstance">
            <summary>
            Sets the type of the Bpmn loop as ParallelMultiInstance
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnLoops.SequenceMultiInstance">
            <summary>
            Sets the type of the Bpmn loop as SequenceMultiInstance
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTasks">
            <summary>
            Defines the type of the Bpmn Tasks
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.None">
            <summary>
            Sets the type of the Bpmn Tasks as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Service">
            <summary>
            Sets the type of the Bpmn Tasks as Service
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Receive">
            <summary>
            Sets the type of the Bpmn Tasks as Receive
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Send">
            <summary>
            Sets the type of the Bpmn Tasks as Send
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.InstantiatingReceive">
            <summary>
            Sets the type of the Bpmn Tasks as InstantiatingReceive
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Manual">
            <summary>
             Sets the type of the Bpmn Tasks as Manual
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.BusinessRule">
            <summary>
            Sets the type of the Bpmn Tasks as BusinessRule 
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.User">
            <summary>
            Sets the type of the Bpmn Tasks as User
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnTasks.Script">
            <summary>
            SSets the type of the Bpmn Tasks as Script
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes">
            <summary>
            Defines the type of the Bpmn Subprocess
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes.None">
            <summary>
            Sets the type of the Sub process as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes.Transaction">
            <summary>
            Sets the type of the Sub process as Transaction
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcessTypes.Event">
            <summary>
            Sets the type of the Sub process as Event
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnBoundary">
            <summary>
            Defines the type of the Bpmn boundary
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnBoundary.Default">
            <summary>
            Sets the type of the boundary as Default
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnBoundary.Call">
            <summary>
            Sets the type of the boundary as Call
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnBoundary.Event">
            <summary>
            Sets the type of the boundary as Event
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnFlows">
            <summary>
            Defines the type of the Bpmn flows
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlows.Sequence">
            <summary>
            Sets the type of the Bpmn Flow as Sequence
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlows.Association">
            <summary>
            Sets the type of the Bpmn Flow as Association
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnFlows.Message">
            <summary>
            Sets the type of the Bpmn Flow as Message
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnAssociationFlows">
            <summary>
            Defines the type of the Bpmn Association Flows
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnAssociationFlows.Default">
            <summary>
            Sets the type of Association flow as Default
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnAssociationFlows.Directional">
            <summary>
            Sets the type of Association flow as Directional
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnAssociationFlows.BiDirectional">
            <summary>
            Sets the type of Association flow as BiDirectional
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnMessageFlows">
            <summary>
            Defines the type of the Bpmn Message Flows
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnMessageFlows.Default">
            <summary>
            Sets the type of the Message flow as Default
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnMessageFlows.InitiatingMessage">
            <summary>
            Sets the type of the Message flow as InitiatingMessage
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnMessageFlows.NonInitiatingMessage">
            <summary>
            Sets the type of the Message flow as NonInitiatingMessage
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSequenceFlows">
            <summary>
            Defines the type of the Bpmn Sequence flows
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSequenceFlows.Normal">
            <summary>
            Sets the type of the sequence flow as Normal
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSequenceFlows.Default">
            <summary>
            Sets the type of the sequence flow as Default
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSequenceFlows.Conditional">
            <summary>
            Sets the type of the sequence flow as Conditional
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionShapes">
            <summary>
            Defines the connection shapes
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectionShapes.None">
            <summary>
            Sets the type of the connection shape as None
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectionShapes.Bpmn">
            <summary>
            Sets the type of the connection shape as Bpmn
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectionShapes.UmlActivity">
            <summary>
            Sets the type of the connection shape as UMLActivity
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ConnectionShapes.UmlClassifier">
            <summary>
            Sets the type of the connection shape as UMLClassifier
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BranchTypes">
            <summary>
            Defines the Alignment position
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchTypes.Left">
            <summary>
            Left - Sets the branch type as Left
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchTypes.Right">
            <summary>
            Right - Sets the branch type as Right
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchTypes.SubLeft">
            <summary>
            SubLeft - Sets the branch type as SubLeft
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchTypes.SubRight">
            <summary>
            SubRight - Sets the branch type as SubRight
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BranchTypes.Root">
            <summary>
            Sets the branch type as Root
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Side">
            <summary>
            Defines where the user handles have to be aligned
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Side.Top">
            <summary>
            Aligns the user handles at the top of an object
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Side.Bottom">
            <summary>
            Aligns the user handles at the bottom of an object
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Side.Left">
            <summary>
            Aligns the user handles at the left of an object
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Side.Right">
            <summary>
            Aligns the user handles at the right of an object
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.State">
            <summary>
            Specifies the state of interactions such as drag, resize, and rotate.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.State.Start">
            <summary>
            Sets the interaction state to start.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.State.Progress">
            <summary>
            Sets the interaction state to progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.State.Completed">
            <summary>
            Sets the interaction state to completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyModifiers">
            <summary>
             Sets a combination of key modifiers, on recognition of which the command will be executed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.KeyModifiers.None">
            <summary>
             No modifiers are pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.KeyModifiers.Control">
            <summary>
             The CTRL key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.KeyModifiers.Meta">
            <summary>
             The Meta key pressed in Mac
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.KeyModifiers.Alt">
            <summary>
             The ALT key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.KeyModifiers.Shift">
            <summary>
             The Shift key
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Keys">
            <summary>
             Sets the key value, on recognition of which the command will be executed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.None">
            <summary>
             No key pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number0">
            <summary>
             The 0 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number1">
            <summary>
             The 1 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number2">
            <summary>
             The 2 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number3">
            <summary>
             The 3 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number4">
            <summary>
             The 4 pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number5">
            <summary>
             The 5 pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number6">
            <summary>
             The 6 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number7">
            <summary>
             The 7 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number8">
            <summary>
             The 8 pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Number9">
            <summary>
             The 9 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.A">
            <summary>
             The A key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.B">
            <summary>
             The B key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.C">
            <summary>
             The C key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.D">
            <summary>
             The D key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.E">
            <summary>
             The E key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F">
            <summary>
             The F pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.G">
            <summary>
             The G pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.H">
            <summary>
             The H key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.I">
            <summary>
             The I key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.J">
            <summary>
             The J pressed
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.K">
            <summary>
             The K key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.L">
            <summary>
             The L key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.M">
            <summary>
             The M key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.N">
            <summary>
             The N key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.O">
            <summary>
             The O key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.P">
            <summary>
             The P key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Q">
            <summary>
             The Q key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.R">
            <summary>
             The R key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.S">
            <summary>
             The S key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.T">
            <summary>
             The T key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.U">
            <summary>
             The U key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.V">
            <summary>
             The V key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.W">
            <summary>
             The W key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.X">
            <summary>
             The X key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Y">
            <summary>
             The Y key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Z">
            <summary>
             The Z key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowLeft">
            <summary>
             The left arrow key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowUp">
            <summary>
             The up arrow key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowRight">
            <summary>
             The right arrow key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.ArrowDown">
            <summary>
             The down arrow key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Escape">
            <summary>
             The Escape key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Space">
            <summary>
             The space key
             </summary> 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.PageUp">
            <summary>
             The page up key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.PageDown">
            <summary>
             The page down key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.End">
            <summary>
             The end key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Home">
            <summary>
             The home key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Delete">
            <summary>
             The delete key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Tab">
            <summary>
             The tab key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Enter">
            <summary>
             The enter key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.BackSpace">
            <summary>
             The BackSpace key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F1">
            <summary>
             The F1 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F2">
            <summary>
             The F2 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F3">
            <summary>
             The F3 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F4">
            <summary>
             The F4 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F5">
            <summary>
             The F5 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F6">
            <summary>
             The F6 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F7">
            <summary>
             The F7 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F8">
            <summary>
             The F8 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F9">
            <summary>
             The F9 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F10">
            <summary>
             The F10 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F11">
            <summary>
             The F11 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.F12">
            <summary>
             The F12 key
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Star">
            <summary>
             The Star
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Plus">
            <summary>
             The Plus
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Keys.Minus">
            <summary>
             The Minus
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NudgeDirection">
            <summary>
             Defines the nudging direction
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NudgeDirection.Left">
            <summary>
             Nudge the object in the left direction
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NudgeDirection.Right">
            <summary>
             Nudge the object in the right direction
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NudgeDirection.Up">
            <summary>
             Nudge the object in the up direction
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NudgeDirection.Down">
            <summary>
             Nudge the object in the down direction
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SnapConstraints">
            <summary>
            Specifies the constraints to Enables / Disables some features of Snapping.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.None">
            <summary>
            Snapping does not happen
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowHorizontalLines">
            <summary>
            Displays only the horizontal gridlines in diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowVerticalLines">
            <summary>
            Displays only the Vertical gridlines in diagram
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.ShowLines">
            <summary>
            Display both Horizontal and Vertical gridlines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToHorizontalLines">
            <summary>
            Enables the object to snap only with horizontal gridlines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToVerticalLines">
            <summary>
            Enables the object to snap only with horizontal gridlines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToLines">
            <summary>
            Enables the object to snap with both horizontal and Vertical gridlines
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.SnapToObject">
            <summary>
            Enables the object to snap with the other objects in the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.SnapConstraints.All">
            <summary>
            Shows gridlines and enables snapping
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BridgeDirection">
            <summary>
            Specifies the bridge direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BridgeDirection.Left">
            <summary>
            Sets the direction of the bridge as Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BridgeDirection.Right">
            <summary>
            Sets the direction of the bridge as Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BridgeDirection.Top">
            <summary>
            Sets the direction of the bridge as Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BridgeDirection.Bottom">
            <summary>
            Sets the direction of the bridge as Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EntryType">
            <summary>
             Defines the entrytype
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.PositionChanged">
            <summary>
            PositionChanged - Sets the entry type as PositionChanged 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.ConnectionChanged">
            <summary>
            ConnectionChanged - Sets the entry type as ConnectionChanged 
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.StartGroup">
            <summary>
            StartGroup - Sets the entry type as StartGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.EndGroup">
            <summary>
            EndGroup - Sets the entry type as EndGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.RotationChanged">
            <summary>
            RotationChanged - Sets the entry type as RotationChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.PropertyChanged">
            <summary>
            PropertyChanged - Sets the entry type as PropertyChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.CollectionChanged">
            <summary>
            CollectionChanged - Sets the entry type as CollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.LabelCollectionChanged">
            <summary>
            LabelCollectionChanged - Sets the entry type as LabelCollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.PortCollectionChanged">
            <summary>
            PortCollectionChanged - Sets the entry type as PortCollectionChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.Group">
            <summary>
            Group - Sets the entry type as Group
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.UnGroup">
            <summary>
            UnGroup - Sets the entry type as UnGroup
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.SegmentChanged">
            <summary>
            SegmentChanged - Sets the entry type as SegmentChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.AnnotationPropertyChanged">
            <summary>
            AnnotationPropertyChanged - Sets the entry type as AnnotationPropertyChanged
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.Undo">
            <summary>
            Undo - Sets the entry type as Undo
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.Redo">
            <summary>
            Redo - Sets the entry type as Redo
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryType.SizeChanged">
            <summary>
            SizeChanged - Sets the entry type as SizeChanged
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EntryCategory">
            <summary>
             Defines the entry category type
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryCategory.InternalEntry">
            <summary>
             Internal - Sets the entry category type as Internal
             </summary>       
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryCategory.ExternalEntry">
            <summary>
             External - Sets the entry category type as External
             </summary>   
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangeAction.CustomAction">
            CustomAction - Defines the history action is customaction 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangeAction.Undo">
            Undo - Defines the history action is Undo 
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryChangeAction.Redo">
            Redo - Defines the history action is Redo 
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.MouseButtons">
            <summary>
            Specifies the mouse click action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Left">
            <summary>
            Whenever the left button of the mouse is clicked, ‘Left’ is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Middle">
            <summary>
            Whenever the mouse wheel is clicked, ‘Middle’ is returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.MouseButtons.Right">
            <summary>
            Whenever the right button of the mouse is clicked, ‘Right’ is returned.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EntryChangeType">
            <summary>
            Define a change type for history entry
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryChangeType.None">
            <summary>
            Defines to none of the history entry to insert/remove
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryChangeType.Insert">
            <summary>
            Defines the history change type is Insert
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.EntryChangeType.Remove">
            <summary>
            Defines the history change type is Remove
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PropertyChangeEvtArgs">
            <summary>
            Provides data for the PropertyChanged event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangeEvtArgs.Element">
            <summary>
            Gets the Item for diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangeEvtArgs.ActualObject">
            <summary>
            Gets the source of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangeEvtArgs.NewValue">
            <summary>
            Gets the new value of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangeEvtArgs.OldValue">
            <summary>
            Gets the old value of the diagram elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PropertyChangeEvtArgs.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragOverEventArgs">
            <summary>
            Notifies when an element drag over another diagram element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragOverEventArgs.Element">
            <summary>
            Gets the node or connector that is dragged over diagram 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragOverEventArgs.Target">
            <summary>
            Gets the node/connector over which the symbol is dragged
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragOverEventArgs.MousePosition">
            <summary>
            Gets the mouse position of the node/connector
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragEnterEventArgs">
            <summary>
            Notifies when the element enter into the diagram from symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragEnterEventArgs.Element">
            <summary>
            Gets the node/connector over which the symbol is dragged
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragEnterEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to add or remove the symbol from diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DragLeaveEventArgs">
            <summary>
            Notifies when the element leaves from  the diagram .
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DragLeaveEventArgs.Element">
            <summary>
            Gets the node or connector that is dragged outside of the diagram
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DropEventArgs">
            <summary>
            DropEventArgs notifies when the element is dropped in the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Element">
            <summary>
            Gets node or connector that is being dropped
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Target">
            <summary>
            Gets the object over which the object will be dropped
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether or not to cancel the drop event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DropEventArgs.Position">
            <summary>
            Gets the position of the object
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectionChangeEventArgs">
            <summary>
            Notifies when select or deselect any objects from the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether the element can be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangeEventArgs.Cause">
            <summary>
            Gets the actual cause of the event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangeEventArgs.NewValue">
            <summary>
            Gets the selected element after the event has triggered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangeEventArgs.OldValue">
            <summary>
            Gets the last selected elements, it's empty if previously, not objects have selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangeEventArgs.State">
            <summary>
            Triggers before and after adding the selection to the object
            in the diagram which can be differentiated through `state` argument.
            We can cancel the event only before the selection of the object
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SelectionChangeEventArgs.Type">
            <summary>
            Gets the item is added or removed from the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.TextEditEventArgs">
            <summary>
            Notifies when the label of an element under goes editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextEditEventArgs.OldValue">
            <summary>
            Gets the old text value of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextEditEventArgs.NewValue">
            <summary>
            Gets the new text value of the element that is being changed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextEditEventArgs.Element">
            <summary>
            Gets a node or connector in which annotation is being edited 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextEditEventArgs.Annotation">
            <summary>
            Gets a annotation which is being edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextEditEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether or not to cancel the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.TextEditEventArgs.State">
            <summary>
            Gets the current action such as starting, completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs">
            <summary>
            Provides data for mouse button related events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Position">
            <summary>
            Gets or sets the position of the mouse point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.ActualObject">
            <summary>
            Gets or sets the actual object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Source">
            <summary>
            Gets or sets the source object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.SourceWrapper">
            <summary>
            Gets or sets the wrapper of source object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.Target">
            <summary>
            Gets or sets the target object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.TargetWrapper">
            <summary>
            Gets or sets the wrapper of target object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DiagramMouseEventArgs.ClickCount">
            <summary>
            Gets or sets the click count.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DraggingEventArgs">
            <summary>
            Notifies when the node or connector is dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates the user can prevent dragging of element over the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.NewValue">
            <summary>
            Gets the current node or connector that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.OldValue">
            <summary>
            Gets the previous node or connector that has dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.Source">
            <summary>
            Gets the node or connector that is being dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.State">
            <summary>
            Gets the current action of the dragged element such as starting, dragging, completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.Target">
            <summary>
            Gets the node or connector that has dragged.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.DraggingEventArgs.TargetPosition">
            <summary>
            Gets the position of the Target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionObject">
            <summary>
            Notifies when the connector’s source id or target id was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.SourceID">
            <summary>
            Gets the source node Id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.SourcePortID">
            <summary>
            Gets the source port Id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.TargetID">
            <summary>
            Gets the target node Id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionObject.TargetPortID">
            <summary>
            Gets the target port Id of the connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectionChangeEventArgs">
            <summary>
            Notifies when the connector’s source id or target id was changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether the user can prevent the connection or disconnection of the connector or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangeEventArgs.Connector">
            <summary>
            Gets the new source node or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangeEventArgs.ConnectorEnd">
            <summary>
            Gets the whether it is source end or target end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangeEventArgs.NewValue">
            <summary>
            Gets the current source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangeEventArgs.OldValue">
            <summary>
            Gets the previous source or target node of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectionChangeEventArgs.State">
            <summary>
            Gets the state of connection endpoint dragging such as starting,  completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotationEventArgs">
            <summary>
            RotationEventArgs notifies when the node/connector are rotated
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationEventArgs.Source">
            <summary>
            Gets the node that is selected for rotation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationEventArgs.State">
            <summary>
            Gets the state of the event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationEventArgs.OldValue">
            <summary>
            Gets the previous rotation angle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationEventArgs.NewValue">
            <summary>
            Gets the new rotation angle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.RotationEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SizeChangeEventArgs">
            <summary>
            Represents the <see cref="T:Syncfusion.Blazor.Diagram.SizeChangeEventArgs"/> to notifies when the node is resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangeEventArgs.Source">
            <summary>
            Gets the node that is selected for resizing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangeEventArgs.State">
            <summary>
            Gets the state of the event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangeEventArgs.OldValue">
            <summary>
            Gets the previous width, height, offsetX and offsetY values of the element that is being resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangeEventArgs.NewValue">
            <summary>
            Gets the new width, height, offsetX and offsetY values of the element that is being resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SizeChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether the event is cancel or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.EndChangeEventArgs">
            <summary>
            Represents the source and target id of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndChangeEventArgs.OldValue">
            <summary>
            Gets the previous target node of the element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndChangeEventArgs.NewValue">
            <summary>
            Gets the current target node of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndChangeEventArgs.TargetNode">
            <summary>
            Gets the target node of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndChangeEventArgs.TargetPort">
            <summary>
            Gets the target port of the element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndChangeEventArgs.State">
            <summary>
            Gets the state of connection end point dragging(starting, dragging, completed)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.EndChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs">
            <summary>
            FixedUserHandleClickEventArgs notifies when the fixed user handle gets clicked
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs.FixedUserHandle">
            <summary>
            Gets the fixed user handle  of nodes/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandleClickEventArgs.Element">
            <summary>
            Gets the selected nodes/connector
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandKeyArgs">
            <summary>
            Notifies to execute custom keyboard commands
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.Name">
            <summary>
            Gets the name of the command
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.CanExecute">
            <summary>
            Gets or sets the value indicates whether the command can be executed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandKeyArgs.Gesture">
            <summary>
            Gets the key combination to be performed
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyEventArgs">
            <summary>
            KeyEventArgs notifies while perform the key actions
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.Element">
            <summary>
            Gets the selected element of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.Key">
            <summary>
            Gets a value of the key action
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.KeyCode">
            <summary>
            Gets a number which represents an actual key pressed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyEventArgs.KeyModifiers">
            <summary>
            Gets any modifier keys were pressed when the flick gesture occurred
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.HistoryChangeArgs">
            <summary>
            Represents the class which is used to notifies while the changes occurs during undo/redo process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangeArgs.Source">
            <summary>
            Gets the collection of objects that are changed in the last undo/redo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangeArgs.Change">
            <summary>
            Gets the old values and new values of each object represents the changes made in last undo/redo.
            </summary>       
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangeArgs.Cause">
            <summary>
            Gets the cause of the event.
            </summary>       
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryChangeArgs.Action">
            <summary>
            Gets the event action.
            </summary>       
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ChangedObject">
            <summary>
            Represents the class which is used to store the changed object during undo/redo process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedObject.OldValue">
            <summary>
            Gets the old value for changedobject.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedObject.NewValue">
            <summary>
            Gets the new value for changedobject.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedObject.Type">
            <summary>
            Gets the entry type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedObject.ChangeType">
            <summary>
            Gets the change type of the Entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedObject.Collection">
            <summary>
            Gets the collection of diagramming elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ChangedValues">
            <summary>
            Represents the class which is used to store the changed value during undo/redo process.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedValues.OffsetX">
            <summary>
            Gets the position of x-axis for diagram element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedValues.OffsetY">
            <summary>
            Gets the position of y-axis for diagram element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedValues.Width">
            <summary>
            Gets the width for diagram element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedValues.Height">
            <summary>
            Gets the height for diagram element. 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ChangedValues.RotateAngle">
            <summary>
            Gets the RotateAngle for diagram element. 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CollectionChangeEventArgs">
            <summary>
            CollectionChangeEventArgs notifies while the node/connector are added or removed in the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangeEventArgs.Cause">
            <summary>
            Gets the action of diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangeEventArgs.Element">
            <summary>
            Gets the selected element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangeEventArgs.State">
            <summary>
            Gets the state of the event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CollectionChangeEventArgs.Type">
            <summary>
            Gets the type of the collection change
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ClickEventArgs">
            <summary>
            Notifies when clicking on an object or diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.ActualObject">
            <summary>
            Gets the object to be clicked on, or returns the diagram when the diagram clicks on.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Count">
            <summary>
            Gets number of times the object or diagram has clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Element">
            <summary>
            Gets the object or id of the diagram based on which has been clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Button">
            <summary>
            Gets which mouse button is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ClickEventArgs.Position">
            <summary>
            Gets the position of the clicked object.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.MouseEventArgs">
            <summary>
            Notifies when the mouse events such as mouse enter, mouse leave, and mouseover are detected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.MouseEventArgs.ActualObject">
            <summary>
            Gets the object such as node or connector when the mouse hovers over the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.MouseEventArgs.Element">
            <summary>
            Gets the parent of the target node or connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.MouseEventArgs.Targets">
            <summary>
            Gets the target object over which the selected object is dragged  
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollValues">
            <summary>
            Specifies the functionalities of the diagram scroll bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollValues.CurrentZoom">
            <summary>
            gets the current close-up view of the diagram. By default, CurrentZoom is set to 1.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollValues.HorizontalOffset">
            <summary>
            Gets the value of the horizontal scroll offset. By default, the HorizontalOffset is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollValues.VerticalOffset">
            <summary>
            Gets the value of the vertical scroll offset. By default, the VerticalOffset is set to 0.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollValues.ViewPortHeight">
            <summary>
            Gets the height of the user-visible area.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollValues.ViewPortWidth">
            <summary>
            Gets the width of the user-visible area.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ScrollChangeEventArgs">
            <summary>
            ScrollChangeEventArgs notifies when the scroller has changed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangeEventArgs.OldValue">
            <summary>
            Gets the previous delay value between subsequent auto scrolls
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangeEventArgs.NewValue">
            <summary>
            gets the new delay value between subsequent auto scrolls
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ScrollChangeEventArgs.PanState">
            <summary>
            Gets the pan state of the object
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs">
            <summary>
            SegmentCollectionChangeEventArgs notifies while the segment of the connectors changes
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.AddSegments">
            <summary>
            Gets the action of diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Cancel">
            <summary>
            Gets or sets the value indicates whether to cancel the change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Element">
            <summary>
            Gets the selected element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.RemoveSegments">
            <summary>
            Gets the removed segement collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SegmentCollectionChangeEventArgs.Type">
            <summary>
            Gets the type of the collection change.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Copy">
            <summary>
            Copy method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.CopyObjects">
            <summary>
            copyObjects method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.Cut">
            <summary>
            Cut method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.IsGroupObjects(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},System.String)">
             <summary>
            When select group children as rubber band selection, check the node is in selected item.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.GetSelectionItems(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject})">
             <summary>
            Get selected item, when select item as rubber band selection.
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.SnappingInstance">
              @private  
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.TranslateBezierPoints(Syncfusion.Blazor.Diagram.Connector,Syncfusion.Blazor.Diagram.Actions,System.Double,System.Double,Syncfusion.Blazor.Diagram.BezierSegment,Syncfusion.Blazor.Diagram.Point,System.Nullable{System.Boolean})">
            <summary>
             Translate the bezier points during the interaction
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.CommandHandler.ScalePreviewObject(System.Double,System.Double,Syncfusion.Blazor.Diagram.Point,Syncfusion.Blazor.Diagram.Selector,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Apply scaling value for the preview item.
            </summary>
            <param name="sw"></param>
            <param name="sh"></param>
            <param name="pivot"></param>
            <param name="refObject"></param>
            <param name="uwidth"></param>
            <param name="uheight"></param>
            <param name="offsetx"></param>
            <param name="offsety"></param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandle">
            <summary>
            Represents the class that used to specifies the behavior of fixedUserHandles.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.FixedUserHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.FixedUserHandle"/> class.
            </summary>
            <param name="src">FixedUserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.FixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.FixedUserHandle"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.ID">
            <summary>
            Gets or sets the unique id of diagram objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.PathData">
            <summary>
            Gets or sets the shape information for fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Fill">
            <summary>
            Gets or sets the fill color of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.HandleStrokeColor">
            <summary>
            Gets or sets the stroke color of the fixed user handle container
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.IconStrokeWidth">
            <summary>
            Gets or sets the stroke width of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Height">
            <summary>
            Gets or sets the height of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Width">
            <summary>
            Gets or sets the width of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.CornerRadius">
            <summary>
            Gets or sets the cornerRadius for fixed user handle container 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.IconStrokeColor">
            <summary>
            Gets or sets the stroke color of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.HandleStrokeWidth">
            <summary>
            Gets or sets the stroke width of the fixed user handle container
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Padding">
            <summary>
            Gets or sets the space between the fixed user handle and container
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FixedUserHandle.Visibility">
            <summary>
            Gets or sets the visibility of the fixed user handle
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle">
            <summary>
            Represents the class that used to defines the node fixed user handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.NodeFixedUserHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle"/> class.
            </summary>
            <param name="src">NodeFixedUserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeFixedUserHandle"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Offset">
            <summary>
            Gets or sets the position of the node fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeFixedUserHandle.Margin">
            <summary>
            Gets or sets the space that the fixed user handle has to be moved from its actual position
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle">
            <summary>
            Represents the class that used to defines the connector fixed user handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.#ctor(Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/> class.
            </summary>
            <param name="src">ConnectorFixedUserHandle.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Offset">
            <summary>
            Gets or sets the position of the connector fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Alignment">
            <summary>
            Gets or sets the segment alignment of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorFixedUserHandle.Displacement">
            <summary>
            Gets or sets the displacement of an fixed user handle from its actual position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ICommonTool">
            <summary>
            Represents the class that is used for common tool. 
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonTool.OnMouseDown(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            Invoked when an unhandled MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to Toolbase class handling for this event.
            </summary>
            <param name="args">The DiagramMouseEventArgs that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonTool.OnMouseMove(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            Invoked when an unhandled MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to Toolbase class handling for this event.
            </summary>
            <param name="args">The DiagramMouseEventArgs that contains the event data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonTool.OnMouseUp(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            Invoked when an unhandled MouseUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="args">The DiagramMouseEventArgs that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ICommonTool.OnMouseLeave(Syncfusion.Blazor.Diagram.DiagramMouseEventArgs)">
            <summary>
            Invoked when an unhandled MouseLeave attached event is raised on this element. Implement this method to ToolBase class handling for this event.
            </summary>
            <param name="args">The DiagramMouseEventArgs that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ToolBase">
            <summary>
            Represents the interactive tools.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ResizeTool">
            <summary>
            Represents the class that helps to scales the selected objects
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.ResizeTool.prevPosition">
            <summary>
            Sets/Gets the previous mouse position
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.ResizeTool.ScaleObjects(System.Double,System.Double,Syncfusion.Blazor.Diagram.Actions,Syncfusion.Blazor.Diagram.Selector)">
            <summary>
            Updates the size with delta width and delta height using scaling.
            </summary>
            <param name="deltaWidth"></param>
            <param name="deltaHeight"></param>
            <param name="corner"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.SelectTool">
            <summary>
            Represents the class that helps to select the objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PolyLineDrawingTool">
            <summary>
            Represents the class that used to draws a polyline connector dynamically using PolyLine Drawing Tool.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorDrawingTool">
            <summary>
            Represents the class that used to draws a connector that is defined by the user.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeDrawingTool">
            <summary>
            Represents the class that used to draws a node that is defined by the user.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.NodeDrawingTool.prevPosition">
            <summary>
            the previous mouse position
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PolygonDrawingTool">
            <summary>
            Represents the class that used to draws a polygon shape node dynamically using polygon Tool.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.RotateTool">
            <summary>
            Represents the class that used to rotates the selected objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FixedUserHandleTool">
            <summary>
            Represents the class that used to update the fixeduserhandle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ZoomPanTool">
            <summary>
             Represents the class that used to pan the diagram control on drag.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.MoveTool">
            <summary>
             Represents the class that used to drag the selected objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LabelTool">
            <summary>
             Represents the class that used to opens the annotation hypeLink at mouse up.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.UserHandle">
            <summary>
            Represents to execute the commonly or frequently used commands around the nodes, connectors and groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.UserHandle"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Name">
            <summary>
            Gets or sets the name of user Handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.ID">
            <summary>
            Gets or sets the unique id of diagram objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.PathData">
            <summary>
            Gets or sets the path data of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Source">
            <summary>
            Gets or sets the image source of the user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BackgroundColor">
            <summary>
            Gets or sets the background color of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Side">
            <summary>
            Gets or sets the position of user Handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BorderColor">
            <summary>
            Gets or sets the borderColor of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.BorderWidth">
            <summary>
            Gets or sets the borderWidth of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Size">
            <summary>
            Gets or sets the size of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.PathColor">
            <summary>
            Gets or sets the path color of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Displacement">
            <summary>
            Gets or sets the displacement of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Visible">
            <summary>
            Gets or sets the visible of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Offset">
            <summary>
            Gets or sets the offset of user Handle 
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Margin">
            <summary>
            Gets or sets the margin of the user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.HorizontalAlignment">
            <summary>
            Gets or sets the horizontalAlignment of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.VerticalAlignment">
            <summary>
            Gets or sets the verticalAlignment of the user handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.UserHandle.Template">
            <summary>
            Gets or sets the geometry of the html element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.UserHandle.#ctor(Syncfusion.Blazor.Diagram.UserHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.UserHandle"/> class.
            </summary>
            <param name="src">UserHandle.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramContent">
            <summary>
            Represents the rendering of the diagram objects
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramHTMLContent">
            <summary>
            Represents the rendering of the diagram objects
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramLayerContent">
            <summary>
            Represents the rendering of the diagram objects
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramSelectorContent">
            <summary>
            Represents the rendering of the diagram selector objects
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.DiagramUserHandleContent">
            <summary>
            Represents the rendering of the diagram objects
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter">
            <summary>
             Converts an Gradient to or from JSON.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads and converts the JSON to type Gradient.
            </summary>
            <param name="reader">The reader.</param>
            <param name="typeToConvert">The type to convert.</param>
            <param name="options">An object that specifies serialization options to use.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.GradientJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Syncfusion.Blazor.Diagram.Gradient,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes a specified value as JSON.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="value">The value to convert to JSON.</param>
            <param name="options">An object that specifies serialization options to use.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.IConnector">
            <summary>
            Defines the properties of the connector
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnShapes">
            <summary>
            Defines the BpmnShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnTriggerShapes">
            <summary>
            Defines the BpmnTriggerShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnGatewayShapes">
            <summary>
            Defines the BpmnGatewayShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnLoopShapes">
            <summary>
            Defines the BpmnLoopShapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.Internal.Dictionary.BpmnTaskShapes">
            <summary>
            Defines the BpmnTaskShapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnTriggerShapePathData(System.String)">
            <summary>
            The GetBpmnTriggerShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnGatewayShapePathData(System.String)">
            <summary>
            The GetBpmnGatewayShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnTaskShapePathData(System.String)">
            <summary>
            The GetBpmnTaskShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnLoopShapePathData(System.String)">
            <summary>
            The GetBpmnLoopShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetBpmnShapePathData(System.String)">
            <summary>
            The GetBpmnShapePathData.
            </summary>
            <param name="shape">The shape<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetPathPointsCollection(System.String)">
            <summary>
            The GetPathPointsCollection.
            </summary>
            <param name="data">The data<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.Dictionary.GetCustomPathPointsCollection(System.String)">
            <summary>
            The GetPathPointsCollection.
            </summary>
            <param name="data">The data<see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.FragmentParameter">
            <summary> 
            RenderingParameters class is used to pass the parameter collection in render fragment
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.SubTextElement">
            <summary>
            Defines the properties of sub text element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Text">
            <summary>
            returns the text from sub text element
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.X">
            <summary>
            returns the start position, where the text element to be rendered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Dy">
            <summary>
            returns the left position, where text to be rendered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.SubTextElement.Width">
            <summary>
            returns the width of the sub text element
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.TextBounds">
            <summary>
            Defines the properties of text bounds
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextBounds.X">
            <summary>
            returns the start position, where the text element is rendered
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.TextBounds.Width">
            <summary>
            returns the width of the sub text element
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Internal.PathInformation">
            <summary>
            Defines the <see cref="T:Syncfusion.Blazor.Diagram.Internal.PathInformation" />.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.Path">
            <summary>
            Gets or sets the Path.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.Points">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.StartPoint">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Internal.PathInformation.TargetPoint">
            <summary>
            Gets or sets the Points.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.DiagramUtil.BezierPoints(Syncfusion.Blazor.Diagram.Point,Syncfusion.Blazor.Diagram.Point,Syncfusion.Blazor.Diagram.Point,Syncfusion.Blazor.Diagram.Point,System.Int32,System.Double)">
            <summary>
             Get the intermediate bezier curve for point over connector
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Internal.PathUtil.GetString(Syncfusion.Blazor.Diagram.Internal.PathSegment)">
            @private 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.ChildContent">
            <summary>
            Sets the child content for the scrollsettings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.CanUndo">
            <summary>
            set the history entry can be undo
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.CanRedo">
            <summary>
            Set the history entry can be redo
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.CurrentEntry">
            <summary>
             Set the current entry object
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.History.Push(Syncfusion.Blazor.Diagram.HistoryEntry)">
            <summary>
            Stores a history entry to history list
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.Undo">
            <summary>
             Used for custom undo option
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.Redo">
            <summary>
             Used for custom redo option
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.History.StartGroupAction">
            <summary>
             Used to intimate the group action is start
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.History.EndGroupAction">
            <summary>
             Used to intimate the group action is end
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.CanLog">
            <summary>
             Used to decide to stored the changes to history
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.UndoStack">
            <summary>
             Used to store the undoStack
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.RedoStack">
            <summary>
              Used to store the redostack
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.History.StackLimit">
            <summary>
             Used to restrict or limits the number of history entry will be stored on the history list
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.Type">
            <summary>
            Sets the type of the entry to be stored
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.ChangeType">
            <summary>
            Gets or sets the type of the object is added or remove.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.RedoObject">
            <summary>
            Sets the changed values to be stored
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.UndoObject">
            <summary>
            Sets the changed values to be stored
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.Category">
            <summary>
             Sets the category for the entry
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.Next">
            <summary>
             Sets the next the current object
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.Previous">
            <summary>
             Sets the previous of the current object
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.IsUndo">
            <summary>
            Gets or sets the value for undo action is activated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.HistoryEntry.Cancel">
            <summary>
             Used to stored the entry or not
             </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.HistoryEntry.ChildTable">
            <summary>
             Used to stored the entry or not
             </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.IDiagramObject">
            <summary>
            Represents the class that is derived from <see cref="T:System.ICloneable"/> interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.IDiagramObject.UpdatePropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked whenever the effective value of any property on this diagram objects has been updated.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.NodeBase">
            <summary>
            Represents the class that defines the common behavior of nodes, connectors and groups.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.#ctor(Syncfusion.Blazor.Diagram.NodeBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeBase"/> class.
            </summary>
            <param name="src">NodeBase</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.NodeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.NodeBase"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.ID">
            <summary>
            Gets or sets the unique id of diagram objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Wrapper">
            <summary>
            Gets or sets the UI of a node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.ZIndex">
            <summary>
            Gets or sets the visual order of the node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Margin">
            <summary>
            Gets or sets the space to be left between the node and its immediate parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Visible">
            <summary>
            Gets or sets the visibility of the node/connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.ExcludeFromLayout">
            <summary>
            Gets or sets the value indicates whether the node should be automatically positioned or not. Applicable, if layout option is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.AddInfo">
            <summary>
            Gets or sets the user to save custom information/data about a node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.NodeBase.Flip">
            <summary>
            Gets or sets a valeue to flip the element in Horizontal/Vertical directions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.DiagramObject">
            <summary>
            Represents the class that define the base class for the diagram object.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.#ctor(Syncfusion.Blazor.Diagram.DiagramObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.DiagramObject"/> class.
            </summary>
            <param name="src">DiagramObject</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.UpdatePropertyChanged(System.String,System.Object,System.Object,Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Invoked whenever the effective value of any property on this diagram objects has been updated.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.DiagramObject.GetParent">
            <summary>
            Gets a parent of an object
            </summary>
            <returns>returns a parent of an object.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Connector">
            <summary>
            Defines the behavior of Connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Constraints">
            <summary>
            Defines the constraints of connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePoint">
            <summary>
            Sets the beginning point of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPoint">
            <summary>
            Sets the end point of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Shape">
            <summary>
            Defines the type of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.FixedUserHandles">
            <summary>
            Specifies the collection of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourceID">
            <summary>
            Sets the source node/connector object of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetID">
            <summary>
            Sets the target node/connector object of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePortID">
            <summary>
            Sets the unique id of the source port of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPortID">
            <summary>
            Sets the unique id of the target port of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.CornerRadius">
            <summary>
            Sets the corner radius of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.HitPadding">
            <summary>
            Sets the connector padding value
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourcePadding">
            <summary>
            Sets the source padding of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetPadding">
            <summary>
            Sets the target padding of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.ConnectionPadding">
            <summary>
            Sets the connector padding value
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.BridgeSpace">
            <summary>
            Defines the bridgeSpace of connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Type">
            <summary>
            Defines the type of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Segments">
            <summary>
            Defines the segments
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Annotations">
            <summary>
            Defines the collection of annotations
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.Style">
            <summary>
            Defines the appearance of the connection path
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.SourceDecorator">
            <summary>
            Defines the source decorator of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Connector.TargetDecorator">
            <summary>
            Defines the target decorator of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorSegment.Type">
            <summary>
            Defines the type of the segment
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorSegment.AllowDrag">
            <summary>
            Defines the segment to be drag or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.StraightSegment.Point">
            <summary>
            Sets the end point of the connector segment
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Point1">
            <summary>
            Sets the first control point of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Point2">
            <summary>
            Sets the second control point of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Vector1">
            <summary>
            Defines the length and angle between the source point and the first control point of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BezierSegment.Vector2">
            <summary>
            Defines the length and angle between the target point and the second control point of the diagram
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Vector">
            <summary>
            Describes the length and angle between the control point and the start point of bezier segment
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Vector.Angle">
            <summary>
            Defines the angle between the connector end point and control point of the bezier segment
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Vector.Distance">
            <summary>
            Defines the distance between the connector end point and control point of the bezier segment
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.OrthogonalSegment.Length">
            <summary>
            Defines the length of orthogonal segment
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.OrthogonalSegment.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Decorator.Width">
            <summary>
            Sets the width of the decorator
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Decorator.Height">
            <summary>
            Sets the height of the decorator
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Decorator.Shape">
            <summary>
            Sets the shape of the decorator
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Decorator.PathData">
            <summary>
            Defines the geometry of the decorator shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Decorator.Pivot">
            <summary>
            Defines the position of the decorator with respect to the source/target point of the connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Decorator.Style">
            <summary>
            Sets the shape style of the connector
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.CommandManager">
            <summary>
            Represents a class to defines the collection of commands and the corresponding key gestures.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.ChildContent">
            <summary>
            Gets or sets the child content for the Command Manager
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.Commands">
            <summary>
            Gets or sets the collection of <see cref="T:Syncfusion.Blazor.Diagram.Command"/> and used to stores the multiple command names with the corresponding command objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.CanExecute">
            <summary>
            Gets or sets a value to check the command is executable at the moment or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.CommandManager.Execute">
            <summary>
            Gets or sets a value defines what to be executed when the key combination is recognized.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.KeyGesture">
            <summary>
            Represents a class that defines the combination of keys and modifier keys
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyGesture.Key">
            <summary>
            Gets or sets the key value, on recognition of which the command will be executed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.KeyGesture.KeyModifiers">
            <summary>
            Gets or sets a combination of key modifiers, on recognition of which the command will be executed
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Command">
            <summary>
            Represents a class that defines a command and a key gesture to define when the command should be executed .
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Command.Name">
            <summary>
            Gets or sets the name of the command
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Command.Gesture">
            <summary>
             Gets or sets a combination of keys and key modifiers, on recognition of which the command will be executed
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Command.Parameter">
            <summary>
            Gets or sets any additional parameters that are required at runtime
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.FixedNode">
            <summary>
            Gets or sets the name of the node with respect to which all other nodes will be translated
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.ChildContent">
            <summary>
            Gets or sets the child content for the layout
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.GetLayoutInfo">
            <summary>
            GetLayoutInfo is used to configure every subtree of the organizational chart
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalSpacing">
            <summary>
            Gets or sets the space that has to be Vertically left between the nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Bounds">
            <summary>
            Gets or sets the bounds value of layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalSpacing">
            <summary>
            Gets or sets the space that has to be horizontally left between the nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Root">
            <summary>
            Gets or sets the root element of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Orientation">
            <summary>
            Gets or sets the orientation of a layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.HorizontalAlignment">
            <summary>
            Gets or sets how the layout has to be horizontally aligned.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.VerticalAlignment">
            <summary>
            Gets or sets how the layout has to be vertically aligned.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Type">
            <summary>
            Gets or sets the type of the layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Layout.Margin">
            <summary>
            Gets or sets the space between the viewport and the layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.LayoutMargin">
            <summary>
            Represents the class that defines the margin of a Layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.LayoutMargin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.LayoutMargin"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Hyperlink.Color">
            <summary>
            Gets or set the fill color of the hyperlink
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Hyperlink.Content">
            <summary>
            Gets or sets the content for hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Hyperlink.Link">
            <summary>
            Gets or sets the link for hyperlink.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Hyperlink.TextDecoration">
            <summary>
            Defines how the link should be decorated. For example, with underline/over line
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Annotation">
            <summary>
            Defines the textual description of nodes/connectors
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.ID">
            <summary>
            Represents the unique id of diagram objects
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Content">
            <summary>
            Sets the textual description of the node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Template">
            <summary>
            Sets the textual description of the node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.AnnotationType">
            <summary>
            Defines the type of annotation template
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Visibility">
            <summary>
            Defines the visibility of the label
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Constraints">
            <summary>
            Enables or disables the default behaviors of the label.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Hyperlink">
            <summary>
            Sets the hyperlink of the label
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Width">
            <summary>
            Sets the width of the text
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Height">
            <summary>
            Sets the height of the text
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.RotateAngle">
            <summary>
            Sets the rotate angle of the text
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Style">
            <summary>
            Defines the appearance of the text
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.HorizontalAlignment">
            <summary>
            Sets the horizontal alignment of the text with respect to the parent node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.VerticalAlignment">
            <summary>
            Sets the vertical alignment of the text with respect to the parent node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Margin">
            <summary>
            Sets the space to be left between an annotation and its parent node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.DragLimit">
            <summary>
            Sets the space to be left between an annotation and its parent node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.Type">
            <summary>
            Sets the type of the annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Annotation.AddInfo">
            <summary>
            Allows the user to save custom information/data about an annotation
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ShapeAnnotation">
            <summary>
            Defines the textual description of nodes/connectors with respect to bounds
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ShapeAnnotation.Offset">
            <summary>
            Sets the position of the annotation with respect to its parent bounds
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PathAnnotation">
            <summary>
            Defines the connector annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Offset">
            <summary>
            Sets the segment offset of annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Displacement">
            <summary>
            Sets the displacement of an annotation from its actual position
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.Alignment">
            <summary>
            Sets the segment alignment of annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PathAnnotation.SegmentAngle">
            <summary>
            Enable/Disable the angle based on the connector segment
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDiagrams">
            <summary>
            Defines the behavior of nodes
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Node">
            <summary>
            Defines the behavior of nodes
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OffsetX">
            <summary>
            Sets the x-coordinate of the position of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.OffsetY">
            <summary>
            Sets the y-coordinate of the position of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.FixedUserHandles">
            <summary>
            Specifies the collection of the fixed user handle
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Width">
            <summary>
            Sets the width of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Height">
            <summary>
            Sets the height of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MinWidth">
            <summary>
            Sets the minimum width of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MinHeight">
            <summary>
            Sets the minimum height of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MaxWidth">
            <summary>
            Sets the maximum width of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.MaxHeight">
            <summary>
            Sets the maximum height of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.RotateAngle">
            <summary>
            Sets the rotate angle of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Style">
            <summary>
            Sets the shape style of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Shadow">
            <summary>
            Sets the shadow of the shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BackgroundColor">
            <summary>
            Sets the background color of the shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BorderColor">
            <summary>
            Sets the border color of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.BorderWidth">
            <summary>
            Sets the border width of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Data">
            <summary>
            Defines the shape of a node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.Constraints">
            <summary>
            Enables/Disables certain features of nodes
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.HorizontalAlignment">
            <summary>
            Sets the horizontalAlignment of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Node.VerticalAlignment">
            <summary>
            Sets the verticalAlignment of the node
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.Init">
            <summary>
            Allows to initialize the UI of a node
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Node.InitContainer">
            <summary>
            Initialize the container for the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Group.Children">
            <summary>
            Defines the children of group element
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Port">
            Defines the behavior of connection ports
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.ID">
            <summary>
            Represents the unique id of diagram objects
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.HorizontalAlignment">
            <summary>
            Sets the horizontal alignment of the port with respect to its immediate parent(node/connector)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.VerticalAlignment">
            <summary>
            Sets the vertical alignment of the port with respect to its immediate parent(node/connector)
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Margin">
            <summary>
            Defines the space that the port has to be moved from its actual position
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Width">
            <summary>
            Sets the width of the port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Height">
            <summary>
             Sets the height of the port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Style">
            <summary>
            Defines the appearance of the port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Shape">
            <summary>
            Defines the type of the port shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Visibility">
            <summary>
            Defines the type of the port visibility
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.PathData">
            <summary>
            Defines the geometry of the port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.Constraints">
            <summary>
            Defines the constraints of port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.AddInfo">
            <summary>
            Allows the user to save custom information/data about a port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.OutEdges">
            <summary>
            Defines the collection of the objects that are connected to a particular port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Port.InEdges">
            <summary>
            Defines the collection of the objects that are connected from a particular port
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.PointPort">
            Defines the behavior of a port, that sticks to a point
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.PointPort.Offset">
            <summary>
            Defines the position of the port with respect to the boundaries of nodes/connector
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Shape">
            <summary>
            Defines the behavior of shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Shape.Type">
            <summary>
            Defines the type of node shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.ConnectorShape">
            <summary>
            Defines the behavior of connector shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.ConnectorShape.Type">
            <summary>
            Defines the type of connector shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Flow">
            <summary>
             Sets the type of the Bpmn flows
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Sequence">
            <summary>
            Sets the type of the Bpmn Sequence flows
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Message">
            <summary>
            Sets the type of the Bpmn Message flows
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnFlow.Association">
            <summary>
            Sets the type of the Bpmn association flows
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Path.Data">
            <summary>
            Defines the geometry of a path
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Image.Source">
            <summary>
            Defines the image source
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Image.Align">
            <summary>
            Sets the alignment of the image within the node boundary
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Image.Scale">
            <summary>
            Allows to stretch the image as you desired (either to maintain proportion or to stretch)
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BasicShape">
            <summary>
            Defines the behavior of the basic shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.Shape">
            <summary>
            Defines the type of the basic shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.CornerRadius">
            <summary>
            Sets the corner of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BasicShape.Points">
            <summary>
            Defines the collection of points to draw a polygon
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.FlowShape">
            <summary>
            Defines the behavior of the flow shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.FlowShape.Shape">
            <summary>
            Defines the type of the flow shape
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnShape">
            <summary>
            Defines the behavior of the bpmn shape
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnShape.annotationId">
            <summary>
            Sets whether the task is global or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Shape">
            <summary>
            Defines the type of the BPMN shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Annotation">
            <summary>
            Defines the text of the bpmn annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Annotations">
            <summary>
            Defines the text of the bpmn annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Events">
            <summary>
            Defines the type of the BPMN Event shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Gateway">
            <summary>
             Defines the type of the BPMN Gateway shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.Activity">
            <summary>
            Defines the type of the BPMN Activity shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnShape.DataObject">
            <summary>
            Defines the type of the BPMN DataObject shape
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSubProcess">
            <summary>
            Defines the behavior of the BPMNSubProcess
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Diagram.BpmnSubProcess.processesID">
            <summary>
            Defines the ID of the subprocess
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Type">
            <summary>
            Defines the type of the sub process
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Adhoc">
            <summary>
            Defines whether the sub process is without any prescribed order or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Boundary">
            <summary>
            Defines the type of the sub process
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Compensation">
            <summary>
            Defines the whether the task is triggered as a compensation of another task
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Loop">
            <summary>
            Defines the type of the BPMN loops
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Collapsed">
            <summary>
            Sets whether the task is global or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Events">
            <summary>
            Sets the alignment of the image within the node boundary
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Transaction">
            <summary>
            Defines the transaction sub process
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubProcess.Processes">
            <summary>
            Defines the transaction sub process
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnAnnotation">
            <summary>
            Interface for a class BpmnAnnotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.Text">
            <summary>
            Sets the text to annotate the bpmn shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.Angle">
            <summary>
            Sets the angle between the bpmn shape and the annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.Length">
            <summary>
            Sets the distance between the bpmn shape and the annotation
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnAnnotation.NodeId">
            <summary>
            Sets the id of the BPMN sub event
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess">
            <summary>
            Interface for a class BpmnTransactionSubProcess
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.Success">
            <summary>
            Defines the size and position of the success port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.Failure">
            <summary>
            Defines the size and position of the failure port
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTransactionSubProcess.Cancel">
            <summary>
            Defines the size and position of the cancel port
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnEvent">
            <summary>
            Interface for a class BpmnEvent
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnEvent.Shape">
            <summary>
            Defines the type of the event shape
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnEvent.Trigger">
            <summary>
            Defines the type of the trigger
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnGateway">
            <summary>
            Defines the behavior of the BpmnGateway
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnGateway.Type">
            <summary>
            Defines the type of the BPMN Gateway
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnDataObject">
            <summary>
            Interface for a class BpmnDataObject
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnDataObject.Type">
            <summary>
            Defines the type of the BPMN data object
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnDataObject.Collection">
            <summary>
            Sets whether the data object is a collection or not
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnTask">
            <summary>
            Interface for a class BpmnTask
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Type">
            <summary>
            Defines the type of the task
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Loop">
            <summary>
            Defines the type of the BPMN loops
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Call">
            <summary>
            Sets whether the task is global or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnTask.Compensation">
            <summary>
            Sets whether the task is triggered as a compensation of another specific activity
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnActivity">
            <summary>
            Interface for a class BpmnActivity
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.Activity">
            <summary>
            Defines the type of the activity
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.Task">
            <summary>
            Defines the BPMN task
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnActivity.SubProcess">
            <summary>
            Defines the type of the SubProcesses
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.BpmnSubEvent">
            <summary>
            Interface for a class BpmnSubEvent
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.ID">
            <summary>
            Represents the unique id of diagram objects
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Wrapper">
            <summary>
            Sets or gets the UI of a node/connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Event">
            <summary>
            Sets the type of the BPMN Event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Trigger">
            <summary>
            Defines the type of the trigger
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Offset">
            <summary>
            Defines the position of the sub event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Width">
            <summary>
            Sets the width of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Height">
            <summary>
            Sets the height of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Visible">
            <summary>
            Sets the visibility of the sub event
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.HorizontalAlignment">
            <summary>
            Sets the horizontalAlignment of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.VerticalAlignment">
            <summary>
            Sets the verticalAlignment of the node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.BpmnSubEvent.Margin">
            <summary>
            Defines the space to be left between the node and its immediate parent
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Selector">
            <summary>
             Represents a visual representation of selected elements. It behaves like a container for single or multiple selected elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.Nodes">
            <summary>
            Gets or sets a collection of objects where each object represents a Node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.Connectors">
            <summary>
            Gets or sets a collection of objects where each object represents a Connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.Width">
            <summary>
            Gets or sets the width for diagram object.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.Height">
            <summary>
            Gets or sets the height for diagram object.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.OffsetX">
            <summary>
            Gets or sets the position of the node on X-Axis.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.OffsetY">
            <summary>
            Gets or sets the position of the node on Y-Axis.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.RotateAngle">
            <summary>
            Gets or sets the angle to which the node should be rotated.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.Pivot">
            <summary>
            Gets or sets the ratio/fractional value relative to node, based on which the node will be transformed(positioning, scaling and rotation).
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.UserHandles">
            <summary>
            Gets or sets a collection of object where each object represents a UserHandle.
            </summary>  
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.RubberBandSelectionMode">
            <summary>
            Gets or sets a selection mode of the rubberband.
            </summary> 
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Selector.Constraints">
            <summary>
            Gets or sets the default behaviors for selector.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Selector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Selector"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Selector.#ctor(Syncfusion.Blazor.Diagram.Selector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Selector"/> class.
            </summary>
            <param name="src">Selector</param>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Point.#ctor">
            <summary>
            Initializes a new instance of the Point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Point.#ctor(Syncfusion.Blazor.Diagram.Point)">
            <summary>
            Initializes a new instance of the Point.
            </summary>
            <param name="src">Point.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Point.X">
            <summary>
            Gets or sets the x-coordinate of this Point.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Point.Y">
            <summary>
            Gets or sets the y-coordinate of this Point.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Point.#ctor(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            nitializes a new instance of the Point struct with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Point.Transform(Syncfusion.Blazor.Diagram.Point,System.Double,System.Double)">
            <summary>
            Transform the point based on the rotate angle and length.
            </summary>
            <param name="point"></param>
            <param name="angle"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Point.FindAngle(Syncfusion.Blazor.Diagram.Point,Syncfusion.Blazor.Diagram.Point)">
            <summary>
            Find the angle between the two points.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Point.IsEmptyPoint(Syncfusion.Blazor.Diagram.Point)">
            <summary>
            Check whether the points are given 
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Rect">
            <summary>
            Describes the width, height, and location of a rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.X">
            <summary>
            Gets or sets the x-axis value of the left side of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Y">
            <summary>
            Gets or sets the y-axis value of the top side of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Rect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Rect"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Rect.#ctor(Syncfusion.Blazor.Diagram.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Blazor.Diagram.Rect"/> class.
            </summary>
            <param name="src">Rect.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.Rect.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the Rect  that has the specified x-coordinate, y-coordinate, width, and height.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Left">
            <summary>
            Gets the x-axis value of the left side of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Right">
            <summary>
            Gets the x-axis value of the right side of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Top">
            <summary>
            Gets the y-axis position of the top of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Bottom">
            <summary>
            Gets the y-axis value of the bottom of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.TopLeft">
            <summary>
            Gets the position of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.TopRight">
            <summary>
            Gets the position of the top-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.TopCenter">
            <summary>
            Gets or sets the position of the top-Center corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.MiddleLeft">
            <summary>
            Gets or sets the position of the middle-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.MiddleRight">
            <summary>
            Gets or sets the position of the middle-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.Center">
            <summary>
            Gets or sets the position of the center of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.BottomLeft">
            <summary>
            Gets or sets the position of the bottom-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.BottomRight">
            <summary>
            Gets or sets the position of the bottom-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Rect.BottomCenter">
            <summary>
            Gets or sets the position of the bottom-center corner of the rectangle.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Diagram.Size">
            <summary>
            Represents the class that is used to describe the Size of an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Size.Width">
            <summary>
            Gets or sets the width of an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.Size.Height">
            <summary>
            Gets or sets the height of an object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ChildContent">
            <summary>
            Sets Child content for the diagram component
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Constraints">
            <summary>
            Constraints are used to enable/disable certain behaviors of the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.SnapSettings">
            <summary>
            Defines the gridlines and defines how and when the objects have to be snapped
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.DiagramTemplates">
            <summary>
            Defines the Digaram templates
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.PageSettings">
            <summary>
            Page settings enable to customize the appearance, width, and height of the Diagram page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.ScrollSettings">
            <summary>
            Defines the current zoom value, zoom factor, scroll status and view port size of the diagram
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.Layout">
            <summary>
            Defines the Digaram Layout
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Diagram.SfDiagramComponent.CommandManager">
            <summary>
            Defines the Command Manager
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Copy">
            <summary>
            Represents a method used to copy the selected elements in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Cut">
            <summary>
            Represents a method used to cut the selected elements in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Paste">
            <summary>
            Represents a method used to paste the copied elements in the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.GetPageBounds(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Represents a method used to get the bounds of the page.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Nudge(Syncfusion.Blazor.Diagram.NudgeDirection,System.Nullable{System.Int32})">
            <summary>
            Repositions the selected object by the specified delta in the given direction 
            </summary>
            <remarks>The nudge commands move the selected elements towards up, down, left, or right by 1 pixel, by default.</remarks>
            <param name="direction">Nudge command moves the selected elements towards the specified <seealso cref="T:Syncfusion.Blazor.Diagram.NudgeDirection"/>.</param>
            <param name="nudgeDelta">The amount in delta by which to reposition the selected objects.</param>
            examples for the following:
            <example>
            <code>
            private void Nudge()
             {
               //Repositions the selected objects by 50 towards down direction.
               diagram.Nudge(NudgeDirection.Down, 50);
             }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragSourceEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double)">
            <summary>
             Moves the source point of the connector
             </summary>     
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.DragTargetEnd(Syncfusion.Blazor.Diagram.Connector,System.Double,System.Double)">
            <summary>
             Moves the target point of the connector
             </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.Select(System.Collections.ObjectModel.ObservableCollection{Syncfusion.Blazor.Diagram.IDiagramObject},System.Nullable{System.Boolean})">
            <summary>
             Selects the given collection of objects
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.SelectAll">
            <summary>
             Selects the all the objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.UnSelect(Syncfusion.Blazor.Diagram.IDiagramObject)">
            <summary>
            Removes the given object from selection list
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Diagram.SfDiagramComponent.ClearSelection">
            <summary>
             Removes all elements from the selection list
             </summary>        
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.Width">
            <summary>
            Defines the width of the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.Height">
            <summary>
            Defines the height of the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.AllowDrag">
            <summary>
            Defines whether the symbols can be dragged from palette or not
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.ChildContent">
            <summary>
            Sets Child content for the symbol Palette component
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.SymbolWidth">
            <summary>
            Defines the width of the symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.SymbolHeight">
            <summary>
            Defines the height of the symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.SymbolPreview">
            <summary>
            Defines the size and position of the symbol preview
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.SymbolDragSize">
            <summary>
            customize the drag size of the individual palette items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.SymbolPaletteTemplates">
            <summary>
            Defines the Symbol Palette templates
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.Palettes">
            <summary>
            Defines the collection of symbol groups
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.SymbolMargin">
            <summary>
            Defines the space to be left around a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.PaletteNodeDefaults">
            <summary>
            Helps to return the default properties of node
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.PaletteConnectorDefaults">
            <summary>
            Helps to return the default properties of connector
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.GetSymbolInfo">
            <summary>
            Defines the size, appearance and description of a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.PaletteSelectionChange">
            <summary>
            Triggers after the selection changes in the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SfSymbolPaletteComponent.OnExpanding">
            <summary>
            The event will be Triggers before the item gets collapsed/expanded.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SymbolPalette.SymbolInfo">
            <summary>
            Defines the size and description of a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolInfo.Height">
            <summary>
            Defines the height of the symbol to be drawn over the palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolInfo.Width">
            <summary>
            Defines the width of the symbol to be drawn over the palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolInfo.Fit">
            <summary>
            Defines whether the symbol has to be fit inside the size, that is defined by the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolInfo.Description">
            <summary>
            Define the text to be displayed and how that is to be handled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SymbolPalette.SymbolDescription">
            <summary>
            Defines the textual description of a symbol
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolDescription.Text">
            <summary>
            Defines the symbol description
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolDescription.Overflow">
            <summary>
            Defines how to handle the text when its size exceeds the given symbol size
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolDescription.Wrap">
            <summary>
            Defines how to wrap the text
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SymbolPalette.PaletteSelectionChangeArgs">
            <summary>
            Notifies when the selection objects change in the symbol palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.PaletteSelectionChangeArgs.OldValue">
            <summary>
            returns the old palette item that is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.PaletteSelectionChangeArgs.NewValue">
            <summary>
            returns the new palette item that is selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SymbolPalette.PaletteExpandArgs">
            <summary>
            Notifies when the palette items are expanded or collapsed in the symbol palette
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.PaletteExpandArgs.Index">
            <summary>
             returns the index of the palette item selected .
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.PaletteExpandArgs.IsExpanded">
            <summary>
            returns the value whether the palette item is expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.PaletteExpandArgs.Cancel">
            <summary>
            cancels the palette item expand or collapse.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.PaletteExpandArgs.Palette">
            <summary>
            returns the properties of the palette item selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolMargin.Bottom">
            <summary>
            It sets the space to be left from the bottom side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolMargin.Left">
            <summary>
            It sets the space to be left from the left side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolMargin.Right">
            <summary>
            It sets the space to be left from the right side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolMargin.Top">
            <summary>
            It sets the space to be left from the top side of the parent of an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolPaletteTemplates.ChildContent">
            <summary>
            Represents a segment of UI content, implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SymbolPalette.SymbolPaletteTemplates.NodeTemplate">
            <summary>
            Represents the template content to the node. By default, it will be undefined.
            </summary>  
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FloatLabelType">
            <summary>
            Defines floating label type of the input and decides how the label should float on the input.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Never">
            <summary>
            The placeholder text should not be float ever.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Always">
            <summary>
            The placeholder text floats above the input always.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.FloatLabelType.Auto">
            <summary>
            The placeholder text floats above the input while focusing or enter a value in input.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.AutoComplete">
            <summary>
            Specifies whether the browser is allow to automatically enter or select a value for the textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.AutoComplete.On">
            <summary>
            Specifies that autocomplete is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.AutoComplete.Off">
            <summary>
            Specifies that autocomplete is disabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.InputType">
            <summary>
            Define the attribute specifies the type of textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Text">
            <summary>
            The text field is a single-line text.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Email">
            <summary>
            Set an e-mail type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Password">
            <summary>
            Set the password type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Number">
            <summary>
            Set the number type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Search">
            <summary>
            Set the search type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.Tel">
            <summary>
            Set the tel type to TextBox component.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.InputType.URL">
            <summary>
            Set the URL type to TextBox component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.SfInputBase">
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnPaste">
            <summary>
            Triggers when the content is paste into an input.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BindClearBtnEvents">
            <summary>
            Triggers when the clear gets clicked.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BindClearBtnTouchEvents">
            <summary>
            Triggers when the clear icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseDownOnSpinner">
            <summary>
            Triggers when the spin down gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchDownOnSpinner">
            <summary>
            Triggers when the spin down icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseUpOnSpinner">
            <summary>
            Triggers when the spin up gets clicked.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchUpOnSpinner">
            <summary>
            Triggers when the spin up icon gets touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseIconHandler">
            <summary>
            Triggers when the icon gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TouchIconHandler">
            <summary>
            Triggers when the icon get touch.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseContainerHandler">
            <summary>
            Triggers when the container gets click.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnContainerBlur">
            <summary>
            Triggers when the container gets focus out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnContainerFocus">
            <summary>
            Triggers when the container gets focused.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerKeypress">
            <summary>
            Triggers when the container key pressed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ID">
            <summary>
            Specifies the id of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.InputEditContext">
            <summary>
            Specifies the edit context of the Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Autocomplete">
            <summary>
            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.EnablePersistence">
            <summary>
            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Locale">
            <summary>
            Specifies the global culture and localization of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            The TextBox changes from a single line to multiline when enabling this multiline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Placeholder">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsReadOnlyInput">
            <summary>
            Specifies the boolean value for dropdownlist default readonly property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerAttr">
            <summary>
            Specifies the container attrubute of Input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Buttons">
            <summary>
            Specifies the icon of the TextBox component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.PrependButtons">
            <summary>
            Specifies the prepend icon of the TextBox component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SpinButton">
            <summary>
            Specifies a boolean value that enable or disable the spin button on the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ContainerClass">
            <summary>
            Specifies the class value that is appended to container of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ValueTemplate">
            <summary>
            Accepts the template design and assigns it to the selected list item in the input element of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsValueTemplate">
            <summary>
            Specifies a boolean value that indicates whether the value template is displayed in TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.RootClass">
            <summary>
            Gets or Set the component class to element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.ClickStopPropagation">
            <summary>
            Specifies the prevents the click actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MouseDowSpinnerPrevent">
            <summary>
            Specifies the prevents the mouse actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.PreventIconHandler">
            <summary>
            Specifies the prevents the icon actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.MousePreventContainer">
            <summary>
            Specifies the prevents the container actions.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsShowSpinnerOnClear">
            <summary>
            Specifies the spinner show on clear icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.IsShowSpinnerOnIcon">
            <summary>
            Specifies the spinner show on dropdown icon.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Parent">
            <exclude/>
            <summary>
            Gets or sets the Parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnParametersSetAsync">
            <summary>
            Triggers when dynamically changing the component property.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component get rendered.
            </summary>
            <param name="firstRender">True if the component rendered for the first time.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SetReadOnly">
            <summary>
            The setReadOnly.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.CreateFloatingLabel">
            <summary>
            The createFloatingLabel.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.SetEnabled">
            <summary>
            The setEnabled.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.BlurHandler">
            <summary>
            triggers while the component get focused out.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.SfInputBase.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">The rootClass<see cref="T:System.String"/>.</param>
            <param name="containerClass">The containerClass<see cref="T:System.String"/>.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IInputBase">
            <summary>
            Common properties for input base component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IInputBase.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.IInputBase.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component root class and container element class.
            </summary>
            <param name="rootClass">Specifies the root class of the InputBase.</param>
            <param name="containerClass">Specifies the container class of the InputBase.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs">
            <summary>
            Specifies the icon handler arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs.eventArgs">
            <summary>
            Specifies the <see cref="T:System.EventArgs"/> arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs.IconName">
            <summary>
            Specifies the name of the icon.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.UploaderStreamReader.#ctor(Syncfusion.Blazor.Inputs.SfUploader)">
            <summary>
            Constructor for initializing the component adaptor.
            </summary>
            <param name="parent">Uploader arguments.</param>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploaderStreamReader.UploaderFileStream.Position">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.UploaderStreamReader.UploadData">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileList.UploaderFileInterop">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.UploadReadFile.GetFileReader">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IUploadReadFile">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.IUploadReadFile.GetFileReader">
            <summary>
            Opens a stream to read the file.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.IUploadFileList">
            <summary>
            Specifies the interface for upload file list.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Internal.IUploadFileList.FileListData(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Register for drop events on the source element.
            </summary>
            <param name="ele">Specifies the element reference.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails">
            <summary>
            Specifies the upload file status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails.chunksize">
            <summary>
            Specifies the chunk size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Internal.UploadFileDetails.totalChunksize">
            <summary>
            Specifies the total chunk size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfColorPicker">
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
            <summary>
            ColorPicker component is a user interface to select and adjust color values.
            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ID">
            <summary>
            Sets ID attribute for color picker element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the dropdown button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Columns">
            <summary>
            It is used to render the ColorPicker palette with specified columns.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.CssClass">
            <summary>
            This property sets the CSS classes to root element of the ColorPicker
             which helps to customize the UI styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Disabled">
            <summary>
            It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup won’t open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnableOpacity">
            <summary>
            It is used to enable / disable the opacity option of ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnablePersistence">
            <summary>
            To enable or disable persisting component's state between page reloads and it is extended from component class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Inline">
            <summary>
            It is used to render the ColorPicker component as inline.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Mode">
            <summary>
            It is used to render the ColorPicker with the specified mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ModeSwitcher">
            <summary>
            It is used to show / hide the mode switcher button of ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.NoColor">
            <summary>
            It is used to enable / disable the no color option of ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.PresetColors">
            <summary>
            It is used to load custom colors to palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons">
            <summary>
            It is used to show / hide the control buttons (apply / cancel) of  ColorPicker component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Value">
            <summary>
            It is used to set the color value for ColorPicker. It should be specified as Hex code.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnOpen">
            <summary>
            Triggers before opening the ColorPicker popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Opened">
            <summary>
            Triggers while opening the ColorPicker popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnClose">
            <summary>
            Triggers before closing the ColorPicker popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnModeSwitch">
            <summary>
            Triggers before Switching between ColorPicker mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ModeSwitched">
            <summary>
            Triggers after the ColorPicker mode is switched.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.OnTileRender">
            <summary>
            Triggers while rendering each palette tile.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ValueChange">
            <summary>
            Triggers while changing the colors. It will be triggered based on the showButtons property.
            If the property is false, the event will be triggered while selecting the colors.
            If the property is true, the event will be triggered while apply the selected color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Selected">
            <summary>
            Triggers while selecting the color in picker / palette, when ShowButtons property is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfColorPicker.ColorPickerParent">
            <summary>
            Parent component of ColorPicker.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.GetValue(System.String,Syncfusion.Blazor.Inputs.ColorValueType)">
            <summary>
            To get color value in specified type.
            </summary>
            <param name = "value">Specify the color value.</param>
            <param name = "type">Specify the type to which the specified color needs to be converted.</param>
            <returns>Returns the color value in specified type.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.Toggle">
            <summary>
             To show/hide ColorPicker popup based on current state of the SplitButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.FocusIn">
            <summary>
            Sets the focus to Colorpicker.
            its native method.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.FocusAsync">
            <summary>
            Sets the focus to Colorpicker.
            its native method.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfColorPicker.SetOffset(Syncfusion.Blazor.Inputs.Offset)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerMode">
            <summary>
            ColorPicker Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker">
            <summary>
            To set the color picker mode as picker.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorPickerMode.Palette">
            <summary>
            To set the color picker mode as palette.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorValueType">
            <summary>
            Color value types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hex">
            <summary>
            Specifies the hex code value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hexa">
            <summary>
            Specifies the hex code value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Rgb">
            <summary>
            Specifies the red green blue value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Rgba">
            <summary>
            Specifies the red green blue value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hsv">
            <summary>
            Specifies the hue saturation value without opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Hsva">
            <summary>
            Specifies the hue saturation value with opacity.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.ColorValueType.Opacity">
            <summary>
            Specifies the opacity value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs">
            <summary>
            Interface for before open / close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Cancel">
            <summary>
            Used to prevent color picker popup open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Element">
            <summary>
            Specifies the color picker popup element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Event">
            <summary>
            Specifies the Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs">
            <summary>
            Interface for change / select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.CurrentValue">
            <summary>
            Specifies the current color value details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerEventArgs.PreviousValue">
            <summary>
            Specifies the previous color value details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorPickerValue">
            <summary>
            Interface for Color picker values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerValue.Hex">
            <summary>
            Specifies the color value as HEX format without opacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorPickerValue.Rgba">
            <summary>
            Specifies the color value as RGBA format.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs">
            <summary>
            Interface for mode switching event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Element">
            <summary>
            Specifies the mode switcher element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Mode">
            <summary>
            Specifies the color picker mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.OpenEventArgs">
            <summary>
            Interface for open event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OpenEventArgs.Element">
            <summary>
            Specifies the color picker popup element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.OpenEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs">
            <summary>
            Interface for before change event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.Element">
            <summary>
            Specifies the palette tile element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.PresetName">
            <summary>
            Specifies key name of the custom preset colors.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PaletteTileEventArgs.Value">
            <summary>
            Specifies the color value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Offset">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FormEventArgs">
            <summary>
            SPecifies the form event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Element">
            <summary>
            Returns the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.ErrorElement">
            <summary>
            Returns the error element for corresponding input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.InputName">
            <summary>
            Returns the name of the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Message">
            <summary>
            Returns the error message.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FormEventArgs.Status">
            <summary>
            Returns the status input element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BlurEventArgs">
            <summary>
            Defines the argument for the blur event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BlurEventArgs.Model">
            <summary>
            returns the model class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusEventArgs">
            <summary>
            Defines the argument for the focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusEventArgs.Model">
            <summary>
            returns the model class.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.IInput">
            <summary>
            Default required properties for input components.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Change">
            <summary>
             Sets the change event mapping function to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.CssClass">
            <summary>
             Sets the css class value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.EnableRtl">
            <summary>
             Sets the enable rtl value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Enabled">
            <summary>
             Sets the enabled value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.FloatLabelType">
            <summary>
            Specifies how the floating label works.
            Possible values are:
             Never - Never float the label in the input when the placeholder is available.
             Always - The floating label will always float above the input.
             Auto - The floating label will float above the input after focusing or entering a value in the input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Placeholder">
            <summary>
             Sets the placeholder value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.Readonly">
            <summary>
             Sets the readonly value to input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.IInput.ShowClearButton">
            <summary>
             Specifies whether to display the Clear button in the input.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ActionCompleteEventArgs">
            <summary>
            Defines the argument for the ActionComplete event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ActionCompleteEventArgs.FileData">
            <summary>
            Return the selected file details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs">
            <summary>
            Defines the argument for the BeforeRemove event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.CurrentRequest">
            <summary>
            Returns the XMLHttpRequest instance that is associated with remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.FilesData">
            <summary>
            Returns the list of files details that will be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.CustomFormData">
            <summary>
            Defines the additional data with key and value pair format that will be submitted to the remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs.PostRawFile">
            <summary>
            Defines whether the selected raw file send to server remove action.
            Set true to send raw file.
            Set false to send file name only.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs">
            <summary>
            Defines the argument for the BeforeUpload event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CurrentRequest">
            <summary>
            Returns the XMLHttpRequest instance that is associated with upload action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.FilesData">
            <summary>
            Returns the list of uploading files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CustomFormData">
            <summary>
            Defines the additional data in key and value pair format that will be submitted to the upload action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.CancelEventArgs">
            <summary>
            Defines the argument for the Cancel event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.CancelEventArgs.FileData">
            <summary>
            Returns the file details that will be canceled.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ClearingEventArgs">
            <summary>
            Defines the argument for the Clearing event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ClearingEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ClearingEventArgs.FilesData">
            <summary>
            Returns the list of files that will be cleared from the FileList.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FailureEventArgs">
            <summary>
            Defines the argument for the Failure event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.ChunkIndex">
            <summary>
            Returns the upload chunk index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.ChunkSize">
            <summary>
            Returns the upload chunk size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.E">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.File">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.RetryFiles">
            <summary>
             Defines the files for retry the upload files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.Operation">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.Response">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.StatusText">
            <summary>
            Returns the upload status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FailureEventArgs.TotalChunk">
            <summary>
            Returns the total chunk size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FileInfo">
            <summary>
            Defines the argument for the FileInfo.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.FileSource">
            <summary>
            Returns where the file selected from, to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Id">
            <summary>
            Returns the unique upload file name ID.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Input">
            <summary>
            Returns the input element mapped with file list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.List">
            <summary>
            Returns the respective file list item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Name">
            <summary>
            Returns the upload file name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.RawFile">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Size">
            <summary>
            Returns the size of file in bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Status">
            <summary>
            Returns the status of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.StatusCode">
            <summary>
            Returns the current state of the file such as Failed, Canceled, Selected, Uploaded, or Uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.Type">
            <summary>
            Returns the MIME type of file as a string. Returns empty string if the file’s type is not determined.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileInfo.ValidationMessages">
            <summary>
            Returns the list of validation errors (if any).
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs">
            <summary>
            Defines the argument for the FileListRender event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.Element">
            <summary>
            Return the current file item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.FileInfo">
            <summary>
            Return the current rendering file item data as File object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.Index">
            <summary>
            Return the index of the file item in the file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FileListRenderingEventArgs.IsPreload">
            <summary>
            Return whether the file is preloaded.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PauseResumeEventArgs">
            <summary>
            Defines the argument for the PauseResume event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkCount">
            <summary>
            Returns the total number of chunks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkIndex">
            <summary>
            Returns the index of chunk that is Paused or Resumed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.ChunkSize">
            <summary>
            Returns the chunk size value in bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.PauseResumeEventArgs.File">
            <summary>
            Returns the file data that is Paused or Resumed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ProgressEventArgs">
            <summary>
            Defines the argument for the Progress event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.E">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.LengthComputable">
            <summary>
            Returns the file progress is computable or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Loaded">
            <summary>
            Returns the progressed the uploading file size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Total">
            <summary>
            Returns the total size of the uploading file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.File">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Stream">
            <summary>
            Return the file stream of loaded file content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ProgressEventArgs.Operation">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.RemovingEventArgs">
            <summary>
            Defines the argument for the Removing event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.CurrentRequest">
            <summary>
            Returns the XMLHttpRequest instance that is associated with remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.CustomFormData">
            <summary>
            Defines the additional data with key and value pair format that will be submitted to the remove action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.FilesData">
            <summary>
            Returns the list of files’ details that will be removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RemovingEventArgs.PostRawFile">
            <summary>
            Defines whether the selected raw file send to server remove action.
            Set true to send raw file.
            Set false to send file name only.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.RenderingEventArgs">
            <summary>
            Defines the argument for the Rendering event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.Element">
            <summary>
            Return the current file item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.FileInfo">
            <summary>
            Return the current rendering file item data as File object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.Index">
            <summary>
            Return the index of the file item in the file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.RenderingEventArgs.IsPreload">
            <summary>
            Return whether the file is preloaded.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ResponseEventArgs">
            <summary>
            Defines the argument for the Response event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.Headers">
            <summary>
            Returns the current response header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.ReadyState">
            <summary>
            Returns the current response readyState.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.StatusCode">
            <summary>
            Returns the current response statusCode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.StatusText">
            <summary>
            Returns the current response statusText.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ResponseEventArgs.WithCredentials">
            <summary>
            Returns the current response withCredentials.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SelectedEventArgs">
            <summary>
            Defines the argument for the Selected event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.CurrentRequest">
            <summary>
            Set the current request header to the XMLHttpRequest instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.CustomFormData">
            <summary>
            Defines the additional data in key and value pair format that will be submitted to the upload action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.FilesData">
            <summary>
            Returns the list of selected files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.IsCanceled">
            <summary>
            Specifies whether the file selection has been canceled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.IsModified">
            <summary>
            Determines whether the file list generates based on the modified data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.ModifiedFilesData">
            <summary>
            Specifies the modified files data to generate the file items. The argument depends on `isModified` argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.ProgressInterval">
            <summary>
            Specifies the step value to the progress bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SelectedEventArgs.Type">
            <summary>
            Returns the original event argument type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SuccessEventArgs">
            <summary>
            Defines the argument for the Success event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.ChunkIndex">
            <summary>
            Returns the upload chunk index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.ChunkSize">
            <summary>
            Returns the upload chunk size.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.E">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.File">
            <summary>
            Returns the details about upload file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Operation">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.Response">
            <summary>
            Returns the upload event operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.StatusText">
            <summary>
            Returns the upload status.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SuccessEventArgs.TotalChunk">
            <summary>
            Returns the total chunk size.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadFiles">
            <summary>
            Defines the argument for the UploadFiles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadFiles.Stream">
            <summary>
            Return the selected file stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadFiles.FileInfo">
            <summary>
            Return the selected file details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadChangeEventArgs">
            <summary>
            Defines the argument for the UploadChangeEventArgs event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadChangeEventArgs.Files">
            <summary>
            Returns the list of files that will be cleared from the FileList.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploadingEventArgs">
            <summary>
            Defines the argument for the UploadingEventArgs event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.ChunkSize">
            <summary>
            Returns the chunk size in bytes if the chunk upload is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CurrentChunkIndex">
            <summary>
            Returns the index of current chunk if the chunk upload is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploadingEventArgs.FileData">
            <summary>
            Returns the list of files that will be uploaded.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ValidationMessages">
            <summary>
            Defines the argument for the ValidationMessages.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ValidationMessages.MaxSize">
            <summary>
            Returns the maximum file size validation message, if selected file size is less than specified maxFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ValidationMessages.MinSize">
            <summary>
            Returns the minimum file size validation message, if selected file size is less than specified minFileSize property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.AsyncSettingsModel">
            <summary>
            Interface for a class AsyncSettings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.ChunkSize">
            <summary>
            Specifies the chunk size to split the large file into chunks, and upload it to the server in a sequential order.
            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.</para>
            <para>It must be specified in bytes value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RemoveUrl">
            <summary>
            Specifies the URL of remove action that receives the file information and handle the remove operation in server.
            <para>The remove action type must be POST request and define "RemoveFileNames" attribute to get file information that will be removed.</para>
            <para>This property is optional.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RetryAfterDelay">
            <summary>
            Specifies the delay time in milliseconds that the automatic retry happens after the delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.RetryCount">
            <summary>
            Specifies the number of retries that the Uploader can perform on the file failed to upload.
            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.AsyncSettingsModel.SaveUrl">
            <summary>
            Specifies the URL of save action that will receive the upload files and save in the server.
            <para>The save action type must be POST request and define the argument as same input name used to render the component.</para>
            <para>The upload operations could not perform without this property.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ButtonsPropsModel">
            <summary>
            Interface for a class ButtonsProps.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Browse">
            <summary>
            Specifies the text or html content to browse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Clear">
            <summary>
            Specifies the text or html content to clear button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ButtonsPropsModel.Upload">
            <summary>
            Specifies the text or html content to upload button.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FilesPropModel">
            <summary>
            Interface for a class FilesProp.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Name">
            <summary>
            Specifies the name of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Size">
            <summary>
            Specifies the size of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FilesPropModel.Type">
            <summary>
            Specifies the type of the file.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderModel">
            <summary>
            Interface for a class Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ActionComplete">
            <summary>
            Triggers after all the selected files has processed to upload successfully or failed to server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.BeforeRemove">
            <summary>
            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.BeforeUpload">
            <summary>
            Triggers when the upload process before. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Canceling">
            <summary>
            Fires if cancel the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Change">
            <summary>
            Triggers when changes occur in uploaded file list by selecting or dropping files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkFailure">
            <summary>
            Fires if the chunk file failed to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkSuccess">
            <summary>
            Fires when the chunk file uploaded successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ChunkUploading">
            <summary>
            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Clearing">
            <summary>
            Triggers before clearing the items in file list when clicking "clear".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Created">
            <summary>
            Triggers when the Uploader is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Failure">
            <summary>
            Triggers when the AJAX request fails on uploading or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.FileListRendering">
            <summary>
            Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Pausing">
            <summary>
            Fires if pause the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Progress">
            <summary>
            Triggers when uploading a file to the server using the AJAX request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Removing">
            <summary>
            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Rendering">
            <summary>
            DEPRECATED-Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Resuming">
            <summary>
            Fires if resume the paused chunk file upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Selected">
            <summary>
            Triggers after selecting or dropping the files by adding the files in upload queue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Success">
            <summary>
            Triggers when the AJAX request gets success on uploading files or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Uploading">
            <summary>
            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AllowedExtensions">
            <summary>
            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions
            with comma separators.
            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as ".jpg,.png".</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AsyncSettings">
            <summary>
            Configures the save and remove URL to perform the upload operations in the server asynchronously.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.AutoUpload">
            <summary>
            By default, the Uploader component initiates automatic upload when the files are added in upload queue.
            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>
            <para>The buttons "upload" and "clear" will be hided from file list when AutoUpload property is true.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Buttons">
            <summary>
            You can customize the default text of "browse, clear, and upload" buttons with plain text or HTML elements.
            The buttons' text can be customized from localization also.
            <para>If you configured both `Locale` and `Buttons` property,the Uploader component considers the `Buttons` property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with root element of the Uploader.
            One or more custom CSS classes can be added to a Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DirectoryUpload">
            <summary>
            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DropArea">
            <summary>
            Specifies the drop target to handle the drag-and-drop upload.
            By default, the Uploader creates wrapper around file input that will act as drop target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.DropEffect">
            <summary>
            Specifies the drag operation effect to the Uploader component.
            <para> Possible values are.</para>
            <list type="bullet">
            <item>
            <term>Copy</term>
            </item>
            <item>
            <term>Move</term>
            </item>
            <item>
            <term>Link</term>
            </item>
            <item>
            <term>None</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.EnablePersistence">
            <summary>
            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.EnableRtl">
            <summary>
            Enable or disable rendering Uploader in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Files">
            <summary>
            Specifies the list of files that will be preloaded on rendering of Uploader component.
            The property used to view and remove the uploaded files from server.
            <para> By default, the files are configured with uploaded successfully state. The following properties are mandatory to configure the preload files:</para>
            <list type="bullet">
            <item>
            <term>Name</term>
            </item>
            <item>
            <term>Size</term>
            </item>
            <item>
            <term>Type</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the Uploader considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Locale">
            <summary>
            Specifies the global culture and localization of the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.MaxFileSize">
            <summary>
            Specifies the maximum allowed file size to be uploaded in bytes.
            The property used to make sure that you cannot upload too large files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.MinFileSize">
            <summary>
            Specifies the minimum file size to be uploaded in bytes.
            The property used to make sure that you cannot upload empty files and small files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Multiple">
            <summary>
            Specifies a boolean value that indicates whether the multiple files can be browsed or
            dropped simultaneously in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.SequentialUpload">
            <summary>
            By default, the file Uploader component is processing the multiple files simultaneously.
            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.ShowFileList">
            <summary>
            Specifies a boolean value that indicates whether the default file list can be rendered.
            The property used to prevent default file list and design own template for file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderModel.Template">
            <summary>
            Specifies the HTML string that used to customize the content of each file in the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskBlurEventArgs">
            <summary>
            Interface for focus out event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Container">
            <summary>
            Returns the MaskedTextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.MaskedValue">
            <summary>
            Returns the value of the MaskedTextBox with the masked format.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskBlurEventArgs.Value">
            <summary>
            Returns the value of MaskedTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskChangeEventArgs">
            <summary>
            Interface for changed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskChangeEventArgs.IsInteracted">
            <summary>
            Returns true when the value of MaskedTextBox is changed by user interaction. Otherwise, it returns false.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskFocusEventArgs">
            <summary>
            Interface for focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskFocusEventArgs.SelectionEnd">
            <summary>
            Returns selectionEnd value depends on mask length.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskFocusEventArgs.SelectionStart">
            <summary>
            Returns selectionStart value as zero by default.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.MaskClientProps">
            <summary>
            Specifies the client properties of MaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Readonly">
            <summary>
            Specifies the read only property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Enabled">
            <summary>
            Specifies wheter the component in disabled state or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Locale">
            <summary>
            Specifies the locale property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.SelectionEnd">
            <summary>
            Specifies the selection range end property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.SelectionStart">
            <summary>
            Specifies the selection start property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Value">
            <summary>
            Specifies the value property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.Mask">
            <summary>
            Specifies the mask property of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.keyValue">
            <summary>
            Specifies the key value  provided.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.IsMultipleDelete">
            <summary>
            Specifies whether the single charcater or multiple characters get deleted.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PasteValue">
            <summary>
            Specifies the clipboard value.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PromptCharacter">
            <summary>
            Specifies the prompt character of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PlaceHolder">
            <summary>
            Specifies the placeholder of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.MaskedValue">
            <summary>
            SPecifies the value with mask literals.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.FloatLabelType">
            <summary>
            Specifies the floatlabel type of the component.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.CustomRegExpCollec">
            <summary>
            Specifies the custom regex.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.HiddenMask">
            <summary>
            Specifies the mask literals with escape sequence and casing characters.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.MaskClientProps.PromptMask">
            <summary>
            Specifies the mask literals.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfMaskedTextBox">
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
            <summary>
            The MaskedTextBox is an input element that allows to get input from the user.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Blur">
            <summary>
            Triggers when the SfMaskedTextBox has focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueChange">
            <summary>
            Triggers when the content of SfMaskedTextBox has changed and gets focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Created">
            <summary>
            Triggers when the SfMaskedTextBox component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Destroyed">
            <summary>
            Triggers when the SfMaskedTextBox component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Focus">
            <summary>
            Triggers when the SfMaskedTextBox gets focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ID">
            <summary>
            Specifies the id of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.SfMaskedTextBoxEditContext">
            <summary>
            Specifies the edit context of MaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the SfMaskedTextBox. One or more custom CSS classes can be added to a SfMaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnablePersistence">
            <summary>
            Enable or disable the persisting SfMaskedTextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the SfMaskedTextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the SfMaskedTextBox that the placeholder text floats above the SfMaskedTextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the SfMaskedTextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the SfMaskedTextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the SfMaskedTextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Locale">
            <summary>
            Specifies the global culture and localization of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in SfMaskedTextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Readonly">
            <summary>
            Specifies the boolean value whether the SfMaskedTextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in SfMaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value">
            <summary>
            Sets the content of the SfMaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Width">
            <summary>
            Specifies the width of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.TabIndex">
            <summary>
            Specifies the tab order of the SfMaskedTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Mask">
            <summary>
            Sets a value that masks the MaskedTextBox to allow/validate the user input.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.PromptChar">
            <summary>
            Gets or sets a value that will be shown as a prompting symbol for the masked value.
            The symbol used to show input positions in the MaskedTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CustomCharacters">
            <summary>
            Sets the collection of values to be mapped for non-mask elements(literals)
            which have been set in the mask of MaskedTextBox.
             <para>In the below example, non-mask elements "P" accepts values
            "P" , "A" , "p" , "a" and "M" accepts values "M", "m" mentioned in the custom characters collection.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.MaskedTextBoxParent">
            <summary>
            Parent component of Numeric TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetMaskedValue">
            <summary>
            Returns the value of MaskedTextBox with respective mask.
            </summary>
            <returns>The value with mask literals.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusIn">
            <summary>
            Sets the focus to SfMaskedTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusAsync">
            <summary>
            Sets the focus to SfMaskedTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusOut">
            <summary>
            Remove the focus from SfMaskedTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FocusOutAsync">
            <summary>
            Remove the focus from SfMaskedTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetPersistData">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdatePasteValue(Syncfusion.Blazor.Inputs.MaskClientProps)">
            <summary>
            Gets the clipboard values and its related properties from client.
            </summary>
            <param name="args">Specifies the mask client properties.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Specifies the root class of the component.</param>
            <param name="containerClass">Specifies the container class o the component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.UpdateInputValue(System.String,System.Boolean)">
            <summary>
            Update the respective value property without mask literals.
            </summary>
            <param name="inputval">Specifies the value with mask literals.</param>
            <param name="isPaste">true if the user performs paste action , otherwise false.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangeEventArgs`1">
            <summary>
            Interface for change event.
            </summary>
            <typeparam name="T">Specifies the type of ChangeEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Event">
            <summary>
            Returns the event parameters from NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.IsInteracted">
            <summary>
            Returns true when the value of NumericTextBox is changed by user interaction. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.PreviousValue">
            <summary>
            Returns the previously entered value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventArgs`1.Value">
            <summary>
            Returns the entered value of the NumericTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1">
            <summary>
            Interface for Blur event.
            </summary>
            <typeparam name="T">Specifies the type of NumericBlurEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Container">
            <summary>
            Returns the NumericTextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericBlurEventArgs`1.Value">
            <summary>
            Returns the value of the NumericTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1">
            <summary>
            Interface for Focus event.
            </summary>
            <typeparam name="T">Specifies the type of NumericFocusEventArgs.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Container">
            <summary>
            Returns the NumericTextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Event">
            <summary>
            Returns the original event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericFocusEventArgs`1.Value">
            <summary>
            Returns the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Readonly">
            <summary>
            Specifies the component is in read-only mode or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Enabled">
            <summary>
            Specifies the component is in disabled state or not.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Locale">
            <summary>
            Specifies the locale property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.ValidateDecimalOnType">
            <summary>
            Specifies the ValidateDecimalOnType property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.Decimals">
            <summary>
            Specifies the Decimals property.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericClientProps.DecimalSeparator">
            <summary>
            Specifies the DecimalSeparator property.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1">
            <summary>
            Interface for a class NumericTextBox.
            </summary>
            <typeparam name="T">Specifies the type of NumericTextBoxModel.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the NumericTextBox. One or more custom CSS classes can be added to a NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Currency">
            <summary>
            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Decimals">
            <summary>
            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.EnablePersistence">
            <summary>
            Enable or disable persisting NumericTextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the NumericTextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the NumericTextBox that the placeholder text floats above the NumericTextBox based on the below values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the NumericTextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the NumericTextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the NumericTextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Format">
            <summary>
            Specifies the number format that indicates the display format for the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.InputAttributes">
            <summary>
            <para>You can add the additional input attributes such as disabled, value, and more to the root element.</para>
            <para>If you configured both property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Locale">
            <summary>
            Specifies the global culture and localization of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Readonly">
            <summary>
            Specifies the boolean value whether the NumericTextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ShowSpinButton">
            <summary>
            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Step">
            <summary>
            Specifies the incremental or decremental step size for the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.StrictMode">
            <summary>
            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.
            <para>True- the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>
            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.ValidateDecimalOnType">
            <summary>
            Specifies whether the length of the decimal should be restricted during typing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Value">
            <summary>
            Sets the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Width">
            <summary>
            Specifies the width of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.TabIndex">
            <summary>
            Specifies the tab order of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Max">
            <summary>
            Specifies a maximum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxModel`1.Min">
            <summary>
            Specifies a minimum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1">
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <typeparam name="TValue">Specifies the type of SfNumericTextBox.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ID">
            <summary>
            Specifies the id of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.NumericEditContext">
            <summary>
            Specifies the edit context of numeric textbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the NumericTextBox. One or more custom CSS classes can be added to a NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Currency">
            <summary>
            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Decimals">
            <summary>
            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.EnablePersistence">
            <summary>
            Enable or disable persisting NumericTextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the NumericTextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the NumericTextBox that the placeholder text floats above the NumericTextBox based on the below values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the NumericTextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the NumericTextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the NumericTextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Format">
            <summary>
            Specifies the number format that indicates the display format for the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InputAttributes">
            <summary>
            <para>You can add the additional input attributes such as disabled, value, and more to the root element.</para>
            <para>If you configured both property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Readonly">
            <summary>
            Specifies the boolean value whether the NumericTextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ShowSpinButton">
            <summary>
            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Step">
            <summary>
            Specifies the incremental or decremental step size for the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.StrictMode">
            <summary>
            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.
            <para>True - the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>
            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ValidateDecimalOnType">
            <summary>
            Specifies whether the length of the decimal should be restricted during typing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Value">
            <summary>
            Sets the value of the NumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Width">
            <summary>
            Specifies the width of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.TabIndex">
            <summary>
            Specifies the tab order of the NumericTextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Max">
            <summary>
            Specifies a maximum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Min">
            <summary>
            Specifies a minimum value that is allowed a user can enter.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.NumericTextBoxParent">
            <summary>
            Parent component of DataManager.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Decrement(`0)">
            <summary>
            Decrements the NumericTextBox value with specified step value.
            </summary>
            <param name="step">Specifies the value used to decrement the NumericTextBox value. If its not given then numeric value will be decremented based on the step property value.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.DecrementAsync(`0)">
            <summary>
            Decrements the NumericTextBox value with specified step value.
            </summary>
            <param name="step">Specifies the value used to decrement the NumericTextBox value. If its not given then numeric value will be decremented based on the step property value.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusIn">
            <summary>
            Sets the focus to the NumericTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusAsync">
            <summary>
            Sets the focus to the NumericTextBox component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusOut">
            <summary>
            Remove the focus from the NumericTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FocusOutAsync">
            <summary>
            Remove the focus from the NumericTextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetPersistData">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetText">
            <summary>
            Returns the value of NumericTextBox with the format applied to the NumericTextBox.
            </summary>
            <returns>The input element value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.GetFormattedText">
            <summary>
            Returns the value of NumericTextBox with the format applied to the NumericTextBox.
            </summary>
            <returns>The input element value.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Increment(`0)">
            <summary>
            Increments the NumericTextBox value with the specified step value.
            <param name="step">Specifies the value used to increment the NumericTextBox value.if its not given then numeric value will be incremented based on the step property value.</param>
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.IncrementAsync(`0)">
            <summary>
            Increments the NumericTextBox value with the specified step value.
            <param name="step">Specifies the value used to increment the NumericTextBox value.if its not given then numeric value will be incremented based on the step property value.</param>
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.InvokePasteHandler(System.String)">
            <summary>
            Invoke the event, while paste the value to input element.
            </summary>
            <param name="beforeValue">Specifies the previous element value.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ServerAction(System.String,System.EventArgs)">
            <summary>
            Invokable the increment/decrement actions.
            </summary>
            <param name="action">Specifies the action.</param>
            <param name="args"><see cref="T:System.EventArgs"/> arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.ServerupdateValue(`0,System.EventArgs)">
            <summary>
            Invokable the component value.
            </summary>
            <returns>Task.</returns>
            <param name="value">Specifies the value.</param>
            <param name="args"><see cref="T:System.EventArgs"/> arguments.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Specifies the root class of the component.</param>
            <param name="containerClass">Specifies the container class of the component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.UpdateParentValue(System.String)">
            <summary>
            Update the parent component value.
            </summary>
            <param name="value">Specifies the value.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1">
            <summary>
            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.
            </summary>
            <typeparam name="TValue">Specifies the type of SfNumericTextBox.</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.BaseParent">
            <summary>
            Specifies the base parent of SfNumericTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Blur">
            <summary>
            Triggers when the NumericTextBox got focus out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.ValueChange">
            <summary>
            Triggers when the value of the NumericTextBox changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Created">
            <summary>
            Triggers when the NumericTextBox component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Destroyed">
            <summary>
            Triggers when the NumericTextBox component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.Focus">
            <summary>
            Triggers when the NumericTextBox got focus in.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.NumericTextBoxEvents`1.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorRange">
            <summary>
            This class represent the color, start and end position of slider track.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.ChildContent">
            <summary>
            Get and set the Slider.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.Color">
            <summary>
            Get and set the Color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.Start">
            <summary>
            Get and set the start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRange.End">
            <summary>
            Get and set the End.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.ColorRange.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task" representing the asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderColorRanges">
            <summary>
            Specifies the collections of colors to the slider track based on start and end value of each color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent">
            <summary>
            Get and set the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderColorRanges.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderOrientation">
            <summary>
             Holds slider component's different orientation options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderOrientation.Horizontal">
            <summary>
            Specifies the slider rendering position as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderOrientation.Vertical">
            <summary>
            Specifies the slider rendering position as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderType">
            <summary>
            Holds slider component's different options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.Default">
            <summary>
            Specifies the slider type as Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.MinRange">
            <summary>
            Specifies the slider type as MinRange.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.SliderType.Range">
            <summary>
            Specifies the slider type as Range.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Placement">
            <summary>
            Holds slider component's Ticks Placement options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.None">
            <summary>
            This enum value will restrict the ticks element rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.Before">
            <summary>
            This is used to rendering tiks element before the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.After">
            <summary>
            This is used to rendering tiks element after the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.Placement.Both">
            <summary>
            This is used to rendering tiks element before and after the slider track.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TooltipPlacement">
            <summary>
            Holds slider component's Tooltip Placement options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipPlacement.Before">
            <summary>
            This is used to render the tooltip element before the slider track.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipPlacement.After">
            <summary>
            This is used to render the tooltip element after the slider track.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TooltipShowOn">
            <summary>
            Holds slider component's Tooltip ShowOn options.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Auto">
            <summary>
            This is used to display the tooltip while click / focus the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Focus">
            <summary>
            This is used to display the tooltip while focus the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Hover">
            <summary>
            This is used to display the tooltip while hover the slider handle elemenet.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Inputs.TooltipShowOn.Always">
            <summary>
            This is used to display the tooltip until new actions occurred in slider elemenet.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider">
            <summary>
            Interface for holding slider properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Slider">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ColorRange">
            <summary>
            Get and set the ColorRange.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.CssClass">
            <summary>
            Get and set the CssClass.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.CustomValues">
            <summary>
            Get and set the CustomValues.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableAnimation">
            <summary>
            Get and set the EnableAnimation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableHtmlSanitizer">
            <summary>
            Get and set the EnableHtmlSanitizer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnablePersistence">
            <summary>
            Get and set the EnablePersistence.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.EnableRtl">
            <summary>
            Get and set the EnableRtl.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Enabled">
            <summary>
            Get and set the Enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Limits">
            <summary>
            Get and set the Limits.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Locale">
            <summary>
            Get and set the Locale.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Max">
            <summary>
            Get and set the Max Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Min">
            <summary>
            Get and set the Min Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Orientation">
            <summary>
            Get and set the Orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ReadOnly">
            <summary>
            Get and set the ReadOnly.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ShowButtons">
            <summary>
            Get and set the ShowButtons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Step">
            <summary>
            Get and set the Step.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Ticks">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Tooltip">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Type">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.Width">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.ID">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Updates the Child Properties.
            </summary>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.GetLimitData">
            <summary>
            Get the Limit Data.
            </summary>
            <returns>Limit.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.TriggeredTicksRendered(Microsoft.AspNetCore.Components.ElementReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers after the ticks rendered.
            </summary>
            <param name="ticksWrapperRef">ticksWrapperRef.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.ISlider.TriggeredTicksRendering(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers while the ticks rendered.
            </summary>
            <param name="ticksRef">ticksRef.</param>
            <param name="text">text.</param>
            <param name="value">value.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent">
            <exclude/>
            <summary>
            Public fiels ChildContent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.TicksClass">
            <summary>
            Class for the Tick.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement">
            <summary>
            Specifies the Partial class TickElement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.ClassName">
            <summary>
            Specifies the ClassName.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.Styles">
            <summary>
            Specifies the Styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.Value">
            <summary>
            Specifies the Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.FormattedValue">
            <summary>
            Specifies the FormattedValue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.IsSmallTick">
            <summary>
            Specifies the IsSmallTick.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.Slider.Internal.TickElement.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>""Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfSlider`1">
            <summary>
            Partial class SfSlider.
            </summary>
            <typeparam name="TValue">Generic type parameter.</typeparam>.
            <summary>
            Partial class SfSlider.
            </summary>
            <summary>
            Specifies the partial class SfSlider.
            </summary>
            <summary>
            Specifies the partial class SfSlider.
            </summary>
            <summary>
            The Slider component allows the user to select a value or range of values
            in-between the min and max range, by dragging the handle over the slider bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ID">
            <summary>
            Sets id attribute for the slider element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.SliderEditContext">
            <summary>
            Specifies the ChildContent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ColorRange">
            <summary>
            Specifies the color to the slider based on given value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.CssClass">
            <summary>
            Specifies the custom classes to be added to the element used to customize the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.CustomValues">
            <summary>
            Specifies an array of slider values in number or string type.
            The min and max step values are not considered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableAnimation">
            <summary>
            Enables/Disables the animation for slider movement.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Enabled">
            <summary>
            Enables or disables the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Limits">
            <summary>
            Specified the limit within which the slider to be moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Max">
            <summary>
            Specifies the maximum value of the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Min">
            <summary>
            Specifies the minimum value of the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Orientation">
            <summary>
             Specifies whether to render the slider in vertical or horizontal orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ReadOnly">
            <summary>
            Specifies whether the render the slider in read-only mode to restrict any user interaction.
            The slider rendered with user defined values and can’t be interacted with user actions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ShowButtons">
            <summary>
            Specifies whether to show or hide the increase/decrease buttons
            of Slider to change the slider value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Step">
            <summary>
            Specifies the step value for each value change when the increase / decrease
             button is clicked or on arrow keys press or on dragging the thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Ticks">
            <summary>
            It is used to render the slider ticks options such as placement and step values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Tooltip">
            <summary>
            Specifies the visibility, position of the tooltip over the slider element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Type">
            <summary>
            Defines the type of the Slider. The available options are:
              Default - Allows to a single value in the Slider.
              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.
              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Value">
            <summary>
            It is used to denote the current value of the Slider.
            The value should be specified in array of number when render Slider type as range.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.ValueChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Width">
            <summary>
            Specifies the width of the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.IsImmediateValue">
            <summary>
            Specifies whether the value need to be updated at the time of dragging slider handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.HtmlAttributes">
            <summary>
            Used to specify an additional html attributes such as styles, class, and more to the root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.Reposition">
            <summary>
            This method is used to reposition slider.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.RepositionAsync">
            <summary>
            This method is used to reposition slider.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfSlider`1.Slider">
            <summary>
            Get and set the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetTickPosition(Syncfusion.Blazor.Inputs.TicksValues)">
            <summary>
            Method which sets the tick's position.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetLocale">
            <summary>
            Set Locale value for button.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetProperties">
            <summary>
            Get Public property information.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update Child Property Information.
            </summary>
            <exclude/>
            <param name="key">key.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetSliderValue">
            <summary>
            Get Slider Value.
            </summary>
            <returns>sliderValue.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetLimitData">
            <summary>
            Get Slider Limits data.
            </summary>
            <exclude/>
            <returns>SliderLimits().</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.GetTicksData">
            <summary>
            Get Slider ticks data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.DynamicPropertyChange">
            <summary>
            Handling Dynamic Property changes.
            </summary>
            <exclude/>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.UpdateValue(`0,System.Int32)">
            <summary>
            Update Value Property.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <param name="activeHandle">activeHandle.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggerEvent(Syncfusion.Blazor.Inputs.ChangeEventData{`0})">
            <summary>
            Trigger onChange / Value change event.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TooltipHandle(Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Slider Handle Value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.OnOpen(Syncfusion.Blazor.Popups.TooltipEventArgs)">
            <summary>
            update tooltip position.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.IncreaseValue">
            <summary>
            Increase Slider Handle Value.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.DecreaseValue">
            <summary>
            Decrese Slider Value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggeredTicksRendered(Microsoft.AspNetCore.Components.ElementReference,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calling Ticks Rendered Event.
            </summary>
            <param name="ticksWrapperRef">args.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.TriggeredTicksRendering(Microsoft.AspNetCore.Components.ElementReference,System.String,System.Double,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Calling Ticks Rendering Event.
            </summary>
            <param name="ticksRef">ticksRef.</param>
            <param name="text">text.</param>
            <param name="value">sliderValue.</param>
            <param name="attributes">attributes.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.SerializeModel(Syncfusion.Blazor.Inputs.SfSlider{`0})">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfSlider`1.CloseTooltip">
            <summary>
            Closes the Tooltip Element.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1">
            <summary>
            It is used to denote the Slider Change/Changed Event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Action">
            <summary>
            It is used to get the action applied on the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Name">
            <summary>
            It is used to get the action applied on the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.IsInteracted">
            <summary>
            It is used to check whether the event triggered is via user or programmatic way.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.PreviousValue">
            <summary>
            It is used to get the previous value of the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Text">
            <summary>
            It is used to get the current text or formatted text of the Slider, which is placed in tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderChangeEventArgs`1.Value">
            <summary>
            It is used to get the current value of the Slider.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTickEventArgs">
            <summary>
            It is used to denote the TicksRender event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.Text">
            <summary>
            It is used to get the label text of the tick.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.TickElement">
            <summary>
            It is used to get the current tick element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.TickElementRef">
            <summary>
            It is used to get the current tick element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.Value">
            <summary>
            It is used to get the value of the tick.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickEventArgs.HtmlAttributes">
            <summary>
            It is used to customize tick elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs">
            <summary>
            It is used to denote the ticks rendered Event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TickElements">
            <summary>
            It returns the collection of tick elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TickElementsRef">
            <summary>
            It returns the collection of tick elements as a reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TicksWrapper">
            <summary>
            It returns the container of the ticks element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.TicksContainerRef">
            <summary>
            It returns the container of the ticks element as a reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs.HtmlAttributes">
            <summary>
            It is used to customize ticks parent element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1">
            <summary>
            It is used to denote the TooltipChange Event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1.Text">
            <summary>
            It is used to get the text shown in the Slider tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltipEventArgs`1.Value">
            <summary>
            It is used to get the value of the Slider.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ColorRangeDataModel">
            <summary>
            class for holding ColorRange properties arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.Color">
            <summary>
            It is used to set the color in the slider bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.End">
            <summary>
            It is used to get the end value for applying color.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ColorRangeDataModel.Start">
            <summary>
            It is used to get the starting value for applying color.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.PersistenceValues`1">
            <summary>
            Class that holds the persistence property details.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TicksValues">
            <summary>
            Class that holds the tick's position.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangeEventData`1">
            <summary>
            Class that holds the previous and currentValue of slider component.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.PreviousValue">
            <summary>
            Specifies the PreviousValue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.Value">
            <summary>
            Specifies the Value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangeEventData`1.IsValueChanged">
            <summary>
            Specifies the isValueChanged.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderEvents`1">
            <summary>
            Configure handlers to handle the events of the Slider component.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.OnChange">
            <summary>
            We can trigger change event whenever Slider value is changed.
             In other term, this event will be triggered while drag the slider thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.ValueChange">
            <summary>
            Fires whenever the Slider value is changed.
            In other term, this event will be triggered, while drag the slider thumb completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.Created">
            <summary>
            Triggers when the Slider is successfully created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.TicksRendered">
            <summary>
            Triggers when the ticks are rendered on the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.TicksRendering">
            <summary>
            Triggers on rendering the ticks element in the Slider,
            which is used to customize the ticks labels dynamically.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.OnTooltipChange">
            <summary>
            Triggers when the Sider tooltip value is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderEvents`1.Destroyed">
            <summary>
            Triggers when the component is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderLimitData">
            <summary>
            This class is used to set limit bar to slider component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderLimits">
            <summary>
            This class is used to set limit bar to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.Parent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.Enabled">
            <summary>
            It is used to enable the limit in the slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.EndHandleFixed">
            <summary>
            It is used to lock the second handle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MaxEnd">
            <summary>
            It is used to set the maximum end limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MaxStart">
            <summary>
            It is used to set the maximum start limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MinEnd">
            <summary>
            It is used to set the minimum end limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.MinStart">
            <summary>
            It is used to set the minimum start limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderLimits.StartHandleFixed">
            <summary>
            It is used to lock the first handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderLimits.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTicks">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.Format">
            <summary>
            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.LargeStep">
            <summary>
            It is used to denote the distance between two major (large) ticks from the scale of the Slider.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.Placement">
            <summary>
            It is used to denote the position of the ticks in the Slider. The available options are:.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.ShowSmallTicks">
            <summary>
            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTicks.SmallStep">
            <summary>
            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderTicks.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTicksData">
            <summary>
            This class is used to render ticks to slider component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltip">
            <summary>
            This class is used to set a tooltip for slider component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent">
            <summary>
            Specifies the ChildContent.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.CssClass">
            <summary>
            It is used to customize the Tooltip which accepts custom CSS class names that define
             specific user-defined styles and themes to be applied on the Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.Format">
            <summary>
            It is used to customize the Tooltip content to the desired format
             using internationalization or events (custom formatting).
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.IsVisible">
            <summary>
            It is used to show or hide the Tooltip of Slider Component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.Placement">
            <summary>
            It is used to denote the position for the tooltip element in the Slider. The available options are:
              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.
              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SliderTooltip.ShowOn">
            <summary>
            It is used to determine the device mode to show the Tooltip.
            If it is in desktop, it will show the Tooltip content when hovering on the target element.
            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SliderTooltip.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SliderTooltipData">
            <summary>
            This class is used to set a tooltip for slider component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.ChangedEventArgs">
            <summary>
            Interface for changed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.IsInteracted">
            <summary>
            Returns the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.IsInteraction">
            <summary>
            DEPRECATED-Returns the original event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.PreviousValue">
            <summary>
            Returns the previously entered value of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.ChangedEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusInEventArgs">
            <summary>
            Interface for focus event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusInEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.FocusOutEventArgs">
            <summary>
            Interface for focus out event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.FocusOutEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.InputEventArgs">
            <summary>
            Interface for input event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Container">
            <summary>
            Returns the TextBox container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Event">
            <summary>
            Returns the event parameters from TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.PreviousValue">
            <summary>
            Returns the previously updated value of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.InputEventArgs.Value">
            <summary>
            Returns the entered value of the TextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.TextBoxModel">
            <summary>
            Interface for a class TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Autocomplete">
            <summary>
            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.EnablePersistence">
            <summary>
            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            <para>If you configured both property and equivalent input attribute, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Locale">
            <summary>
            Specifies the global culture and localization of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            <para>The TextBox changes from a single line to multiline when enabling this multiline mode.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.TextBoxModel.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfTextBox">
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
            <summary>
            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Blur">
            <summary>
            Triggers when the TextBox has focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ValueChange">
            <summary>
            Triggers when the content of TextBox has changed and gets focus-out.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Created">
            <summary>
            Triggers when the TextBox component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Destroyed">
            <summary>
            Triggers when the TextBox component is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Focus">
            <summary>
            Triggers when the TextBox gets focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Input">
            <summary>
            Triggers each time when the value of TextBox has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.OnInput">
            <summary>
            Triggers each time when the value of input has changed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.OnBlur">
            <summary>
            Triggers when the input has focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.OnFocus">
            <summary>
            Triggers when the input gets focus.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ID">
            <summary>
            Specifies the id of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.TextBoxEditContext">
            <summary>
            Specifies the edit context of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ValueExpression">
            <summary>
            Specifies the expression for defining the value of the bound.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Autocomplete">
            <summary>
            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.
            <para>By default, autocomplete is enabled for TextBox.</para>
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>On</term>
            <description>Specifies that autocomplete is enabled</description>
            </item>
            <item>
            <term>Off</term>
            <description>Specifies that autocomplete is disabled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.EnablePersistence">
            <summary>
            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.FloatLabelType">
            <summary>
            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.
            <para>Possible values are:</para>
            <list type="bullet">
            <item>
            <term>Never</term>
            <description>Never floats the label in the TextBox when the placeholder is available.</description>
            </item>
            <item>
            <term>Always</term>
            <description>The floating label always floats above the TextBox.</description>
            </item>
            <item>
            <term>Auto</term>
            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as styles, class, and more to the root element.
            If you configured both property and equivalent html attributes, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Locale">
            <summary>
            Specifies the global culture and localization of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Multiline">
            <summary>
            Specifies a boolean value that enables or disables the multiline on the TextBox.
            The TextBox changes from a single line to multiline when enabling this multiline mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Placeholder">
            <summary>
            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in TextBox. The property is depending on the FloatLabelType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Readonly">
            <summary>
            Specifies the boolean value whether the TextBox allows user to change the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ShowClearButton">
            <summary>
            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Type">
            <summary>
            Specifies the behavior of the TextBox such as text, password, email, and more.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Value">
            <summary>
            Sets the content of the TextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.ValueChanged">
            <summary>
            Specifies the callback to trigger when the value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.Width">
            <summary>
            Specifies the width of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.TabIndex">
            <summary>
            Specifies the tab order of the TextBox component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfTextBox.TextBoxParent">
            <summary>
            Parent component of TextBox.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.AddIcon(System.String,System.String)">
            <summary>
            Adding the icons to the TextBox component.
            </summary>
            <param name="position">The adding icons to the component based on position for prepend/append.</param>
            <param name="icons">The icons class is added to icon element.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.AddIconAsync(System.String,System.String)">
            <summary>
            Adding the icons to the TextBox component.
            </summary>
            <param name="position">The adding icons to the component based on position for prepend/append.</param>
            <param name="icons">The icons class is added to icon element.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusIn">
            <summary>
            Sets the focus to TextBox component for interaction.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusAsync">
            <summary>
            Sets the focus to TextBox component for interaction.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusOut">
            <summary>
            Remove the focus from TextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.FocusOutAsync">
            <summary>
            Remove the focus from TextBox component, if the component is in focus state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.GetPersistData">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.GetPersistDataAsync">
            <summary>
            Gets the properties to be maintained in the persisted state.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the first time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfTextBox.UpdateParentClass(System.String,System.String)">
            <summary>
            Update the parent component class to the element.
            </summary>
            <param name="rootClass">Specifies the root class of the component.</param>
            <param name="containerClass">Specifies the container class of the component.</param>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.SfUploader">
            <summary>
            The uploader component is useful to upload images, documents, and other files to server.
            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.
            </summary>
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
            <summary>
            The uploader component is useful to upload images, documents, and other files to server.
            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ID">
            <summary>
            Specifies the id of the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AllowedExtensions">
            <summary>
            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions
            with comma separators.
            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as ".jpg,.png".</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AsyncSettings">
            <summary>
            Configures the save and remove URL to perform the upload operations in the server asynchronously.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AutoUpload">
            <summary>
            By default, the Uploader component initiates automatic upload when the files are added in upload queue.
            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>
            <para>The buttons "upload" and "clear" will be hided from file list when AutoUpload property is true.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Buttons">
            <summary>
            You can customize the default text of "browse, clear, and upload" buttons with plain text or HTML elements.
            The buttons' text can be customized from localization also.
            <para>If you configured both Locale and Buttons property,the Uploader component considers the Buttons property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with root element of the Uploader.
            One or more custom CSS classes can be added to a Uploader.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DirectoryUpload">
            <summary>
            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DropArea">
            <summary>
            Specifies the drop target to handle the drag-and-drop upload.
            By default, the Uploader creates wrapper around file input that will act as drop target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.DropEffect">
            <summary>
            Specifies the drag operation effect to the Uploader component.
            <para> Possible values are .</para>
            <list type="bullet">
            <item>
            <term>Copy</term>
            </item>
            <item>
            <term>Move</term>
            </item>
            <item>
            <term>Link</term>
            </item>
            <item>
            <term>None</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.EnablePersistence">
            <summary>
            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.EnableRtl">
            <summary>
            Enable or disable rendering Uploader in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Enabled">
            <summary>
            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Files">
            <summary>
            Specifies the list of files that will be preloaded on rendering of Uploader component.
            The property used to view and remove the uploaded files from server.
            <para> By default, the files are configured with uploaded successfully state. The following properties are mandatory to configure the preload files:</para>
            <list type="bullet">
            <item>
            <term>Name</term>
            </item>
            <item>
            <term>Size</term>
            </item>
            <item>
            <term>Type</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.HtmlAttributes">
            <summary>
            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>
            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.InputAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            If you configured both property and equivalent input attribute, then the component considers the property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Locale">
            <summary>
            Specifies the global culture and localization of the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.MaxFileSize">
            <summary>
            Specifies the maximum allowed file size to be uploaded in bytes.
            The property used to make sure that you cannot upload too large files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.MinFileSize">
            <summary>
            Specifies the minimum file size to be uploaded in bytes.
            The property used to make sure that you cannot upload empty files and small files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Multiple">
            <summary>
            Specifies a boolean value that indicates whether the multiple files can be browsed or
            dropped simultaneously in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.AllowMultiple">
            <summary>
            Specifies a boolean value that indicates whether the multiple files can be browsed or dropped simultaneously in the Uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.SequentialUpload">
            <summary>
            By default, the file Uploader component is processing the multiple files simultaneously.
            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.ShowFileList">
            <summary>
            Specifies a boolean value that indicates whether the default file list can be rendered.
            The property used to prevent default file list and design own template for file list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.TabIndex">
            <summary>
            Specifies the tab order of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.Template">
            <summary>
            Specifies the HTML string that used to customize the content of each file in the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.SfUploader.OnChange">
            <summary>
            Triggers when the content of input has changed and gets focus-out.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PropertyInitialized">
            <summary>
            Method provides initial values to the properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PropertyParametersSet">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BytesToSize(System.Double)">
            <summary>
            It is used to convert bytes value into kilobytes or megabytes depending on the size based
            on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
            </summary>
            <param name="bytes">Specifies the file size in bytes.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BytesToSizeAsync(System.Double)">
            <summary>
            It is used to convert bytes value into kilobytes or megabytes depending on the size based
            on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).
            </summary>
            <param name="bytes">Specifies the file size in bytes.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Cancel(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Stops the in-progress chunked upload based on the file data.
            When the file upload is canceled, the partially uploaded file is removed from server.
            </summary>
            <param name="fileData">specifies the files data to cancel the progressing file.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CancelAsync(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Stops the in-progress chunked upload based on the file data.
            When the file upload is canceled, the partially uploaded file is removed from server.
            </summary>
            <param name="fileData">specifies the files data to cancel the progressing file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAll">
            <summary>
            Clear all the file entries from list that can be uploaded files or added in upload queue.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAllAsync">
            <summary>
            Clear all the file entries from list that can be uploaded files or added in upload queue.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CreateFileList(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Create the file list for specified files data.
            </summary>
            <param name="fileData">Specifies the file data.</param>
            <param name="isSelectedFile">true if the file is selected.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFilesData(System.Nullable{System.Double})">
            <summary>
            Get the data of files which are shown in file list.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFilesDataAsync(System.Nullable{System.Double})">
            <summary>
            Get the data of files which are shown in file list.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Pause(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo},System.Nullable{System.Boolean})">
            <summary>
            Pauses the in-progress chunked upload based on the file data.
            </summary>
            <param name="fileData">specifies the files data to pause from uploading.</param>
            <param name="custom">Set true if used custom UI.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PauseAsync(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo},System.Nullable{System.Boolean})">
            <summary>
            Pauses the in-progress chunked upload based on the file data.
            </summary>
            <param name="fileData">specifies the files data to pause from uploading.</param>
            <param name="custom">Set true if used custom UI.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Remove(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object)">
            <summary>
            Remove the uploaded file from server manually by calling the remove URL action.
            <para>If you pass an empty argument to this method, the complete file list can be cleared,
            otherwise remove the specific file based on its argument ("file_data").</para>
            </summary>
            <param name="fileData">specifies the files data to remove from file list/server.</param>
            <param name="customTemplate">Set true if the component rendering with customize template.</param>
            <param name="removeDirectly">Set true if files remove without removing event.</param>
            <param name="postRawFile">Set false, to post file name only to the remove action.</param>
            <param name="args"></param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemoveAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Object)">
            <summary>
            Remove the uploaded file from server manually by calling the remove URL action.
            <para>If you pass an empty argument to this method, the complete file list can be cleared,
            otherwise remove the specific file based on its argument ("file_data").</para>
            </summary>
            <param name="fileData">specifies the files data to remove from file list/server.</param>
            <param name="customTemplate">Set true if the component rendering with customize template.</param>
            <param name="removeDirectly">Set true if files remove without removing event.</param>
            <param name="postRawFile">Set false, to post file name only to the remove action.</param>
            <param name="args"></param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Resume(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Resumes the chunked upload that is previously paused based on the file data.
            </summary>
            <param name="fileData">specifies the files data to resume the paused file.</param>
            <param name="custom"></param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ResumeAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Resumes the chunked upload that is previously paused based on the file data.
            </summary>
            <param name="fileData">specifies the files data to resume the paused file.</param>
            <param name="custom"></param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Retry(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retries the canceled or failed file upload based on the file data.
            <param name="fileData">specifies the files data to retry the canceled or failed file</param>
            <param name="fromcanceledStage">Set true to retry from canceled stage and set false to retry from initial stage.</param>
            <param name="custom"></param>
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RetryAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Retries the canceled or failed file upload based on the file data.
            <param name="fileData">specifies the files data to retry the canceled or failed file</param>
            <param name="fromcanceledStage">Set true to retry from canceled stage and set false to retry from initial stage.</param>
            <param name="custom"></param>
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SortFileList(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Allows you to sort the file data alphabetically based on its file name clearly.
            </summary>
            <param name="filesData">specifies the files data for upload.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SortFileListAsync(Syncfusion.Blazor.Inputs.FileInfo[])">
            <summary>
            Allows you to sort the file data alphabetically based on its file name clearly.
            </summary>
            <param name="filesData">specifies the files data for upload.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.Upload(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Allows you to call the upload process manually by calling save URL action.
            <para>To process the selected files (added in upload queue), pass an empty argument otherwise
            upload the specific file based on its argument.</para>
            </summary>
            <param name="files">specifies the files data for upload.</param>
            <param name="custom">specifies the custom files.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UploadAsync(Syncfusion.Blazor.Inputs.FileInfo[],System.Nullable{System.Boolean})">
            <summary>
            Allows you to call the upload process manually by calling save URL action.
            <para>To process the selected files (added in upload queue), pass an empty argument otherwise
            upload the specific file based on its argument.</para>
            </summary>
            <param name="files">specifies the files data for upload.</param>
            <param name="custom">specifies the custom files.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.GetFileDetails(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.FileInfo})">
            <summary>
            Task which retrieves the file data.
            </summary>
            <param name="file">Specifies the file.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CreateFileList(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.Internal.UploadFileDetails},System.Boolean)">
            <summary>
            Task which creates the file list.
            </summary>
            <param name="fileData">Specifies the file data.</param>
            <param name="isForm">true if the component inside form.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearAllFile">
            <summary>
            Task which clears the file list.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemoveFileData(System.Int32)">
            <summary>
            Method which removes the file data.
            </summary>
            <param name="index">Specifies the index.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UpdateServerFileData(System.Collections.Generic.List{Syncfusion.Blazor.Inputs.Internal.UploadFileDetails},System.Boolean)">
            <summary>
            Method which update the file data  in server.
            </summary>
            <param name="fileData">Specifies the filedata.</param>
            <param name="isForm">true if the component rendered inside the form component.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SelectedEvent(Syncfusion.Blazor.Inputs.SelectedEventArgs)">
            <summary>
            Task which specifies the selected event.
            </summary>
            <param name="args">Selected event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.RemovingEvent(Syncfusion.Blazor.Inputs.RemovingEventArgs)">
            <summary>
            Task which specifies the RemovingEvent.
            </summary>
            <param name="args">Specifies the removing event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ActionCompleteEvent(Syncfusion.Blazor.Inputs.ActionCompleteEventArgs)">
            <summary>
            Task which specifies the action complete event.
            </summary>
            <param name="args">Specifies the action complete event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.SuccessEvent(Syncfusion.Blazor.Inputs.SuccessEventArgs)">
            <summary>
            Task which specifies the success event .
            </summary>
            <param name="args">Specifies the success event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChangeEvent(Syncfusion.Blazor.Inputs.UploadChangeEventArgs)">
            <summary>
            Task which specifies the change event.
            </summary>
            <param name="args">Specifies the upload change event arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.FailureEvent(Syncfusion.Blazor.Inputs.FailureEventArgs)">
            <summary>
            Task which specifies the failure event.
            </summary>
            <param name="args">FailureEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkFailureEvent(Syncfusion.Blazor.Inputs.FailureEventArgs)">
            <summary>
            Task which specifies the chunk failure event.
            </summary>
            <param name="args">FailureEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.FileListRenderingEvent(Syncfusion.Blazor.Inputs.FileListRenderingEventArgs)">
            <summary>
            Task which specifies the file list rendering event.
            </summary>
            <param name="args">FileListRenderingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ProgressEvent(Syncfusion.Blazor.Inputs.ProgressEventArgs)">
            <summary>
            Task which specifies the progress event.
            </summary>
            <param name="args">ProgressEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.CancelingEvent(Syncfusion.Blazor.Inputs.CancelEventArgs)">
            <summary>
            Task which specifies the canceling event.
            </summary>
            <param name="args">CancelEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UploadingEvent(Syncfusion.Blazor.Inputs.UploadingEventArgs)">
            <summary>
            Task which specifies the uploading event.
            </summary>
            <param name="args">UploadingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkUploadingEvent(Syncfusion.Blazor.Inputs.UploadingEventArgs)">
            <summary>
            Task which specifies the chunk uploading event.
            </summary>
            <param name="args">UploadingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ChunkSuccessEvent(Syncfusion.Blazor.Inputs.SuccessEventArgs)">
            <summary>
            Task which specifies the chunk success event.
            </summary>
            <param name="args">SuccessEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.PausingEvent(Syncfusion.Blazor.Inputs.PauseResumeEventArgs)">
            <summary>
            Task which specifies the pausing event.
            </summary>
            <param name="args">PauseResumeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ResumingEvent(Syncfusion.Blazor.Inputs.PauseResumeEventArgs)">
            <summary>
            Task which specifies the resuming event.
            </summary>
            <param name="args">PauseResumeEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BeforeUploadEvent(Syncfusion.Blazor.Inputs.BeforeUploadEventArgs)">
            <summary>
            Task which specifies the before upload event.
            </summary>
            <param name="args">BeforeUploadEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.BeforeRemoveEvent(Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs)">
            <summary>
            Task specifies the before remove event.
            </summary>
            <param name="args">BeforeRemoveEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.ClearingEvent(Syncfusion.Blazor.Inputs.ClearingEventArgs)">
            <summary>
            Task specifies the clearing event.
            </summary>
            <param name="args">ClearingEventArgs arguments.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <param name="firstRender">true if the component rendered for the firts time.</param>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.SfUploader.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update the dropdownlist fileds.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderAsyncSettings">
            <summary>
            Specifies the Uploader Events of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChunkSize">
            <summary>
            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.
            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.
            It must be specified in bytes value.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RemoveUrl">
            <summary>
            Specifies the URL of remove action that receives the file information and handle the remove operation in server.
            <para>The remove action type must be POST request and define "RemoveFileNames" attribute to get file information that will be removed.
            This property is optional.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RetryAfterDelay">
            <summary>
            Specifies the delay time in milliseconds that the automatic retry happens after the delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.RetryCount">
            <summary>
            Specifies the number of retries that the Uploader can perform on the file failed to upload.
            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.SaveUrl">
            <summary>
            Specifies the URL of save action that will receive the upload files and save in the server.
            <para>The save action type must be POST request and define the argument as same input name used to render the component.
            The upload operations could not perform without this property.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderAsyncSettings.OnParametersSetAsync">
            <summary>
            Triggers after the component was rendered.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderButtons">
            <summary>
            Customize the default text of browse, clear, and upload buttons with plain text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Browse">
            <summary>
            Specifies the text or html content to browse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Clear">
            <summary>
            Specifies the text or html content to clear button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderButtons.Upload">
            <summary>
            Specifies the text or html content to upload button.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderButtons.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderButtons.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderButtonsProps">
            <summary>
            Specifes the uploader button properties.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderEvents">
            <summary>
            Specifies the Uploader Events of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnActionComplete">
            <summary>
            Triggers after all the selected files has processed to upload successfully or failed to server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeRemove">
            <summary>
            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.BeforeUpload">
            <summary>
            Triggers when the upload process before. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnCancel">
            <summary>
            Fires if cancel the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.ValueChange">
            <summary>
            Triggers when changes occur in uploaded file list by selecting or dropping files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkFailured">
            <summary>
            Fires if the chunk file failed to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkFailure">
            <summary>
            Fires if the chunk file failed to upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkSuccess">
            <summary>
            Fires when the chunk file uploaded successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnChunkUploadStart">
            <summary>
            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnClear">
            <summary>
            Triggers before clearing the items in file list when clicking "clear".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFailured">
            <summary>
            Triggers when the AJAX request fails on uploading or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFailure">
            <summary>
            Triggers when the AJAX request fails on uploading or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnFileListRender">
            <summary>
            Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Paused">
            <summary>
            Fires if pause the chunk file uploading.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Progressing">
            <summary>
            Triggers when uploading a file to the server using the AJAX request.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnRemove">
            <summary>
            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Rendering">
            <summary>
            DEPRECATED-Triggers before rendering each file item from the file list in a page.
            It helps to customize specific file item structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnResume">
            <summary>
            Fires if resume the paused chunk file upload.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.FileSelected">
            <summary>
            Triggers after selecting or dropping the files by adding the files in upload queue.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.Success">
            <summary>
            Triggers when the AJAX request gets success on uploading files or removing files.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderEvents.OnUploadStart">
            <summary>
            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderEvents.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderFiles">
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderFiles.Files">
            <summary>
            Specifies the uploaded file list.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderFiles.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Inputs.UploaderUploadedFiles">
            <summary>
            Specifies the list of files that will be preloaded on rendering of uploader component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent">
            <summary>
            Specifies the content that has to be passed.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Name">
            <summary>
            Specifies the name of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Size">
            <summary>
            Specifies the size of the file.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.Type">
            <summary>
            Specifies the type of the file.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.OnInitializedAsync">
            <summary>
            Triggers while initial rendering of the component.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Inputs.UploaderUploadedFiles.OnParametersSetAsync">
            <summary>
            Triggers while dynamically updating the component properties.
            </summary>
            <returns>Task.</returns>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent">
             <summary>
             Specifies the content that has to be passed.
             </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.UploaderLocale">
            <summary>
            Gets or sets the UploaderLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Browse">
            <summary>
            Gets or sets the Browse property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Clear">
            <summary>
            Gets or sets the Clear property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Upload">
            <summary>
            Gets or sets the Upload property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.DropFilesHint">
            <summary>
            Gets or sets the DropFilesHint property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidMaxFileSize">
            <summary>
            Gets or sets the InvalidMaxFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidMinFileSize">
            <summary>
            Gets or sets the InvalidMinFileSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InvalidFileType">
            <summary>
            Gets or sets the InvalidFileType property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.UploadFailedMessage">
            <summary>
            Gets or sets the UploadFailedMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.UploadSuccessMessage">
            <summary>
            Gets or sets the UploadSuccessMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.RemovedSuccessMessage">
            <summary>
            Gets or sets the RemovedSuccessMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.RemovedFailedMessage">
            <summary>
            Gets or sets the RemovedFailedMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.InProgress">
            <summary>
            Gets or sets the InProgress property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.ReadyToUploadMessage">
            <summary>
            Gets or sets the ReadyToUploadMessage property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Abort">
            <summary>
            Gets or sets the Abort property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Remove">
            <summary>
            Gets or sets the Remove property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Cancel">
            <summary>
            Gets or sets the Cancel property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Delete">
            <summary>
            Gets or sets the Delete property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.PauseUpload">
            <summary>
            Gets or sets the PauseUpload property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Pause">
            <summary>
            Gets or sets the Browse property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Resume">
            <summary>
            Gets or sets the Resume property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.Retry">
            <summary>
            Gets or sets the Retry property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.UploaderLocale.FileUploadCancel">
            <summary>
            Gets or sets the FileUploadCancel property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.NumericTextBoxLocale">
            <summary>
            Gets or sets the NumericTextBoxLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.NumericTextBoxLocale.IncrementTitle">
            <summary>
            Gets or sets the IncrementTitle property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.NumericTextBoxLocale.DecrementTitle">
            <summary>
            Gets or sets the DecrementTitle property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.FormValidatorLocale">
            <summary>
            Gets or sets the FormValidatorLocale property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Required">
            <summary>
            Gets or sets the Required property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Email">
            <summary>
            Gets or sets the Email property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Url">
            <summary>
            Gets or sets the Url property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Date">
            <summary>
            Gets or sets the Date property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.DateIso">
            <summary>
            Gets or sets the DateIso property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Creditcard">
            <summary>
            Gets or sets the Creditcard property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Number">
            <summary>
            Gets or sets the Number property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Digits">
            <summary>
            Gets or sets the Digits property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.MaxLength">
            <summary>
            Gets or sets the MaxLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.MinLength">
            <summary>
            Gets or sets the MinLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.RangeLength">
            <summary>
            Gets or sets the RangeLength property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Range">
            <summary>
            Gets or sets the Range property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Max">
            <summary>
            Gets or sets the Max property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Min">
            <summary>
            Gets or sets the Min property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Regex">
            <summary>
            Gets or sets the Regex property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Tel">
            <summary>
            Gets or sets the Tel property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.Pattern">
            <summary>
            Gets or sets the Pattern property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.FormValidatorLocale.EqualTo">
            <summary>
            Gets or sets the EqualTo property.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse">
            <summary>
            Specifies the animation to appear while collapsing the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.Effect">
            <summary>
            Specifies the animation effect for collapsing the Accordion item.
            Default animation is given as SlideUp for collapsing accordion animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationExpand">
            <summary>
            Specifies the animation to appear while expanding the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.Effect">
            <summary>
            Specifies the animation effect for expanding the Accordion item.
            Default animation is given as SlideDown for expanding accordion animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationExpand.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionAnimationSettings">
            <summary>
            A class used for configuring the Accordion animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent">
            <summary>
            Child Content for the Accordion Animation Settings.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandMode">
            <summary>
            Specifies the option to expand single or multiple panel at a time.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandMode.Single">
            <summary>
            Denotes single panel expansion.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandMode.Multiple">
            <summary>
            Denotes multiple panel expansion.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionEvents">
            <summary>
            Configure event handlers to handle the events with the Accordion component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Clicked">
            <summary>
            The event triggers when clicking anywhere within the Accordion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Created">
            <summary>
            The event triggers once the control rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Destroyed">
            <summary>
            The event triggers when the control gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Expanded">
            <summary>
            The event triggers after the item gets expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Expanding">
            <summary>
            The event triggers before the item gets expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Collapsed">
            <summary>
            The event triggers after the item gets collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionEvents.Collapsing">
            <summary>
            The event triggers before the item gets collapsed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItem">
            <summary>
            Defines accordion panels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ChildContent">
            <summary>
            Child Content for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate">
            <summary>
            Sets the header to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate">
            <summary>
            Sets the content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Content">
            <summary>
            Sets the text content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.CssClass">
            <summary>
            Defines the single/multiple classes (separated by a space) that should be used for Accordion item customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Disabled">
            <summary>
            Specifies a value that indicates whether the accordion item is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Expanded">
            <summary>
            Specify a Boolean value that indicates whether the accordion panel is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Header">
            <summary>
            Sets the header text to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.IconCss">
            <summary>
            Defines an icon with the given custom CSS class that is to be rendered before the header text.
            Add the css classes to the `IconCss` property and write the css styles to the defined class to set the images/icons.
            Adding icon is applicable only to the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Visible">
            <summary>
            Specifies a Boolean value that indicates whether the accordion item is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.Id">
            <summary>
            Sets Id attribute for accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItem.ExpandedChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItems">
            <summary>
            A list of items that are used to configure the Accordion component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItems.ChildContent">
            <summary>
            Child Content for the Accordion items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItems.Items">
            <summary>
            Specifies the collection of items for rendering Accordion items.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.AccordionItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionClickArgs">
            <summary>
            A class that holds options to control the accordion click action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.Item">
            <summary>
            Returns the current Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionClickArgs.OriginalEvent">
            <summary>
            Supplies information about a mouse event that is being raised.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandEventArgs">
            <summary>
            A class that holds options to control the expanding item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Cancel">
            <summary>
            Specifies a value that indicates to prevent the current action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Index">
            <summary>
            Returns the Accordion Item Index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.IsExpanded">
            <summary>
            Returns the expand or collapse state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Item">
            <summary>
            Returns the current Accordion Item Object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CollapseEventArgs">
            <summary>
            A class that holds options to control the collapsing item action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandedEventArgs">
            <summary>
            A class that holds options to control the expanded item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Index">
            <summary>
            Returns  the Accordion Item Index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.IsExpanded">
            <summary>
            Returns  the expand or collapse state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Item">
            <summary>
            Returns the current Accordion Item Object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ExpandedEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.CollapsedEventArgs">
            <summary>
            A class that holds options to control the collapsed item action.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AccordionItemModel">
            <summary>
            A class that holds option for Accordion Items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.HeaderTemplate">
            <summary>
            Sets the header to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.ContentTemplate">
            <summary>
            Sets the content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Content">
            <summary>
            Sets the text content to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.CssClass">
            <summary>
            Defines the single/multiple classes (separated by a space) that should be used for Accordion item customization.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Disabled">
            <summary>
            Specifies a value that indicates whether the accordion item is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Expanded">
            <summary>
            Specifies a Boolean value that indicates whether the accordion pane is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Header">
            <summary>
            Sets the header text to be displayed for the Accordion item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.IconCss">
            <summary>
            Defines an icon with the given custom CSS class that is to be rendered before the header text.
            Add the css classes to the `IconCss` property and write the css styles to the defined class to set the images/icons.
            Adding icon is applicable only to the header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Visible">
            <summary>
            Specifies a Boolean value that indicates whether the accordion item is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AccordionItemModel.Id">
            <summary>
            Sets Id attribute for accordion item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfAccordion">
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
            <summary>
            Accordion is a vertically collapsible panel that displays one or more panels at a time.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ID">
            <summary>
            Sets ID attribute for the accordion element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ChildContent">
            <summary>
            Child Content for Accordion.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Items">
            <summary>
            Gets or sets the accordion items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.LoadOnDemand">
            <summary>
            Enable or disable content of all the accordion are rendered on the initial load and maintained in the DOM.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandMode">
            <summary>
            Specifies the options to expand a single or multiple panels at a time.
            The possible values are:
            - Single: Sets to expand only one Accordion item at a time.
            - Multiple: Sets to expand more than one Accordion item at a time.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices">
            <summary>
            Specifies the index of items that is expanded on the initial load.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndicesChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Height">
            <summary>
            Specifies the height of the Accordion that can be represented in pixels/percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfAccordion.Width">
            <summary>
            Specifies the width of the Accordion that can be represented as pixels/percentage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.Select(System.Int32)">
            <summary>
            Sets focus to the specified index item header in Accordion.
            </summary>
            <param name="index">Number value that determines which item should be focused.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.SelectAsync(System.Int32)">
            <summary>
            Sets focus to the specified index item header in Accordion.
            </summary>
            <param name="index">Number value that determines which item should be focused.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.CreatedEvent">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.OnAccordionClick(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerExpandingEvent(System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerExpandedEvent(Syncfusion.Blazor.Navigations.ExpandEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerCollapsingEvent(System.Nullable{System.Int32})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfAccordion.TriggerCollapsedEvent(Syncfusion.Blazor.Navigations.ExpandEventArgs)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender">
            <summary>
            Specifies the accordion item renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.Item">
            <summary>
            Gets or sets the accordion item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.AccordionItemRender.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ID">
            <summary>
            Used to set id for menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ChildContent">
            <summary>
            Child content for menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the Menu container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items">
            <summary>
            Specifies menu items with its properties which will be rendered as ContextMenu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ShowItemOnClick">
            <summary>
            Specifies whether to show the sub menu or not on click.
            When set to true, the sub menu will open only on mouse click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableScrolling">
            <summary>
            Specifies whether to enable / disable the scrollable option in Menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.EnableItems(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            This method is used to enable or disable the menu items in the Menu based on the items and enable argument.
            </summary>
            <param name = "items">Text items that needs to be enabled/disabled.</param>
            <param name = "enable">Set `true`/`false` to enable/disable the list items.</param>
            <param name = "isUniqueId">Set `true` if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.HideItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            This method is used to hide the menu items in the Menu based on the items text.
            </summary>
            <param name = "items">Text items that needs to be hidden.</param>
            <param name = "isUniqueId">Set `true` if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.ShowItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            This method is used to show the menu items in the Menu based on the items text.
            </summary>
            <param name = "items">Text items that needs to be shown.</param>
            <param name = "isUniqueId">Set `true` if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.CloseMenu(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            To update the child properties
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.IconCss">
            <summary>
            Specifies the class to include icons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Id">
            <summary>
            Specifies the menu item id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Separator">
            <summary>
            Separator are either horizontal or vertical lines used to group menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Disabled">
            <summary>
            Specifies the menu item disable state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Hidden">
            <summary>
            Specifies the menu item hidden state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Text">
            <summary>
            Specifies the text of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.Url">
            <summary>
            Specifies the URL of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemModelBase.HtmlAttributes">
            <summary>
            Used to add additional attributes to the menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ToolbarContent">
            <summary>
            Specifies toolbar content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Item">
            <summary>
            Defines the toolbar item model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Index">
            <summary>
            Defines toolbar item index.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Dispose">
            <summary>
            Disposes unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ToolbarContent.Dispose(System.Boolean)">
            <summary>
            Dispose unmanaged resources in the Syncfusion Blazor toolbar component.
            </summary>
            <param name="disposing">Boolean value to dispose the object.</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs">
            <summary>
            A class that holds options to control the toolbar item clicked action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.IsCloseIcon">
            <summary>
            Gets or sets the close icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.TargetParentDataIndex">
            <summary>
            Gets or sets the data index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.ToolbarItemIndex">
            <summary>
            Gets or sets the toolbar item index.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs.IsPopupElement">
            <summary>
            Gets or sets the item from popup element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1">
            <summary>
            Specifies the complex list items.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.TreeOptions">
            <summary>
            Specifies the TreeOption field values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.HasChild">
            <summary>
            Specifies the treeview node has child or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.MappedData">
            <summary>
            Specifies the Treeview mapped data values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.RandomID">
            <summary>
            Specifies the Treeview node data id.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.Index">
            <summary>
            Specifies the index position of Treeview node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.ListModel">
            <summary>
            Specifies the treeview list base option model.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.ListData">
            <summary>
            Specifies the datasource of list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.TreeNodeLevel">
            <summary>
            Specifies the tree node level of treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ComplexListItems`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1">
            <summary>
            Specifies the ComplexCreateList.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListData">
            <summary>
            Specifies the datasource of list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeOptions">
            <summary>
            Specifies the TreeOption field values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeItemCreating">
            <summary>
            Specifies the TreeItemCreating event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.TreeNodeLevel">
            <summary>
            Specifies the tree node level of treeview nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListModel">
            <summary>
            Specifies the treeview list base option model.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.InvokeTreeItemCreating(`0,Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping{System.Collections.Generic.List{`0}},System.Int32)">
            <summary>
            Returns TreeItemCreatedArgs for a list item for which TreeItemCreating event invoked.
            </summary>
            <param name="item">"Specifies the item".</param>
            <param name="mappedData">"Specifies the mappedData".</param>
            <param name="nodeLevel">"Specifies the nodeLevel".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.MapSettings(Syncfusion.Blazor.Navigations.Internal.ListModel,System.Boolean)">
            <summary>
            Maps the default setting for the list generated.
            </summary>
            <param name="options">"Specifies the options field".</param>
            <param name="isField">"Specifies the isField attribute".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListBasePropertyMapper`1">
            <summary>
            ListBase Property.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.ListBasePropertyMapper`1.PropertyMapper(`1,`1)">
            <summary>
            Specifies the property mapper.
            </summary>
            <param name="customizedProp">"Specifes the customised prop".</param>
            <param name="mappedProp">"Specifies the mapped property".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex`1.GetDefaultListOptions">
            <summary>
            Sets and returns default listbase properties values to the listbase options.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1">
            <exclude/>
            <summary>
            Specifies the TreeViewListItems class.
            </summary>
            <typeparam name="TValue">"TypeParam".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1.TreeItemCreating">
            <summary>
            TreeItem creating.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewListItems`1.ItemsCreating">
            <summary>
            ItemCreating variable.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1">
            <summary>
            Specifies the TreeOption class.
            </summary>
            <typeparam name="TValue">"TValue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.ChildData">
            <summary>
            Specifies the Child data of node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.TreeViewFields">
            <summary>
            Specifies the Treeview fields value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsExpanded">
            <summary>
            Specifies the Treeview node is expanded or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsFullRowSelect">
            <summary>
            Specifies the fullrow selection enabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IconClass">
            <summary>
            Specifies the IconClass of Treeview.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsSelected">
            <summary>
            Specifies the node is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsChecked">
            <summary>
            Specifies the Treeview node checked or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.NodeLevel">
            <summary>
            Specifies the Treeview node level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsTree">
            <summary>
            Specifies the tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.NodeTemplate">
            <summary>
            Specifies the Treeview node template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.FullRowNavigate">
            <summary>
            Specifies the full row navigate of Treeview node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsEdit">
            <summary>
            Specifies the editing mode in node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsDisabled">
            <summary>
            Specifies the node disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeOptions`1.IsLoaded">
            <summary>
            Specifies the node already loaded or not in DOM
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1">
            <summary>
            Specifies the TreeItemCreatedArgs.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.TreeOptions">
            <summary>
            Specifies the TreeOptions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.NodeLevel">
            <summary>
            Specifies the NodeLevel argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.ItemData">
            <summary>
            Specifies the ItemData argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Item">
            <summary>
            Specifies the Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Options">
            <summary>
            Specifies the Options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs`1.Text">
            <summary>
            Specifies the Text.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.FieldsMapping">
            <summary>
            Specifies the Treeview field mappings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Child">
            <summary>
            Specifies the child attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Enabled">
            <summary>
            Specifies the Enabled field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Expanded">
            <summary>
            Specifies the Expanded field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.HasChildren">
            <summary>
            Specifies the HasChildren field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.HtmlAttributes">
            <summary>
            Specifies the HtmlAttributes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.IconCss">
            <summary>
            Specifies the IconCss field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.PrefixIcon">
            <summary>
            Specifies the PrefixIcon field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Id">
            <summary>
            Specifies the Id field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.ImageAttributes">
            <summary>
            Specifies the ImageAttribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.ImageUrl">
            <summary>
            Specifies the ImageUrl field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.IsChecked">
            <summary>
            Specifies the IsChecked field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Selected">
            <summary>
            Specifies the Selected field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Text">
            <summary>
            Specifies the Text field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Tooltip">
            <summary>
            Specifies the Tooltip field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Url">
            <summary>
            Specifies the Url field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.UrlAttributes">
            <summary>
            Specifies the UrlAttributes field attribute.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsMapping.Value">
            <summary>
            Specifies the value field attribute.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1">
            <summary>
            Specifies the field values Mapping.
            </summary>
            <typeparam name="T">"T".</typeparam>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Child">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Enabled">
            <summary>
            Specifies the Enabled field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Expanded">
            <summary>
            Specifies the Expanded field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.HasChildren">
            <summary>
            Specifies the HasChildren field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.IconCss">
            <summary>
            Specifies the IconCss field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.PrefixIcon">
            <summary>
            Specifies the PrefixIcon field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Id">
            <summary>
            Specifies the Id field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.ImageUrl">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.IsChecked">
            <summary>
            Specifies the IsChecked field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Selected">
            <summary>
            Specifies the Selected field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Text">
            <summary>
            Specifies the Text field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Tooltip">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Url">
            <summary>
            Specifies the URL field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.HtmlAttributes">
            <summary>
            Specifies the HtmlAttriibutes field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.ImageAttributes">
            <summary>
            Specifies the child field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.UrlAttributes">
            <summary>
            Specifies the UrlAttributes field.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping`1.Value">
            <summary>
            Specifies the Value field.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1">
            <summary>
            Specifies the item created event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.ItemData">
            <summary>
            Specifies the ItemData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.Item">
            <summary>
            Specifies the Item value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ItemCreatedArgs`1.Text">
            <summary>
            Specifies the Text of the item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping">
            <summary>
            Specifies the TreeFieldsMapping.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.ParentID">
            <summary>
            Specifies the ParentId.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.DataManager">
            <summary>
            Specifies the item DataManager.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.Query">
            <summary>
            Specifies the Query.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.TableName">
            <summary>
            Specifies the TableName.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping.Children">
            <summary>
            Specifies the Children.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ListModel">
            <summary>
            Specifies Treeview Options.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ExpandCollapse">
            <summary>
            Specifies to show collapsible icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ExpandIconClass">
            <summary>
            Specifies the customizable expand icon class.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.Fields">
            <summary>
            Specifies that fields that mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ItemNavigable">
            <summary>
            If set true to this property then the entire list will be navigate-able instead of text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ListModel.ShowIcon">
            <summary>
            Specifies to show icon.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel">
            <summary>
            Specifies class for expand / collapse animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel">
            <summary>
            Specifies the class for expand animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel.Effect">
            <summary>
            Specifies the animation effect for expanding the TreeView node.
            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel">
            <summary>
            Specifies the class for collapse animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel.Effect">
            <summary>
            Specifies the animation effect for collapsing the TreeView node.
            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsMultiSelect">
            <summary>
            Specifies the MultiSelect argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsCtrKey">
            <summary>
            Specifies the control key is pressed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsShiftKey">
            <summary>
            Specifies the shift key is pressed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.Nodes">
            <summary>
            Specifies the Node data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.IsInteracted">
            <summary>
            Specifies the nodes are selected in manual interaction or dynamic interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.Action">
            <summary>
            Specifies the action to be performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs.NodeData">
            <summary>
            Specifies the Node Data.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs">
            <summary>
            Expand event args.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs.IsLoaded">
            <summary>
            Specifies the loaded argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs.NodeLevel">
            <summary>
            Specifies the Node level.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DragLi">
            <summary>
            Specifies the Drageed List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DropLi">
            <summary>
            Specifies the Dropped List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DropParentLi">
            <summary>
            Specifies the Dropped parent List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.DragParentLi">
            <summary>
            Specifies the Dragged parent List item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.Pre">
            <summary>
            Specifies the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.SrcTree">
            <summary>
            Specifies the Source Tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.DropTreeArgs.IsExternalDrag">
            <summary>
            Specifies the external drag and drop is true or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ITreeView">
            <summary>
            Interface for SfTreeView component.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ITreeView.UpdateAnimationProperties(Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings)">
            <summary>
            Update animation settings property.
            </summary>
            <param name="animationSettings">"Specifies the animationSettings parameter".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType">
            <summary>
            An enum type that denotes the Treeview data source types.
            </summary>
            <exclude/>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.SelfReferential">
            <summary>
            Specifies 'SelfReferential' Data type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.Hierarchical">
            <summary>
            Specifies 'Hierarchical' Data type.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Internal.TreeViewDataType.RemoteData">
            <summary>
            Specifies 'RemoteData' Data type.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1">
            <summary>
            List generation of TreeView component.
            </summary>
            <typeparam name="TValue">"TValue paramater".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">"First render".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GettingQuery(Syncfusion.Blazor.Navigations.Internal.TreeFieldsMapping,System.Object)">
            <summary>
            Getting Query values for Remote data source.
            </summary>
            <param name="mapper">"Specfies the mapper field".</param>
            <param name="value">"Specifies the value".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetQuery(Syncfusion.Blazor.Data.Query)">
            <summary>
            Update Cloned query value for Remote data binding.
            </summary>
            <param name="query">"Specifies the QUERY parameter".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.SerializeModel">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.AddNodeData(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Adding treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.CheckForRemoteHasChild(System.Collections.Generic.List{System.Object})">
            <summary>
            Update Has Child after remove operation in Remote Data
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.RemoveNodes(System.String[])">
            <summary>
            Removing treeview nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetTreeViewData(System.String)">
            <summary>
            Return treeview node data.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetRemoteNodeData(System.String)">
            <summary>
            Get the node data for remote data
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.ListGeneration`1.GetNodeDetails(System.String)">
            <summary>
            Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1">
            <summary>
             A class used for configuring the TreeView fields setting properties.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue parameter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Child">
            <summary>
            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.DataSource">
            <summary>
            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Expanded">
            <summary>
            Specifies the mapping field for expand state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.HasChildren">
            <summary>
            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.HtmlAttributes">
            <summary>
            Specifies the mapping field for htmlAttributes to be added to the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.DataManager">
            <summary>
            The DataManager is used to performing data operations in applications.
            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.IconCss">
            <summary>
            Specifies the mapping field for icon class of each TreeView node that will be added before the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.PrefixIcon">
            <summary>
            Specifies the mapping field for icon class of each TreeView node that will be added first position of tree node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Id">
            <summary>
            Specifies the ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.ImageUrl">
            <summary>
            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.IsChecked">
            <summary>
            Specifies the field for checked state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.NavigateUrl">
            <summary>
            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.ParentID">
            <summary>
            Specifies the parent ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Query">
            <summary>
            This paramter will execute along with data processing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Selected">
            <summary>
            Specifies the mapping field for selected state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.TableName">
            <summary>
            Specifies the table name used to fetch data from a specific table in the server.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Text">
            <summary>
            Specifies the mapping field for text displayed as TreeView node's display text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Tooltip">
            <summary>
            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.Children">
            <summary>
            Specifies the child.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Specifies the child property update.
            </summary>
            <param name="prop">"Specifies the prop details".</param>
            <param name="details">"Specifies the details".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent">
            <summary>
            Specifies the child content for the Breadcrumb item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text">
            <summary>
            Specifies the text content of the Breadcrumb item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url">
            <summary>
            Specifies the Url of the Breadcrumb item and that will be activated while click.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the item that is used to include an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItem.HtmlAttributes">
            <exclude/>
            <summary>
            Specifies HTML attributes of Breadcrumb item and that will be added in li element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent">
            <exclude/>
            <summary>
            Specifies the child content for the Breadcrumb items.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates">
            <summary>
            To specify item and separator template for Breadcrumb items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate">
            <summary>
            Defines the Breadcrumb component item template.Here, context refers to current Breadcrumb item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate">
            <summary>
            Defines the Breadcrumb component separator template.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode">
            <summary>
            Defines the Breadcrumb component overflow mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Default">
            <summary>
            Defines overflow mode as Default.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Collapsed">
            <summary>
            Defines overflow mode as Collapsed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfBreadcrumb">
            <summary>
            Breadcrumb is a graphical user interface that help to identify or highlight the current location within a hierarchical structure of websites.
            The aim is to aware the user where they stand now in a hierarchy of website links.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url">
            <summary>
            Defines the URL based on which Breadcrumb items are generated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Items">
            <summary>
            Defines list of Breadcrumb item and that would be populated using tag directive.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem">
            <summary>
            Specifies the Url of the active Breadcrumb item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems">
            <summary>
            Specifes an integer to enable overflow behavior when the Breadcrumb items count exceeds and its based on OverflowMode property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode">
            <summary>
            Specifies the overflow mode of the Breadcrumb item when it exceeds MaxItems count. The possible values are,
            - Default: Specified MaxItems count is visible and remaing items are hidden. Hidden item will visible while click on previous item. 
            - Collapsed: Specified MaxItems count is visible and remaing items are hidden with collapsed icon. When collapsed icon is clicked all items will be visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Width">
            <summary>
            Specifies the width for Breadcrumb component container element. If the Breadcrumb items overflows, browser horizontal scroll will activated based on device.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.HtmlAttributes">
            <exclude/>
            <summary>
            Specifies HTML attributes of Breadcrumb component and that will be added in container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent">
            <exclude/>
            <summary>
            Specifies child content of Breadcrumb component.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfContextMenu`1">
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
            <summary>
            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.Filter">
            <summary>
            Specifies the filter selector for elements inside the target in that the context menu will be opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.Target">
            <summary>
            Specifies target element selector in which the ContextMenu should be opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfContextMenu`1.ShowOn">
            <summary>
            Specifies the ContextMenu triggering event name.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.Close">
            <summary>
            Closes the ContextMenu if it is opened.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.Open(System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            This method is used to open the ContextMenu in specified position. If the positions are not specified, the context menu
            will open at its rendered position.
            </summary>
            <param name = "clientX">Specifies the horizontal position of the context menu.</param>
            <param name = "clientY">Specifies the vertical position of the context menu.</param>
            <param name = "enableCollision">Specifies the collision detection of the context menu.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.InsertAfter(System.Collections.Generic.List{`0},System.String,System.Boolean)">
            <summary>
            It is used to insert the menu items after the specified menu item text.
            </summary>
            <param name = "items">Items that needs to be inserted.</param>
            <param name = "text">Text item before that the new Items will be inserted.</param>
            <param name = "isUniqueId">Set true if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.InsertBefore(System.Collections.Generic.List{`0},System.String,System.Boolean)">
            <summary>
            It is used to insert the menu items before the specified menu item text.
            </summary>
            <param name = "items">Items that needs to be inserted.</param>
            <param name = "text">Text item after that the new Items will be inserted.</param>
            <param name = "isUniqueId">Set true if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.RemoveItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            It is used to remove the menu items from the Menu based on the items text.
            </summary>
            <param name = "items">Text items that needs to be removed.</param>
            <param name = "isUniqueId">Set true if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfContextMenu`1.OpenContextMenu(System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TransitionEvent.PropertyName">
            <summary>
            Returns event name
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ActionSettingsModel">
            <summary>
            Interface for a class ActionSettings
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ActionSettingsModel.Duration">
            <summary>
            Specifies the duration to animate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ActionSettingsModel.Easing">
            <summary>
            Specifies the animation timing function.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ActionSettingsModel.Effect">
            <summary>
            Specifies the type of animation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEffect">
            <summary>
            Menu animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.SlideDown">
            <summary>
            Defines menu effect as SlideDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.None">
            <summary>
            Defines menu effect as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.ZoomIn">
            <summary>
            Defines menu effect as ZoomIn.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.MenuEffect.FadeIn">
            <summary>
            Defines menu effect as FadeIn.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.Orientation">
            <summary>
            Specifies the option for orientation mode of Menu. By default, component rendered in Horizontal orientation mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Orientation.Horizontal">
            <summary>
            Defines menu orientation as Horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.Orientation.Vertical">
            <summary>
            Defines menu orientation as Vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1">
            <summary>
            Interface for OnOpen/OnClose event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Cancel">
            <summary>
            Set true to prevent menu from opening.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Element">
            <summary>
            Specifies the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Event">
            <summary>
            Specifies the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Items">
            <summary>
            Specifies the current menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.ParentItem">
            <summary>
            Specifies the parent item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.ScrollHeight">
            <summary>
            Specifies the menu container height to show the scrollable menu.
            It is applicable only when the EnableScrolling property is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Top">
            <summary>
            Specifies the clientY position of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs`1.Left">
            <summary>
            Specifies the clientX position of the menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEventArgs`1">
            <summary>
            Interface for OnItemRender/ItemSelected event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Element">
            <summary>
            Specifies the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Event">
            <summary>
            Specifies the item select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Item">
            <summary>
            Specifies the selected item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1">
            <summary>
            Interface for Opened/Closed event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Element">
            <summary>
            Specifies the menu container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Items">
            <summary>
            Specifies the current menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs`1.ParentItem">
            <summary>
            Specifies the parent item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItemModel">
            <summary>
            Interface for MenuItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItemModel.Items">
            <summary>
            Specifies the list of menu item model.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuAnimationSettings">
            <summary>
            Specifies the animation settings for the menu open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Duration">
            <summary>
            Specifies the time duration to transform object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Easing">
            <summary>
            Specifies the easing effect applied while transform.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuAnimationSettings.Effect">
            <summary>
            Specifies the effect that shown in the sub menu transform.
            The possible effects are:
             None: Specifies the sub menu transform with no animation effect.
             SlideDown: Specifies the sub menu transform with slide down effect.
             ZoomIn: Specifies the sub menu transform with zoom in effect.
             FadeIn: Specifies the sub menu transform with fade in effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuEvents`1">
            <summary>
            Used to configure the menu events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnClose">
            <summary>
            Triggers before closing the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnItemRender">
            <summary>
            Triggers while rendering each menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.OnOpen">
            <summary>
            Triggers before opening the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Closed">
            <summary>
            Triggers while closing the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.Opened">
            <summary>
            Triggers while opening the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuEvents`1.ItemSelected">
            <summary>
            Triggers while selecting menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuFieldSettings">
            <summary>
            Configures the field options of the Menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Children">
            <summary>
            Specifies the children field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.IconCss">
            <summary>
            Specifies the CSS icon field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.ItemId">
            <summary>
            Specifies the itemId field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.ParentId">
            <summary>
            Specifies the parentId field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Separator">
            <summary>
            Specifies the separator field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Disabled">
            <summary>
            Specifies the disabled field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Hidden">
            <summary>
            Specifies the hidden field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Text">
            <summary>
            Specifies the text field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.Url">
            <summary>
            Specifies the URL field for Menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuFieldSettings.HtmlAttributes">
            <summary>
            Specifies the @attributes (additional attributes) field for Menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItem">
            <summary>
            Used to configure the items which is going to render as menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.ChildContent">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.
            Menu Item can include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Id">
            <summary>
            Specifies the id for menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Items">
            <summary>
            Specifies the sub menu items that is the array of MenuItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Separator">
            <summary>
            Specifies separator between the menu items. Separator are either horizontal or vertical lines used to group menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Disabled">
            <summary>
            Used to enable or disable the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Hidden">
            <summary>
            Used to hide or show the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Text">
            <summary>
            Specifies text for menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.Url">
            <summary>
            Specifies URL for menu item that creates the anchor link to navigate to the url provided.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItem.HtmlAttributes">
            <summary>
            You can add the additional HTML attributes such as style, title etc., to the menu item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuItems">
            <summary>
            A list of items that is used to configure menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuItems.ChildContent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.MenuTemplates`1">
            <summary>
            Used to specify templates for rendering menu items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.MenuTemplates`1.Template">
            <summary>
            Specifies the template for Menu.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfMenu`1">
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
            <summary>
            Menu is a graphical user interface that serve as navigation headers for your application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.HamburgerMode">
            <summary>
            Specifies whether to enable / disable the hamburger mode in Menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation">
            <summary>
            Specified the orientation of Menu whether it can be horizontal or vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Target">
            <summary>
            Specifies target element to open/close Menu while click in Hamburger mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfMenu`1.Title">
            <summary>
            Specifies the title text for hamburger mode in Menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.GetItemIndex(`0,System.Boolean)">
            <summary>
            This method is used to get the index of the menu item in the Menu based on the argument.
            </summary>
            <param name = "item">Item be passed to get the index.</param>
            <param name = "isUniqueId">Set `true` if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.Open">
            <summary>
            Used to open the Menu in hamburger mode.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.OpenAsync">
            <summary>
            Used to open the Menu in hamburger mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.Close">
            <summary>
            Closes the Menu if it is opened in hamburger mode.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.CloseAsync">
            <summary>
            Closes the Menu if it is opened in hamburger mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.SetItem(`0,System.String,System.Boolean)">
            <summary>
            This method is used to set the menu item in the Menu based on the argument.
            </summary>
            <param name = "item">Represents the modified item.</param>
            <param name = "itemText">Represents the Text of the existing Item which needs to be replaced with provided Item.</param>
            <param name = "isUniqueId">Set true if the provided text is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.InsertAfter(System.Collections.Generic.List{`0},System.String,System.Boolean)">
            <summary>
            It is used to insert the menu items after the specified menu item text.
            </summary>
            <param name = "items">Text items that needs to be inserted.</param>
            <param name = "text">Text item before that the new Items will be inserted.</param>
            <param name = "isUniqueId">Set true if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.InsertBefore(System.Collections.Generic.List{`0},System.String,System.Boolean)">
            <summary>
            It is used to insert the menu items before the specified menu item text.
            </summary>
            <param name = "items">Text items that needs to be inserted.</param>
            <param name = "text">Text item after that the new Items will be inserted.</param>
            <param name = "isUniqueId">Set true if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.RemoveItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            It is used to remove the menu items from the Menu based on the items text.
            </summary>
            <param name = "items">Text items that needs to be removed.</param>
            <param name = "isUniqueId">Set true if it is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfMenu`1.DocumentMouseDown(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SidebarPosition">
            <summary>
            Specifies the Sidebar positions.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarPosition.Left">
            <summary>
            Specifies the position of the Left Sidebar corresponding to the main content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarPosition.Right">
            <summary>
            Specifies the position of the Right Sidebar corresponding to the main content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SidebarType">
            <summary>
            Specifies the Sidebar types.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Slide">
            <summary>
            The sidebar translates the x and y positions of the main content area based on the sidebar width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Over">
            <summary>
            The sidebar floats over the main content area.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Push">
            <summary>
            The sidebar pushes the main content area to appear side-by-side, and shrinks the main content within the screen width.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SidebarType.Auto">
            <summary>
            Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.EventArgs">
            <summary>
            Interface for open and close events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Cancel">
            <summary>
            Determines whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Element">
            <summary>
            Returns the element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Name">
            <summary>
            Returns the event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.IsInteracted">
            <summary>
            Defines the boolean that returns true when the Sidebar is closed by user interaction, otherwise returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Top">
            <summary>
            Specifies the clientY position of the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.EventArgs.Left">
            <summary>
            Specifies the clientX position of the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ChangeEventArgs">
            <summary>
            Defines the event arguments for the change event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.Element">
            <summary>
            Returns the element reference.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.Name">
            <summary>
            Returns event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ChangeEventArgs.IsInteracted">
            <summary>
            Defines the boolean that returns true when the Sidebar is closed by user interaction, otherwise returns false.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.PersistenceValues">
            <summary>
            Interface for persistence values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.PersistenceValues.IsOpen">
            <summary>
            Gets or sets the Sidebar component is open or close.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfSidebar">
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            Partial Class SfSidebar.
            </summary>
            <summary>
            The SfSidebar component is an expandable and collapsible component that typically acts as a side container to place primary or secondary content alongside the main content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Changed">
            <summary>
            Triggers when the state(expand/collapse) of the component is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.OnClose">
            <summary>
            Triggers when the component is ready to close.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Created">
            <summary>
            Triggers when the component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Destroyed">
            <summary>
            Triggers when the component gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.OnOpen">
            <summary>
            Triggers when the component is ready to open.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ID">
            <summary>
            Sets id attribute for the sidebar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ChildContent">
            <summary>
            Specifies the child content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Animate">
            <summary>
            Enable or disable the animation transitions on expanding or collapsing the Sidebar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.CloseOnDocumentClick">
            <summary>
            Specifies whether the Sidebar needs to be closed or not when the document area is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.DockSize">
            <summary>
            Specifies the size of the Sidebar in dock state. Dock size can be set in pixel values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableDock">
            <summary>
            Specifies the docking state of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableGestures">
            <summary>
            Enables the expand or collapse while swiping in the touch devices.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnablePersistence">
            <summary>
            Enable or disable the persisting component's state between page reloads. If enabled, isOpen state will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.EnableRtl">
            <summary>
            Enable or disable rendering Sidebar in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.IsOpen">
            <summary>
            Gets or sets the Sidebar component is open or close.
            When the Sidebar type is set to `Auto`,
            the component will be expanded in the desktop and collapsed in the mobile mode regardless of the isOpen property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.IsOpenChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.MediaQuery">
            <summary>
            Specifies the media query string for resolution, when opens the Sidebar.
            Example: assigning media query value to '(min-width: 600px)' will open the sidebar component only when the provided resolution is met else the sidebar will be in closed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Position">
            <summary>
            Specifies the position of the Sidebar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ShowBackdrop">
            <summary>
            Specifies whether to apply overlay options to the main content or not when the Sidebar is in an open state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Target">
            <summary>
            Allows to place the sidebar inside the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Type">
            <summary>
            Specifies the expanding types of the Sidebar.
            `Over` - The sidebar floats over the main content area.
            `Push` - The sidebar pushes the main content area to appear side-by-side and shrinks the main content within the screen width.
            `Slide` - The sidebar translates the x and y positions of the main content area based on the sidebar width.
            The main content area will not be adjusted within the screen width.
             `Auto` - Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.Width">
            <summary>
            Specifies the width of the Sidebar. By default, the width of the Sidebar sets based on the size of its content.
            Width can also be set in pixel values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.ZIndex">
            <summary>
            Specifies the z-index of the Sidebar. It is applicable only when sidebar act as the overlay type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfSidebar.HtmlAttributes">
            <summary>
            You can add the additional input attributes such as disabled, value, and more to the root element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Hide">
            <summary>
            Hide the Sidebar component, if it is in an open state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SidebarHide">
            <summary>
            Hide the Sidebar component, if it is in an open state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Show">
            <summary>
            Shows the Sidebar component, if it is in closed state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SidebarShow">
            <summary>
            Shows the Sidebar component, if it is in closed state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.Toggle">
            <summary>
            Shows or hides the Sidebar based on the current state.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SetLocalStorage(System.String,System.String)">
            <summary>
            Update the Persistence value to local storage.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SerializeModel">
            <summary>
            Updating the persisting values to our component properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.UpdateAttributes">
            <summay>
            Updates attributes added for the Sidebar component.
            </summay>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.SetDock">
            <summary>
              Updates the dock styles and classes for the sidebar element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerChange(System.Boolean,Syncfusion.Blazor.Navigations.ChangeEventArgs)">
            <summary>
            Triggers change event.
            </summary>
            <exclude/>
            <param name="visible">visibles.</param>
            <param name="argsvalue">argsvalue.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerShow(Syncfusion.Blazor.Navigations.EventArgs)">
            <summary>
             Invoke show method from client.
            </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.TriggerHide(Syncfusion.Blazor.Navigations.EventArgs)">
            <summary>
             Invoke hide method from client.
             </summary>
            <exclude/>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfSidebar.GetProperties">
            <summary>
             Method to Get Properties.
            </summary>
            <returns>properties.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.AddEventArgs">
            <summary>
            A class that holds options to control the adding or added item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.AddedItems">
            <summary>
            Defines the added Tab item element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.AddEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.RemoveEventArgs">
            <summary>
            A class that holds options to control the removing and removed item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.RemoveEventArgs.RemovedIndex">
            <summary>
            Returns the removed Tab item index.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DragEventArgs">
            <summary>
            A class that holds options to control the dragged item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Cancel">
            <summary>
            Specify a value whether to prevent the drag action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Index">
            <summary>
            Returns the index of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.DraggedItem">
            <summary>
            Returns the index of dragged Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.DroppedItem">
            <summary>
            Returns the index of dropped Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Left">
            <summary>
            Return the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragEventArgs.Top">
            <summary>
            Return the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SelectEventArgs">
            <summary>
            A class that holds options to control the selected item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.Cancel">
            <summary>
            Specify a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.IsSwiped">
            <summary>
            Returns a value whether content selection is done through swiping or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.PreviousIndex">
            <summary>
            Returns the index of previous Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectEventArgs.SelectedIndex">
            <summary>
            Returns the index of selected Tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SelectingEventArgs">
            <summary>
            A class that holds options to control the selecting item action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.Cancel">
            <summary>
            Specifies a value whether to prevent the current action or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.IsSwiped">
            <summary>
            Returns a value whether the content selection is done through swiping or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.Name">
            <summary>
            Returns the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.PreviousIndex">
            <summary>
            Returns the index of the previous Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.SelectedIndex">
            <summary>
            Returns the index of the selected Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SelectingEventArgs.SelectingIndex">
            <summary>
            Returns the index of the selecting Tab item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.HeaderModel">
            <summary>
            A class to define the properties of a tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.IconCss">
            <summary>
            Specifies the icon class that is used to render an icon in the Tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.IconPosition">
            <summary>
            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.
            The possible values are:
            - left: Places the icon to the `left` of the item.
            - top: Places the icon on the `top` of the item.
            - right: Places the icon to the `right` end of the item.
            - bottom: Places the icon at the `bottom` of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.HeaderModel.Text">
            <summary>
            Specifies the display text of the Tab header.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItemModel">
            <summary>
            A class to define the properties of a tab Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Content">
            <summary>
            Specifies the content of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.CssClass">
            <summary>
            Sets the CSS classes to the Tab item to customize its styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Disabled">
            <summary>
            Specifies a value that indicates whether the control is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Header">
            <summary>
            The object used for configuring the Tab item header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.HeaderTemplate">
            <summary>
            Specifies the header content of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItemModel.Visible">
            <summary>
            Specifies a value that indicates whether the tab is visible or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfTab">
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
            <summary>
            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ID">
            <summary>
            Sets ID attribute for the tab element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ChildContent">
            <summary>
            Child Content for Tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Animation">
            <summary>
            Specifies the animation settings of the Tabs component. The animation effect can be applied to activate the tab with duration and delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.CssClass">
            <summary>
            Sets the CSS classes to the root element of the Tabs that helps to customize the component styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.EnablePersistence">
            <summary>
            Enable or disable persisting component's state between page reloads.
            If enabled, the tab’s selected item will be persisted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.AllowDragAndDrop">
            <summary>
            Indicates whether the Tab allows drag and drop over tab items. Tab item has been reordered based on the dropped item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.DragArea">
            <summary>
            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted
            for the draggable element movement. By default, the draggable element movement occurs with Tabitems.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.HeaderPlacement">
            <summary>
            Specifies the orientation of the Tab header.
            The possible values are:
            - Top: Places the Tab header on the top.
            - Bottom: Places the Tab header at the bottom.
            - Left: Places the Tab header at the left.
            - Right: Places the Tab header at the right.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Height">
            <summary>
            Specifies the height of the Tabs component. By default, Tab height is set based on the height of its parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Items">
            <summary>
            A list of items that are used to configure the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.LoadOn">
            <summary>
            Specifies the modes for the Tab content.
            The possible modes are:
            `Dynamic` Load the Tab content dynamically, which is rendering its content when switching its header.
            `Init` Loads all the tab contents on initial loading.
            `Demand` Loads the Tab content when required but keeps the content once it is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.OverflowMode">
            <summary>
            Specifies the display mode which will be applied when the Tabs exceeds the viewing area.
            The possible modes are:
            - Scrollable: All the elements will be displayed in a single line with horizontal scrolling enabled.
            - Popup: Tab container will hold the items that can be placed within the available space and the rest of the items will be moved to the popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ScrollStep">
            <summary>
            Specifies the scrolling distance that applies when scrolling in Tab and enabled Scrollable mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.SelectedItem">
            <summary>
            Specifies the index for activating the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.SelectedItemChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.ShowCloseButton">
            <summary>
            Specifies a value that indicates whether to show the close button in the Tab header or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTab.Width">
            <summary>
            Specifies the width of the Tabs component. By default, Tab width sets based on the width of its parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.AddTab(System.Collections.Generic.List{Syncfusion.Blazor.Navigations.TabItem},System.Int32)">
            <summary>
            Adds new items to the Tab that accepts a list of Tab items.
            </summary>
            <param name="items">A list of items that are added to the Tab.</param>
            <param name="index">Specifies an index value that determines where the items to be added.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.RemoveTab(System.Int32)">
            <summary>
            Removes a particular Tab based on index from the Tabs.
            </summary>
            <param name="index">Index of tab item that is going to be removed.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.EnableTab(System.Int32,System.Boolean)">
            <summary>
            Enables or disables a particular tab item. On passing the value as `false`, the tab will be disabled.
            </summary>
            <param name="index">Index value of target Tab item.</param>
            <param name="isEnable">Specify a Boolean value that determines whether the command should be enabled or disabled. By default, isEnable has true.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.EnableTabAsync(System.Int32,System.Boolean)">
            <summary>
            Enables or disables a particular tab item. On passing the value as `false`, the tab will be disabled.
            </summary>
            <param name="index">Index value of target Tab item.</param>
            <param name="isEnable">Specify a Boolean value that determines whether the command should be enabled or disabled. By default, isEnable has true.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.HideTab(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides a particular Tab based on the specified index.
            </summary>
            <param name="index">Index value of target item.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (false) or show (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.HideTabAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides a particular Tab based on the specified index.
            </summary>
            <param name="index">Index value of target item.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (false) or show (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Select(System.Int32)">
            <summary>
            Select (activate) a particular tab based on the specified index.
            </summary>
            <param name="index">Index is used for selecting an item from the Tab.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.SelectAsync(System.Int32)">
            <summary>
            Select (activate) a particular tab based on the specified index.
            </summary>
            <param name="index">Index is used for selecting an item from the Tab.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Disable(System.Boolean)">
            <summary>
            Specifies the value to disable or enable the Tabs component. When set to `true`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Tab will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.DisableAsync(System.Boolean)">
            <summary>
            Specifies the value to disable or enable the Tabs component. When set to `true`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Tab will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabItem(System.Int32)">
            <summary>
            Return a tab item element based on the specified index.
            </summary>
            <param name="index">Index is used for accessing tab header item element from the Tab.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.GetTabContent(System.Int32)">
            <summary>
            Returns the tab content element based on the specified index.
            </summary>
            <param name="index">Index is used for accessing tab content element from the Tab.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Refresh">
            <summary>
            Refresh the entire tabs component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.RefreshAsync">
            <summary>
            Refresh the entire tabs component.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.CreatedEvent">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.OnDragStart(System.Int32)">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.Dragged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTab.SelectingEvent(Syncfusion.Blazor.Navigations.SelectingEventArgs,System.Nullable{System.Int32})">
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationNext">
            <summary>
            Specifies the animation to appear when moving to the next Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Duration">
            <summary>
            Specifies the time duration to transform content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationNext.Effect">
            <summary>
            Specifies the animation effect for displaying the next Tab content.
            Default animation is given as SlideRightIn for next tab animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationNext.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationNext.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationPrevious">
            <summary>
            Specifies the animation to appear when moving to the previous Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Duration">
            <summary>
            Specifies the time duration to transform the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Easing">
            <summary>
            Specifies the easing effect applied when transforming the content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationPrevious.Effect">
            <summary>
            Specifies the animation effect for displaying the previous Tab content.
            Default animation is given as SlideLeftIn for previous tab animation. You can also disable the animation by setting the animation effect as none.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationPrevious.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationPrevious.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabAnimationSettings">
            <summary>
            A class used for configuring the Tab animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent">
            <summary>
            Child Content for the Tab Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.Next">
            <summary>
            Specifies the animation to appear when moving to the next Tab content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabAnimationSettings.Previous">
            <summary>
            Specifies the animation to appear when moving to the previous Tab content.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabAnimationSettings.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.HeaderPosition">
            <summary>
            Options to set the orientation of Tab header.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Top">
            <summary>
            Places the Tab header on the top.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Bottom">
            <summary>
            Places the Tab header at the bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Left">
            <summary>
            Places the Tab header on the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.HeaderPosition.Right">
            <summary>
            Places the Tab header on the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ContentLoad">
            <summary>
            Specifies the options of Tab content display mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Dynamic">
            <summary>
            The content of the selected tab alone will be loaded and available in DOM and it will be replaced with the corresponding content if you select the tab dynamically.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Init">
            <summary>
            The content of all the tabs are rendered on the initial load and maintained in the DOM.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ContentLoad.Demand">
            <summary>
            The content of the selected tab alone is loaded initially. The content of the tabs which were loaded once will be maintained in the DOM.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabEvents">
            <summary>
            Configure event handlers to handle the events with the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Added">
            <summary>
            The event triggers after adding the item to the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Adding">
            <summary>
            The event triggers before adding the tab item to the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Created">
            <summary>
            The event triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Destroyed">
            <summary>
            The event triggers when the component gets destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Removed">
            <summary>
            The event triggers after removing the item from the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Removing">
            <summary>
            The event triggers before removing the item from the Tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Selected">
            <summary>
            The event triggers after the tab item gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Selecting">
            <summary>
            The event triggers before the tab item gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.OnDragStart">
            <summary>
            The event triggers when the Tab item drag starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabEvents.Dragged">
            <summary>
            The event triggers after the tab item gets dropped.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabHeader">
            <summary>
            A class used for configuring the Tab header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.IconCss">
            <summary>
            Specifies the icon class that is used to render an icon in the Tab header.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.IconPosition">
            <summary>
            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.
            The possible values are:
            - left: Places the icon to the `left` of the item.
            - top: Places the icon on the `top` of the item.
            - right: Places the icon to the `right` end of the item.
            - bottom: Places the icon at the `bottom` of the item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabHeader.Text">
            <summary>
            Specifies the display text of the Tab header.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabHeader.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabHeader.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItem">
            <summary>
            An item object that is used to configure the Tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.ChildContent">
            <summary>
            Child Content for the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.ContentTemplate">
            <summary>
            Specifies the content template of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Content">
            <summary>
            Specifies the content of Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.CssClass">
            <summary>
            Sets the CSS classes to the Tab item to customize its styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Disabled">
            <summary>
            Specifies a value that indicates whether the control is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Header">
            <summary>
            The object used for configuring the Tab item header properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate">
            <summary>
            Specifies the header content of the Tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItem.Visible">
            <summary>
            Specifies a value that indicates whether the tab is visible or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItem.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TabItems">
            <summary>
            A list of items that are used to configure the Tabs component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItems.ChildContent">
            <summary>
            Child Content for the Tab items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TabItems.Items">
            <summary>
            A list of items that are used to configure the tab item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TabItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ClickEventArgs">
            <summary>
            A class that holds options to control the toolbar clicked action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Cancel">
            <summary>
            Defines the prevent action.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Item">
            <summary>
            Defines the current Toolbar Item Object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ClickEventArgs.OriginalEvent">
            <summary>
            Defines the current Event arguments.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemModel">
            <summary>
            A class for a toolbar Item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Click">
            <summary>
            Event triggers when `click` the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Align">
            <summary>
            Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `Align` property.
            Possible values are:
            - Left: To align commands to the left side of the Toolbar.
            - Center: To align commands at the center of the Toolbar.
            - Right: To align commands to the right side of the Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.CssClass">
            <summary>
            Defines single/multiple classes (separated by space) to be used for customization of commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Disabled">
            <summary>
            Specifies whether an item should be disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.HtmlAttributes">
            <summary>
            Defines htmlAttributes used to add custom attributes to Toolbar command.
            Supports HTML attributes such as style, class, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Id">
            <summary>
            Specifies the unique ID to be used with button or input element of Toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Overflow">
            <summary>
            Specifies the Toolbar command display area when an element's content is too large to fit available space.
            This is applicable only to `Popup` mode. Possible values are:
            - Show:  Always shows the item as the primary priority on the Toolbar.
            - Hide: Always shows the item as the secondary priority on the popup.
            - None: No priority for display, and as per normal order moves to popup when content exceeds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.PrefixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.ShowAlwaysInPopup">
            <summary>
            Defines the priority of items to display it in popup always.
            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.ShowTextOn">
            <summary>
            Specifies where the button text will be displayed on popup mode of the Toolbar.
            Possible values are:
            - Toolbar:  Text will be displayed on Toolbar only.
            - Overflow: Text will be displayed only when content overflows to popup.
            - Both: Text will be displayed on popup and Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.SuffixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned after the text content if text is available.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Template">
            <summary>
            Specifies the template that can be added as a Toolbar command.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Text">
            <summary>
            Specifies the text to be displayed on the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.TooltipText">
            <summary>
            Specifies the text to be displayed on hovering the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Type">
            <summary>
            Specifies the types of command to be rendered in the Toolbar.
            Supported types are:
            - Button: Creates the Button control with its given properties like text, prefixIcon, etc.
            - Separator: Adds a horizontal line that separates the Toolbar commands.
            - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,
            AutoComplete, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Visible">
            <summary>
            Specifies whether an item should be hidden or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ItemModel.Width">
            <summary>
            Specifies the width of the Toolbar button commands.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfToolbar">
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
            <summary>
            The Toolbar control contains a group of commands that are aligned horizontally.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ID">
            <summary>
            Sets ID attribute for toolbar element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ChildContent">
            <summary>
            Child Content for Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.AllowKeyboard">
            <summary>
            When this property is set to true, it allows the keyboard interaction in toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.CssClass">
            <summary>
            Sets the CSS classes to root element of the Toolbar that helps to customize component styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.EnableCollision">
            <summary>
            Enable or disable the popup collision.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Height">
            <summary>
            Specifies the height of the Toolbar in pixels/number/percentage. Number value is considered as pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Items">
            <summary>
            A list of items that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.OverflowMode">
            <summary>
            Specifies the Toolbar display mode when Toolbar content exceeds the viewing area.
            Possible modes are:
            - Scrollable: All the elements are displayed in a single line with horizontal scrolling enabled.
            - Popup: Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the popup.
            - MultiRow: Displays the overflow toolbar items as an in-line of a toolbar.
            - Extended: Hide the overflowing toolbar items in the next row.  Show the overflowing toolbar items when you click the expand icons.
            If the popup content overflows the height of the page, the rest of the elements will be hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.ScrollStep">
            <summary>
            Specifies the scrolling distance in scroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfToolbar.Width">
            <summary>
            Specifies the width of the Toolbar in pixels/numbers/percentage. Number value is considered as pixels.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.AddItems(System.Collections.Generic.List{Syncfusion.Blazor.Navigations.ToolbarItem},System.Int32)">
            <summary>
            Adds new items to the Toolbar that accepts an list of Toolbar items.
            </summary>
            <param name="items">A list of items to be added to the Toolbar.</param>
            <param name="index">Number value that determines where the command is to be added.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RemoveItems(System.Int32)">
            <summary>
            Removes the items from the Toolbar at the specified index.
            </summary>
            <param name="index">Index of item which is to be removed from the Toolbar.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.EnableItems(System.Collections.Generic.List{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Enables or disables the specified Toolbar item.
            </summary>
            <param name="items">A list of toolbar item index to be enabled or disabled.</param>
            <param name="isEnable">Boolean value that determines whether the command should be enabled or disabled. By default, `isEnable` is set to true.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.HideItem(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides the Toolbar item that is in the specified index.
            </summary>
            <param name="index">Index value of target item to be hidden or shown.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (true) or show (false). By default, isHide is false.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.HideItemAsync(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Shows or hides the Toolbar item that is in the specified index.
            </summary>
            <param name="index">Index value of target item to be hidden or shown.</param>
            <param name="isHide">Based on this Boolean value, item will be hide (true) or show (false). By default, isHide is false.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.Disable(System.Boolean)">
            <summary>
            Specifies the value to disable/enable the Toolbar component.
            When set to `True`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.DisableAsync(System.Boolean)">
            <summary>
            Specifies the value to disable/enable the Toolbar component.
            When set to `True`, the component will be disabled.
            </summary>
            <param name="disable">Based on this Boolean value, Toolbar will be enabled (false) or disabled (true).</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshOverflow">
            <summary>
            Refresh the whole Toolbar component without re-rendering.
            - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
            - It will refresh the Toolbar component after loading items dynamically.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshOverflowAsync">
            <summary>
            Refresh the whole Toolbar component without re-rendering.
            - It is used to manually refresh the Toolbar overflow modes such as scrollable, popup, multi row, and extended.
            - It will refresh the Toolbar component after loading items dynamically.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.Refresh">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.RefreshAsync">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfToolbar.TriggerClickEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <exclude />
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OverflowMode">
            <summary>
            Specifies the options of Toolbar display mode. Display option is considered when Toolbar content exceeds the available space.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable">
            <summary>
             Scrollable - All the elements are displayed in a single line with horizontal scrolling enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Popup">
            <summary>
             Popup - Prioritized elements are displayed on the Toolbar and the rest of elements are moved to the popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.MultiRow">
            <summary>
             MultiRow - Displays the overflow toolbar items as an in-line of a toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowMode.Extended">
            <summary>
             Extended - Hide the overflowing toolbar items in the next row. Show the overflowing toolbar items when you click the expand icons. If the popup content overflows the height of the page, the rest of the elements will be hidden.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DisplayMode">
            <summary>
            Specifies the options of where the text will be displayed in popup mode of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Both">
            <summary>
             Both - Text will be displayed on popup and Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Overflow">
            <summary>
             Overflow - Text will be displayed only when content overflows to popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.DisplayMode.Toolbar">
            <summary>
             Toolbar - Text will be displayed on Toolbar only.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemAlign">
            <summary>
            Specifies the options for aligning the Toolbar items.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Left">
            <summary>
             Left - To align commands to the left side of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Center">
            <summary>
             Center - To align commands at the center of the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemAlign.Right">
            <summary>
             Right - To align commands to the right side of the Toolbar.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ItemType">
            <summary>
            Specifies the options for supporting element types of Toolbar command.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Button">
            <summary>
             Button - Creates the Button control with its given properties like text, prefixIcon, etc.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Separator">
            <summary>
             Separator - Adds a horizontal line that separates the Toolbar commands.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ItemType.Input">
            <summary>
             Input - Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList, AutoComplete, etc.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.OverflowOption">
            <summary>
            Specifies the options of the Toolbar item display area when the Toolbar content overflows to available space.Applicable to `Popup` mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.None">
            <summary>
             None - No priority for display, and as per normal order moves to popup when content exceeds.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.Show">
            <summary>
             Show - Always shows the item as the primary priority on the Toolbar.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.OverflowOption.Hide">
            <summary>
             Hide - Always shows the item as the secondary priority on the popup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ToolbarItem">
            <summary>
            An item object that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent">
            <summary>
            Child Content for Toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.OnClick">
            <summary>
            Event triggers when click the toolbar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Align">
             <summary>
             Specifies the location for aligning Toolbar items on the Toolbar. Each command will be aligned according to the `Align` property.
             Possible values are:
             - Left: To align commands to the left side of the Toolbar.
             - Center: To align commands at the center of the Toolbar.
             - Right: To align commands to the right side of the Toolbar.
            
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.CssClass">
            <summary>
            Defines single/multiple classes (separated by space) to be used for customization of commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Disabled">
            <summary>
            Specifies whether an item should be disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.HtmlAttributes">
            <summary>
            Defines htmlAttributes used to add custom attributes to Toolbar command.
            Supports HTML attributes such as style, class, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Id">
            <summary>
            Specifies the unique ID to be used with button or input element of Toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Overflow">
            <summary>
            Specifies the Toolbar command display area when an element's content is too large to fit available space.
            This is applicable only to `Popup` mode. Possible values are:
            - Show:  Always shows the item as the primary priority on the Toolbar.
            - Hide: Always shows the item as the secondary priority on the popup.
            - None: No priority for display, and as per normal order moves to popup when content exceeds.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.PrefixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned before the text content if text is available, otherwise the icon alone will be rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ShowAlwaysInPopup">
            <summary>
            Defines the priority of items to display it in popup always.
            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.ShowTextOn">
            <summary>
            Specifies where the button text will be displayed on popup mode of the Toolbar.
            Possible values are:
            - Toolbar:  Text will be displayed on Toolbar only.
            - Overflow: Text will be displayed only when content overflows to popup.
            - Both: Text will be displayed on popup and Toolbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.SuffixIcon">
            <summary>
            Defines single/multiple classes separated by space used to specify an icon for the button.
            The icon will be positioned after the text content if text is available.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Template">
             <summary>
             Specifies the HTML element/element ID as a string that can be added as a Toolbar command.
            
             </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Text">
            <summary>
            Specifies the text to be displayed on the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.TooltipText">
            <summary>
            Specifies the text to be displayed on hovering the Toolbar button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Type">
            <summary>
            Specifies the types of command to be rendered in the Toolbar.
            Supported types are:
            - Button: Creates the Button control with its given properties like text, prefixIcon, etc.
            - Separator: Adds a horizontal line that separates the Toolbar commands.
            - Input: Creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList,
            AutoComplete, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Visible">
            <summary>
            Specifies whether an item should be hidden or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItem.Width">
            <summary>
            Specifies the width of the Toolbar button commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItem.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItem.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent in the render tree,
            and the incoming values have been assigned to properties.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ToolbarItems">
            <summary>
            A list of items that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent">
            <summary>
            Child Content for Toolbar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarItems.Items">
            <summary>
            A list of items that is used to configure Toolbar commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarItems.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ExpandAction">
            <summary>
            Defines the expand type of the TreeView node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.DoubleClick">
            <summary>
            Specifies the action on 'DoubleClick' the node expands or collapses. The expand/collapse operation happens when you double-click the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.Click">
            <summary>
            Specifies the action on 'Click' the node expands or collapses. The expand/collapse operation happens when you single-click the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.ExpandAction.None">
            <summary>
            The expand/collapse operation will not happen when you single-click or double-click the node.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SortOrder">
            <summary>
            Defines the sorting order type for TreeView.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.None">
            <summary>
            Specifies the nodes are not sorted.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.Ascending">
            <summary>
            Specifies the nodes are sorted in the 'Ascending' order.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.SortOrder.Descending">
            <summary>
            Specifies the nodes are sorted in the 'Descending' order.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeEffect">
            <summary>
            TreeView animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.SlideDown">
            <summary>
            Specifies 'SlideDown' type of animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.None">
            <summary>
            Specifies animation type 'None'.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.ZoomIn">
            <summary>
            Specifies 'ZoomIn' type of animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Navigations.TreeEffect.FadeIn">
            <summary>
            Specifies 'FadeIn' type of animation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1">
            <summary>
            Specifies class for DataSourceChanged event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1.Data">
            <summary>
            Return the updated TreeView data. The data source will be updated after performing some operation like
            drag and drop, node editing, adding and removing node. If you want to get updated data source after performing operation like
            selecting/unSelecting, checking/unChecking, expanding/collapsing the node, then you can use getTreeData method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs`1.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1">
            <summary>
            Specifies class for DataBound event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1.Data">
            <summary>
            Return the updated TreeView data. The data source will be updated after performing some operation like
            drag and drop, node editing, adding and removing node. If you want to get updated data source after performing operation like
            selecting/unSelecting, checking/unChecking, expanding/collapsing the node, then you can use getTreeData method.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DataBoundEventArgs`1.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.DragAndDropEventArgs">
            <summary>
            Specifies class for DragAndDrop event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.ClonedNode">
            <summary>
            Return the cloned element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DraggedNode">
            <summary>
            Return the currently dragged TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DraggedNodeData">
            <summary>
            Return the currently dragged node as array of JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DraggedParentNode">
            <summary>
            Return the dragged element's source parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropIndex">
            <summary>
            Returns the dragged/dropped element's target index position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropIndicator">
            <summary>
            Return the cloned element's drop status icon while dragging.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropLevel">
            <summary>
            Returns the dragged/dropped element's target level.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DropTarget">
            <summary>
            Return the dragged element's destination parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DroppedNode">
            <summary>
            Return the dropped TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.DroppedNodeData">
            <summary>
            Return the dropped node as array of JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Event">
            <summary>
            Return the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.PreventTargetExpand">
            <summary>
            Return boolean value for preventing auto-expanding of parent node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Target">
            <summary>
            Return the target element from which drag starts/end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Left">
            <summary>
            Return the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.DragAndDropEventArgs.Top">
            <summary>
            Return the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1">
            <summary>
            Specifies class for node render event arguments.
            </summary>
            <typeparam name="T">"T".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Node">
            <summary>
            Return the current rendering node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.NodeData">
            <summary>
            Return the current rendering node as JSON object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Text">
            <summary>
            Return the current rendering node text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeRenderEventArgs`1.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.FailureEventArgs">
            <summary>
            Specifies class for Failure event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.FailureEventArgs.Error">
            <summary>
            Defines the error information.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeCheckEventArgs">
            <summary>
            Specifies class for NodeCheck event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Action">
            <summary>
            Return the name of action like check or un-check.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.NodeData">
            <summary>
            Return the currently checked node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Node">
            <summary>
            Return the currently checked TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeCheckEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeClickEventArgs">
            <summary>
            Specifies class for NodeClick event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Event">
            <summary>
            Return the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Node">
            <summary>
            Return the current clicked TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.NodeData">
            <summary>
            Return the current clicked TreeView node data.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Left">
            <summary>
            Return the Client X value of target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeClickEventArgs.Top">
            <summary>
            Return the Client Y value of target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeData">
            <summary>
            Specifies class that holds the node details.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Expanded">
            <summary>
            Specifies the mapping field for expand state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.HasChildren">
            <summary>
            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Id">
            <summary>
            Specifies the ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.IsChecked">
            <summary>
            Specifies the field for checked state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.ParentID">
            <summary>
            Specifies the parent ID field mapped in dataSource.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Selected">
            <summary>
            Specifies the mapping field for selected state of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Text">
            <summary>
            Specifies the mapping field for text displayed as TreeView node's display text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeData.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeEditEventArgs">
            <summary>
            Specifies class for NodeEdit event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.InnerHtml">
            <summary>
            Gets or sets the inner HTML of TreeView node while editing.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.NewText">
            <summary>
            Return the current TreeView node new text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Node">
            <summary>
            Return the current TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.NodeData">
            <summary>
            Return the current node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.OldText">
            <summary>
            Return the current TreeView node old text.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeEditEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeExpandEventArgs">
            <summary>
            Specifies class for NodeExpand event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Event">
            <summary>
            Event argument.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Node">
            <summary>
            Return the expanded/collapsed TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.NodeData">
            <summary>
            Return the expanded/collapsed node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeExpandEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs">
            <summary>
            Specifies class for NodeKeyPress event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Event">
            <summary>
            Return the actual event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Node">
            <summary>
            Return the current active TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.NodeData">
            <summary>
            Return the current active node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Action">
            <summary>
            Return the Key Action of Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs.Key">
            <summary>
            Return the Key value of Event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.NodeSelectEventArgs">
            <summary>
            Specifies class for NodeSelect event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Action">
            <summary>
            Return the name of action like select or un-select.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Cancel">
            <summary>
            If you want to cancel this event then, set cancel as true. Otherwise, false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Node">
            <summary>
            Return the currently selected TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.NodeData">
            <summary>
            Return the currently selected node as JSON object from data source.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.NodeSelectEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.ActionEventArgs">
            <summary>
            Specifies class for denotes the event name.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ActionEventArgs.Name">
            <summary>
            Return the Event name.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreePersistenceValues">
            <summary>
            class for persistence values.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.SelectedNodes">
            <summary>
            Gets or sets SelectedNodes of the TreeView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.CheckedNodes">
            <summary>
            Gets or sets CheckedNodes of the TreeViewcomponent.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreePersistenceValues.ExpandedNodes">
            <summary>
            Gets or sets ExpandedNodes of the TreeViewcomponent.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.SfTreeView`1">
            <summary>
            Specifies the TreeView component.
            </summary>
            <summary>
            Specifies the TreeView component.
            </summary>
            <summary>
            SfTreeView component.
            </summary>
            <summary>
            The TreeView component is used to represent hierarchical data in a tree like structure with advanced functions to edit, drag and drop, select with CheckBox and more.
            TreeView can be populated from a data source such as an array of data's or from DataManager.
            </summary>
            <typeparam name="TValue">"TValue parameter".</typeparam>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">"First render parameter".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ChildContent">
            <exclude/>
            <summary>
            Get the RenderFragment content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowDragAndDrop">
            <summary>
            Indicates whether the TreeView allows drag and drop of nodes. To drag and drop a node in
            desktop, hold the mouse on the node, drag it to the target node and drop the node by releasing
            the mouse. For touch devices, drag and drop operation is performed by touch, touch move
            and touch end.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowEditing">
            <summary>
            Enables or disables editing of the text in the TreeView node. When `AllowEditing` property is set
            to true, the TreeView allows you to edit the node by double clicking the node or by navigating to
            the node and pressing F2 key.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowMultiSelection">
            <summary>
            Enables or disables multi-selection of nodes. To select multiple nodes:
             Select the nodes by holding down the CTRL key while clicking on the nodes.
             Select consecutive nodes by clicking the first node to select and hold down the SHIFT key
            and click the last node to select.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AllowTextWrap">
            <summary>
            Enables or disables to wrap the text in the TreeView node. 
            When the `AllowTextWrap` property is set to true, the TreeView node text content will wrap to the next line
            when its text content exceeds the width of the TreeView node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Animation">
            <summary>
            Specifies the type of animation applied on expanding and collapsing the nodes along with duration.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.AutoCheck">
            <summary>
            Allow us to specify the parent and child nodes to get auto check while we check or uncheck a node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckedNodes">
            <summary>
            The `CheckedNodes` property is used to set the nodes that need to be checked or
            get the ID of nodes that are currently checked in the TreeView component.
            The `checkedNodes` property depends upon the value of `showCheckBox` property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckedNodesChanged">
            <summary>
            Specifies the callback to trigger when the checked nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.CssClass">
            <summary>
            Specifies the CSS classes to be added with root element of the TreeView to help customize the appearance of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Disabled">
            <summary>
            Specifies a value that indicates whether the TreeView component is disabled or not.
            When set to true, user interaction will not be occurred in TreeView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.DropArea">
            <summary>
            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted
            for the draggable element movement. By default, the draggable element movement occurs in the entire page.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnablePersistence">
            <summary>
            Enables or disables persisting TreeView state between page reloads. If enabled, following APIs will persist.
            1. `SelectedNodes` - Represents the nodes that are selected in the TreeView component.
            2. `checkedNodes`  - Represents the nodes that are checked in the TreeView component.
            3. `expandedNodes` - Represents the nodes that are expanded in the TreeView component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandOn">
            <summary>
            Specifies the action on which the node expands or collapses. The available actions are,
             `Click` - The expand/collapse operation happens when you single-click the node in both desktop and mobile devices.
             `DblClick` - The expand/collapse operation happens when you double-click the node in both desktop and mobile devices.
             `None` - The expand/collapse operation will not happen when you single-click or double-click the node in both desktop
             and mobile devices.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandedNodes">
            <summary>
            Represents the expanded nodes in the TreeView component. We can set the nodes that need to be
            expanded or get the ID of the nodes that are currently expanded by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandedNodesChanged">
            <summary>
            Specifies the callback to trigger when the expanded nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.Fields">
            <summary>
            Specifies the data source and mapping fields to render TreeView nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.FullRowNavigable">
            <summary>
            If this property is set to true, then the entire TreeView node will be navigate-able instead of text element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.FullRowSelect">
            <summary>
            On enabling this property, the entire row of the TreeView node gets selected by clicking a node.
            When disabled only the corresponding node's text gets selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.LoadOnDemand">
            <summary>
            By default, the load on demand (Lazy load) is set to true. By disabling this property, all the tree nodes are rendered at the
            beginning itself.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SelectedNodes">
            <summary>
            Represents the selected nodes in the TreeView component. We can set the nodes that need to be
            selected or get the ID of the nodes that are currently selected by using this property.
            On enabling `AllowMultiSelection` property we can select multiple nodes and on disabling
            it we can select only a single node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SelectedNodesChanged">
            <summary>
            Specifies the callback to trigger when the selected nodes changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ShowCheckBox">
            <summary>
            Indicates that the nodes will display CheckBoxes in the TreeView.
            The CheckBox will be displayed next to the expand/collapse icon of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.SortOrder">
            <summary>
            Specifies a value that indicates whether the nodes are sorted in the ascending or descending order,
            or are not sorted at all. The available types of sort order are,
             `None` - The nodes are not sorted.
             `Ascending` - The nodes are sorted in the ascending order.
             `Descending` - The nodes are sorted in the ascending order.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.HtmlAttributes">
            <summary>
            Specify the HtmlAttributes for TreeView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.TreeViewTemplates">
            <summary>
            Specifies the custom item template of TreeView Node item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.SfTreeView`1.ID">
            <summary>
            Sets id attribute for the treeview element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateAnimationProperties(Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings)">
            <summary>
            Specifies the Animation properties.
            </summary>
            <param name="animationSettings">"Specifies the animation settings".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.AddNodes(System.Collections.Generic.List{`0},System.String)">
            <summary>
            Adds the collection of TreeView nodes based on target and index position. If target node is not specified,
            then the nodes are added as children of the given parentID or in the root level of TreeView.
            </summary>
            <param name="nodes">A list of nodes to be added to the TreeView.</param>
            <param name="target">Based on target nodes are added as children of the given parentID or in the root level of TreeView.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.BeginEdit(System.String)">
            <summary>
            Instead of clicking on the TreeView node for editing, we can enable it by using
            `BeginEdit` property. On passing the node ID or element through this property, the edit textBox
            will be created for the particular node thus allowing us to edit it.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.BeginEditAsync(System.String)">
            <summary>
            Instead of clicking on the TreeView node for editing, we can enable it by using
            `BeginEdit` property. On passing the node ID or element through this property, the edit textBox
            will be created for the particular node thus allowing us to edit it.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckAll(System.String[])">
            <summary>
            Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
            as argument to this method.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CheckAllAsync(System.String[])">
            <summary>
            Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes
            as argument to this method.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ClearState">
            <summary>
            This method clears the Expanded, Selected and Checked interaction states in the TreeView. This method is useful when changing the data source dynamically.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ClearStateAsync">
            <summary>
            This method clears the Expanded, Selected and Checked interaction states in the TreeView. This method is useful when changing the data source dynamically.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CollapseAll(System.String[])">
            <summary>
            Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
            </summary>
            <param name="nodesId">"Specifes the NodeID".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CollapseAllAsync(System.String[])">
            <summary>
            Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.
            </summary>
            <param name="nodesId">"Specifes the NodeID".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DisableNodes(System.String[])">
            <summary>
            Disables the collection of nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DisableNodesAsync(System.String[])">
            <summary>
            Disables the collection of nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableNodes(System.String[])">
            <summary>
            Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnableNodesAsync(System.String[])">
            <summary>
            Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnsureVisible(System.String)">
            <summary>
            Ensures visibility of the TreeView node by using node ID or node element.
            When many TreeView nodes are present and we need to find a particular node, `EnsureVisible` property
            helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.EnsureVisibleAsync(System.String)">
            <summary>
            Ensures visibility of the TreeView node by using node ID or node element.
            When many TreeView nodes are present and we need to find a particular node, `EnsureVisible` property
            helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandAll(System.String[])">
            <summary>
            Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.ExpandAllAsync(System.String[])">
            <summary>
            Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes.
            </summary>
            <param name="nodesId">"Specifies the NodeId".</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetAllCheckedNodes">
            <summary>
            Gets all the checked nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetDisabledNodes">
            <summary>
            Gets all the disabled nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetDisabledNodesAsync">
            <summary>
            Gets all the disabled nodes including child, whether it is loaded or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetNode(System.String)">
            <summary>
            Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Return TreeData".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetTreeData(System.String)">
            <summary>
            To get the updated data source of TreeView after performing some operation like drag and drop, node editing,
            node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.
             If you pass the ID of TreeView node as arguments for this method then it will return the updated data source
            of the corresponding node otherwise it will return the entire updated data source of TreeView.
             The updated data source also contains custom attributes if you specified in data source.
            </summary>
            <param name="node">Specifies ID of TreeView node.</param>
            <returns>"Return TreeData".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RemoveNodes(System.String[])">
            <summary>
            Removes the collection of TreeView nodes by passing the array of node details as argument to this method.
            </summary>
            <param name="nodes">Specifies the array of TreeView nodes ID.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UncheckAll(System.String[])">
            <summary>
            Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
            as argument to this method.
            </summary>
            <returns>"Task".</returns>
            <param name="nodesId">"Specifies the Id of the node".</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UncheckAllAsync(System.String[])">
            <summary>
            Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes
            as argument to this method.
            </summary>
            <returns>"Task".</returns>
            <param name="nodesId">"Specifies the Id of the node".</param>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateNode(System.String,System.String)">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newText">Specifies the new text of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.Refresh">
            <summary>
            Applies all the pending property changes and render the component again.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RefreshNode(System.String,System.Collections.Generic.List{`0})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newData">Specifies the new Data of TreeView node.</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.RefreshNodeAsync(System.String,System.Collections.Generic.List{`0})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="newData">Specifies the new Data of TreeView node.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetRootElement">
            <summary>
            Returns the route element reference of the component.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.MoveNodes(System.String[],System.String,System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Replaces the text of the TreeView node with the given text.
            </summary>
            <param name="sourceNodes">Specifies the array of TreeView nodes ID.</param>
            <param name="target">Specifies ID of TreeView node.</param>
            <param name="index">Specifies the index to place the moved nodes in the target element.</param>
            <param name="preventTargetExpand">If set to true, the target parent node will be prevented from auto expanding.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.GetPropertyChanges">
            <summary>
            Specifies the particular property is changes or not.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DropNodeAsSibling(Syncfusion.Blazor.Navigations.Internal.DropTreeArgs)">
            <summary>
            Drop Node as Sibling for TreeView component.
            </summary>
            <returns>"Task".</returns>
            <param name="args">"Specifies the DropTree argument".</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.DropNodeAsChild(Syncfusion.Blazor.Navigations.Internal.DropTreeArgs)">
            <summary>
            Drop Node as Sibling for TreeView component.
            </summary>
            <param name="args">"Specifies the DropTree argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerDragStartEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Start Event for TreeView component.
            </summary>
            <param name="args">"Node Drag Start argument".</param>
            <param name="left">"Dragged Node position".</param>
            <param name="top">"Dragged Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeDraggingEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Dragging Event for TreeView component.
            </summary>
            <param name="args">"Node Drag Start argument".</param>
            <param name="left">"Dragging Node position".</param>
            <param name="top">"Dragging Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerDragStopEvent(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="args">"Node Drop Start argument".</param>
            <param name="left">"Drag stop Node position".</param>
            <param name="top">"Drag stop Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeDropped(Syncfusion.Blazor.Navigations.DragAndDropEventArgs,System.Double,System.Double)">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="args">"Dropped argument".</param>
            <param name="left">"Dropped stop Node position".</param>
            <param name="top">"Dropped stop Node top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateExpandedNode(System.String[])">
            <summary>
            Trigger Node Drag Stop Event for TreeView component.
            </summary>
            <param name="parentNodes">"Parent node".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeSelectingEvent(Syncfusion.Blazor.Navigations.Internal.SelectionEventArgs)">
            <summary>
            Trigger Node Selecting Event for TreeView component.
            </summary>
            <param name="selectEventArgs">"Select event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeEditingEvent(Syncfusion.Blazor.Navigations.NodeEditEventArgs)">
            <summary>
            Trigger Node Editing Event for TreeView component.
            </summary>
            <param name="args">"Node Edit event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.CreatedEvent">
            <summary>
            Trigger TreeView created event.
            </summary>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeExpandingEvent(Syncfusion.Blazor.Navigations.Internal.ExpandEventArgs)">
            <summary>
            Trigger Node Expanding Event for TreeView component.
            </summary>
            <param name="arguments">"Expand event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCheckingEvent(Syncfusion.Blazor.Navigations.NodeCheckEventArgs)">
            <summary>
            Trigger Node Checking Event for TreeView component.
            </summary>
            <param name="args">"NodeCheck event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeClickingEvent(Syncfusion.Blazor.Navigations.ClickEventArgs,System.String,System.Double,System.Double)">
            <summary>
            Trigger Node Click Event for TreeView component.
            </summary>
            <param name="eventArgs">"NodeClick event argument".</param>
            <param name="id">"Clicked node id".</param>
            <param name="left">"Clicked node Left position".</param>
            <param name="top">"Clicked node Top position".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeExpandedEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Trigger Node Expanded Event for TreeView component.
            </summary>
            <param name="args">"Node Expanded event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateData(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Update the latest data source values to TreeView component (Drag and drop).
            </summary>
            <param name="dataSource">"Specifies the datasource".</param>
            <param name="isUpdateChecked">"Specifies the checked is true or not".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCollapsingEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Collapse Action for TreeView.
            </summary>
            <param name="args">"NodeCollapsing event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerKeyboardEvent(Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs,System.String,System.String,System.String)">
            <summary>
            Collapsed Action for TreeView.
            </summary>
            <param name="args">"Key press event argument".</param>
            <param name="id">"Specifies the Id".</param>
            <param name="keyAction">"Specifies the key action".</param>
            <param name="keyValue">"Specifies the Key value".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.TriggerNodeCollapsedEvent(Syncfusion.Blazor.Navigations.NodeExpandEventArgs)">
            <summary>
            Collapsed Action for TreeView.
            </summary>
            <param name="args">"NodeCollapsed event argument".</param>
            <returns>"Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.SfTreeView`1.UpdateChildProperties(System.String,System.Object)">
            <summary>
            Update child property values to TreeView component instance.
            </summary>
            <param name="key">"Specifies the key field".</param>
            <param name="details">"Specifies the details field".</param>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse">
            <summary>
            Specifies the animation to appear while collapsing the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse.ComponentDispose">
            <summary>
            Dispose the Expand animation value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand">
            <summary>
            Specifies the animation to appear while expanding the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand.OnInitializedAsync">
            <summary>
             Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewAnimationExpand.ComponentDispose">
            <summary>
            Dispose the Expand animation value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewEvents`1">
            <summary>
            The TreeView allows us to control the component by using events.
            </summary>
            <typeparam name="TValue">"Tvalue paramter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnActionFailure">
            <summary>
            Triggers when any TreeView action failed to fetch the desired results.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.Created">
            <summary>
            Triggers when the TreeView control is created successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataBound">
            <summary>
            Triggers when data source is populated in the TreeView.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.DataSourceChanged">
            <summary>
            Triggers when data source is changed in the TreeView. The data source will be changed after performing some operation like
            drag and drop, node editing, adding and removing node.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.Destroyed">
            <summary>
            Triggers when the TreeView control is destroyed successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeRender">
            <summary>
            Triggers before the TreeView node is appended to the TreeView element. It helps to customize specific nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnKeyPress">
            <summary>
            Triggers when key press is successful. It helps to customize the operations at key press.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeChecked">
            <summary>
            Triggers when the TreeView node is checked/unchecked successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeChecking">
            <summary>
            Triggers before the TreeView node is to be checked/unchecked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeClicked">
            <summary>
            Triggers when the TreeView node is clicked successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeCollapsed">
            <summary>
            Triggers when the TreeView node collapses successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeCollapsing">
            <summary>
            Triggers before the TreeView node collapses.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragStart">
            <summary>
            Triggers when the TreeView node drag (move) starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragStop">
            <summary>
            Triggers when the TreeView node dragging (move) stops.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnNodeDragged">
            <summary>
            Triggers when the TreeView node drag (move) is stopped.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeDropped">
            <summary>
            Triggers when the TreeView node is dropped on target element successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeEdited">
            <summary>
            Triggers when the TreeView node is renamed successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeEditing">
            <summary>
            Triggers before the TreeView node is renamed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeExpanded">
            <summary>
            Triggers when the TreeView node expands successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeExpanding">
            <summary>
            Triggers before the TreeView node is to be expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeSelected">
            <summary>
            Triggers when the TreeView node is selected/unselected successfully.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewEvents`1.NodeSelecting">
            <summary>
            Triggers before the TreeView node is selected/unselected.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewEvents`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1">
            <summary>
             A class used for configuring the TreeView child element fields properties.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue paramater".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1.ChildContent">
            <summary>
            Specifies the Treeview child content.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldChild`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1">
            <summary>
             A class used for configuring the TreeView fields setting properties.
            </summary>
            <typeparam name="TValue">"Specifies the TValue parameter".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.ChildContent">
            <summary>
            Specifies the child content.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.DataSourceChanged">
            <summary>
            Invokes when data source changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewFieldsSettings`1.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings">
            <summary>
            A class used for configuring the TreeView animation properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent">
            <exclude/>
            <summary>
            Child Content for the Treeview Animation Settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.Collapse">
            <summary>
            Specifies the animation to appear when collapsing the TreeView item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.Expand">
            <summary>
            Specifies the animation to appear when expanding the TreeView item.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Navigations.TreeViewTemplates`1">
            <summary>
            The TreeView component allows you to customize the look of TreeView nodes using Templates.
            </summary>
            <typeparam name="TValue">"Specifies the Tvalue".</typeparam>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.TreeViewTemplates`1.NodeTemplate">
            <summary>
            Specifies the NodeTemplate.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.TreeViewTemplates`1.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>"Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Clicked">
            <summary>
            The event will be fired on clicking the Toolbar elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Created">
            <summary>
            The event will be fired when the control is rendered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Navigations.ToolbarEvents.Destroyed">
            <summary>
            The event will be fired when the control gets destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Navigations.ToolbarEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogAnimationSettings">
            <summary>
            The class provides data for the animation to Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogAnimationSettings.Delay">
            <summary>
            Specifies the delay in milliseconds to start the animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogAnimationSettings.Duration">
            <summary>
            Specifies the duration in milliseconds that the animation takes to open or close the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogAnimationSettings.Effect">
            <summary>
            Specifies the animation name that should be applied on while opening and closing the dialog.
            If the user sets Fade animation, the dialog will open with the `FadeIn` effect and close with the `FadeOut` effect.
            The following are the list of animation effects available to configure to the dialog:
            1. Fade
            2. FadeZoom
            3. FlipLeftDown
            4. FlipLeftUp
            5. FlipRightDown
            6. FlipRightUp
            7. FlipXDown
            8. FlipXUp
            9. FlipYLeft
            10. FlipYRight
            11. SlideBottom
            12. SlideLeft
            13. SlideRight
            14. SlideTop
            15. Zoom
            16. None.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogAnimationSettings.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogButton">
            <summary>
            Provides data to configure the Dialog button properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.ChildContent">
            <summary>
            Gets or sets the content of the Spinner element.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.Content">
            <summary>
            Defines the text `content` of the Button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.CssClass">
            <summary>
            Defines the class/multiple classes separated by a space in the Button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.Disabled">
            <summary>
            Specifies a value that indicates whether the Button is `disabled`.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IconCss">
            <summary>
            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IconPosition">
            <summary>
            Positions the icon before or after the text content in the Button.
            The possible values are: Left: The icon will be positioned to the left of the text content.
            Right: The icon will be positioned to the right of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IsPrimary">
            <summary>
            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IsToggle">
            <summary>
            Makes the Button toggle, when set to `true`.
            When you click it, the state changes from normal to active.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.OnClick">
            <summary>
            Event triggers when `click` the dialog button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.Type">
            <summary>
            Specifies the type of the button.
            Possible values are Button, Submit, and Reset.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButton.IsFlat">
            <summary>
            Specifies the Flat appearance of the dialog buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogButton.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogButton.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogButtons">
            <summary>
            A list of buttons that are used to configure the Dialog buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogButtons.ChildContent">
            <summary>
            Gets or sets the content of the Dialog Button element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogButtons.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender"> Set to true if this is the first time OnAfterRender(Boolean) has been invoked.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogEvents">
            <summary>
            Configure handlers to handle the events with the Dialog component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Closed">
            <summary>
            Event triggers after the dialog has been closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Created">
            <summary>
            Event triggers when the dialog is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Destroyed">
            <summary>
            Event triggers when the dialog is destroyed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnClose">
            <summary>
            Event triggers before the dialog is closed.
            If you cancel this event, the dialog remains opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnDrag">
            <summary>
            Event triggers when the user drags the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnDragStart">
            <summary>
            Event triggers when the user begins dragging the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnDragStop">
            <summary>
            Event triggers when the user stops dragging the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnOpen">
            <summary>
            Event triggers when the dialog is being opened.
            If you cancel this event, the dialog remains closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnOverlayClick">
            <summary>
            Event triggers when the overlay of the dialog is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnOverlayModalClick">
            <summary>
            Event triggers when the overlay of the dialog is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnResizeStart">
            <summary>
            Event triggers when the user begins to resize a dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.OnResizeStop">
            <summary>
            Event triggers when the user stops to resize a dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Opened">
            <summary>
            Event triggers when a dialog is opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogEvents.Resizing">
            <summary>
            Event triggers when the user resizes the dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogPositionData">
            <summary>
            Configures to display a dialog in the custom position within the document or target.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogPositionData.X">
            <summary>
            Specifies the offset left value to position the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogPositionData.Y">
            <summary>
            Specifies the offset top value to position the dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogPositionData.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogPositionData.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogTemplates">
            <summary>
            Configure templates to display within a header, content, and footer section of Dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogTemplates.Header">
            <summary>
            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.
            The dialog will be displayed without the header if the header property is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogTemplates.Content">
            <summary>
            Specifies the value that can be displayed in the dialog's content section.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate">
            <summary>
            Defines the footer template of the dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.DialogTemplates.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.SfDialog">
            <summary>
            Represents the dialog component that displays the information and gets input from the user.
            Two types of dialog components are `Modal and Modeless(non-modal)` depending on their interaction with the parent application.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender"> Set to true if this is the first time OnAfterRender(Boolean) has been invoked.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ID">
            <summary>
            Specifies the unique identifier.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ChildContent">
            <summary>
            Sets content for the Dialog element including HTML support and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.AllowDragging">
            <summary>
            Specifies the value whether the dialog component can be dragged by the end-user.
            The dialog allows a user to drag by selecting the header and dragging it for re-positioning the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.AnimationSettings">
            <summary>
            Specifies the animation settings of the dialog component.
            The animation effect can be applied to open and close the dialog with duration and delay.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Buttons">
            <summary>
            Configures the action `Buttons` that contains button properties with primary attributes and the click events.
            One or more action buttons can be configured to the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.CloseOnEscape">
            <summary>
            Specifies the Boolean value whether the dialog can be closed on pressing the escape (ESC) key.
            that is used to control the dialog's closing behavior.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Content">
            <summary>
            Specifies the value that can be displayed in the dialog's content section.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the dialog.
            One or more custom CSS classes can be added to a dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.EnableResize">
            <summary>
            Specifies the value whether the dialog component can be resized by the end-user.
            If the enableResize is true, the dialog component creates a grip to resize it in a diagonal direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ResizeHandles">
            <summary>
            Specifies the resize handles direction in the dialog component that can be resized by the end-user.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.EnableRtl">
            <summary>
            Enable or disable rendering component in the right to left (RTL) direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.FooterTemplate">
            <summary>
            Specifies the template value that can be displayed with the dialog's footer area.
            This is an optional property and can be used only when the footer is occupied with information or custom components.
            By default, the footer is configured with the action buttons.
            If the footer template is configured to the dialog, the buttons property will be disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Header">
            <summary>
            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.
            The dialog will be displayed without the header if the header property is null.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Height">
            <summary>
            Specifies the height of the dialog component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.HtmlAttributes">
            <summary>
            You can add the additional Html attributes such as id, title, etc., to the dialog element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.IsModal">
            <summary>
            Specifies the Boolean value whether the dialog can be displayed as modal or non-modal.
            `Modal`: It creates an overlay that disables interaction with the parent application and
             the user who should respond with modal before continuing with other applications.
            `Modeless`: It does not prevent user interaction with the parent application.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Locale">
            <summary>
            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.MinHeight">
            <summary>
            Specifies the min-height of the dialog component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Position">
            <summary>
            Specifies the value where the dialog can be positioned within the document or target.
            The position can be represented with pre-configured positions or specific X and Y values.
            `X value`: left, center, right, or offset value.
            `Y value`: top, center, bottom, or offset value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ShowCloseIcon">
            <summary>
            Specifies the value that represents whether the close icon can be shown in the dialog’s title section.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Target">
            <summary>
            Specifies the target element in which the dialog should be displayed.
            The default value is null, which refers to the `Document.body` element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Visible">
            <summary>
            Specifies the value that represents whether the dialog component is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.VisibleChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.Width">
            <summary>
            Specifies the width of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfDialog.ZIndex">
            <summary>
            Specifies the z-order for rendering that determines whether the dialog is displayed
            in front or behind of another component.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.GetButton(System.Int32)">
            <summary>
            Returns the dialog button instances by index.
            Based on that, you can dynamically change the button states.
            </summary>
            <param name="index">Specifies the button index.</param>
            <returns>Returns the dialog button instances by index.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.GetButtonItems">
            <summary>
            Returns all the dialog button’s instances which are rendered in the dialog’s footer.
            Based on that, you can dynamically change the buttons states.
            </summary>
            <returns>Returns all the dialog button’s instances.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync(System.String)">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <param name="args">Specifies the interaction type.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide(System.String)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <param name="args">Specifies the interaction type.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.HideAsync(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Overloaded.
            Closes the dialog if it is in a visible state.
            </summary>
            <param name="args">Specifies the keyboard arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Hide(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.RefreshPositionAsync">
            <summary>
            Refreshes the dialog's position when the user changes its height and width dynamically.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.RefreshPosition">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ShowAsync(System.Nullable{System.Boolean})">
            <summary>
            Opens the dialog if it is in a hidden state.
            To open the dialog with full-screen width, set the parameter as true.
            </summary>
            <param name="isFullScreen">Specifies dialog will open on full screen or not.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.Show(System.Nullable{System.Boolean})">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.CreatedEvent">
            <summary>
            Method invoked after component has been rendered.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.OpenEvent(System.String)">
            <summary>
            Method invoked after dialog opened.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.CloseEvent(System.String)">
            <summary>
            Method invoked after dialog closed.
            </summary>
            <param name="classes">Specifiy the class names.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.DragStartEvent(Syncfusion.Blazor.Popups.DragStartEventArgs)">
            <summary>
            Method invoked when start to drag the dialog.
            </summary>
            <param name="args">Defines the DragStart Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.DragEvent(Syncfusion.Blazor.Popups.DragEventArgs)">
            <summary>
            Method invoked when drag the dialog.
            </summary>
            <param name="args">Defines the Drag Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.DragStopEvent(Syncfusion.Blazor.Popups.DragStopEventArgs)">
            <summary>
            Method invoked when complete the drag action.
            </summary>
            <param name="args">Defines the DragStop Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ResizeStartEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Method invoked when start to resize the dialog.
            </summary>
            <param name="args">Defines the Mouse Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ResizingEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Method invoked while resizing the dialog.
            </summary>
            <param name="args">Defines the Mouse Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ResizeStopEvent(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Method invoked after the dialog resize.
            </summary>
            <param name="args">Defines the Mouse Event arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.ShowDialog(System.Nullable{System.Boolean})">
            <summary>
            Method invoked after the dialog resize.
            </summary>
            <param name="isFullScreen">Specifies the dialog is opened on full screen or not.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfDialog.CloseDialog(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs)">
            <summary>
            Method invoked after dialog closed.
            </summary>
            <param name="args">Specifies KeyBoard arguments.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.ResizeDirection">
            <summary>
            Defines the resize handles in the dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.SouthEast">
            <summary>
            Defines edge resize of the dialog in the south east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.South">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.North">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.East">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.West">
            <summary>
            Defines border resize of the dialog in the south direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.NorthEast">
            <summary>
            Defines edge resize of the dialog in the north east direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.NorthWest">
            <summary>
            Defines edge resize of the dialog in the north west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.SouthWest">
            <summary>
            Defines edge resize of the dialog in the south west direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ResizeDirection.All">
            <summary>
            Defines border resize of the dialog in all the direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.ButtonType">
            <summary>
            Defines the type of a button in the dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ButtonType.Button">
            <summary>
            Defines ButtonType as Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ButtonType.Submit">
            <summary>
            Defines ButtonType as Submit.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.ButtonType.Reset">
            <summary>
            Defines ButtonType as Reset.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DialogEffect">
            <summary>
            Specifies the Dialog animation effects.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.Fade">
            <summary>
            Defines DialogEffect as Fade.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FadeZoom">
            <summary>
            Defines DialogEffect as FadeZoom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipLeftDown">
            <summary>
            Defines DialogEffect as FlipLeftDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipLeftUp">
            <summary>
            Defines DialogEffect as FlipLeftUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipRightDown">
            <summary>
            Defines DialogEffect as FlipRightDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipRightUp">
            <summary>
            Defines DialogEffect as FlipRightUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipXDown">
            <summary>
            Defines DialogEffect as FlipXDown.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipXUp">
            <summary>
            Defines DialogEffect as FlipXUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipYLeft">
            <summary>
            Defines DialogEffect as FlipYLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.FlipYRight">
            <summary>
            Defines DialogEffect as FlipYRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideBottom">
            <summary>
            Defines DialogEffect as SlideBottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideLeft">
            <summary>
            Defines DialogEffect as SlideLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideRight">
            <summary>
            Defines DialogEffect as SlideRight.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.SlideTop">
            <summary>
            Defines DialogEffect as SlideTop.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.Zoom">
            <summary>
            Defines DialogEffect as Zoom.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.DialogEffect.None">
            <summary>
            Defines DialogEffect as None.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.OverlayModalClickEventArgs">
            <summary>
            Provides data for overLayClick event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OverlayModalClickEventArgs.Event">
            <summary>
            Defines the mouse event arguments when the event is triggered.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OverlayModalClickEventArgs.PreventFocus">
            <summary>
            Specifies the value whether the default focus on the first focusable element in a dialog can be prevented.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.BeforeCloseEventArgs">
            <summary>
            Provides data for the BeforeClose event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.ClosedBy">
            <summary>
            Determines whether the dialog is closed by "Close Icon", "Escape", "User Action".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeCloseEventArgs.IsInteracted">
            <summary>
            Determines whether the event is triggered by interaction.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.BeforeOpenEventArgs">
            <summary>
            Provides data for the BeforeOpen event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.BeforeOpenEventArgs.MaxHeight">
            <summary>
            Specifies the value to override the max height of dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.CloseEventArgs">
            <summary>
            Provides data for the Close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.ClosedBy">
            <summary>
            Determines whether the dialog is closed by "Close Icon", "Escape", "User Action".
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.IsInteracted">
            <summary>
            Determines whether the event is triggered by interaction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CloseEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DragEventArgs">
            <summary>
            Provides data for the Dragging event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragEventArgs.Target">
            <summary>
            Returns the target element of the dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DragStartEventArgs">
            <summary>
            Provides data for the DragStart event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStartEventArgs.Target">
            <summary>
            Returns the target element of the dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.DragStopEventArgs">
            <summary>
            Provides data for the DragStop event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Event">
            <summary>
            Returns the original event arguments when triggering the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Helper">
            <summary>
            Returns the helper element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.DragStopEventArgs.Target">
            <summary>
            Returns the target element of the dialog.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.OpenEventArgs">
            <summary>
            Provides data for the DialogOpen event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Cancel">
            <summary>
            Defines whether the current action can be prevented.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Container">
            <summary>
            Returns the root container element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Element">
            <summary>
            Returns the element of the dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.OpenEventArgs.PreventFocus">
            <summary>
            Specifies the value whether the default focus on the first focusable element in a dialog can be prevented.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TargetType">
            <summary>
            Defines the types of target.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TargetType.Relative">
            <summary>
            Defines the TargetType as Relative.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TargetType.Container">
            <summary>
            Defines the TargetType as Container.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.CollisionType">
            <summary>
            Defines the types of collision.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.CollisionType.None">
            <summary>
            Defines the CollisionType as None.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.CollisionType.Flip">
            <summary>
            Defines the CollisionType as Flip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.CollisionType.Fit">
            <summary>
            Defines the CollisionType as Fit.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.PopupModel">
            <summary>
            Provides data for the PopupModel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.Collision">
            <summary>
            Specifies the collision handler settings of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.Position">
            <summary>
            Specifies the popup element position, respective to the relative element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.RelateTo">
            <summary>
            Specifies the element selector for relative container element of the popup element .Based on the relative element, popup element will be positioned.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.TargetType">
            <summary>
            Specifies the relative element type of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.OffsetX">
            <summary>
            specifies the popup element offset-x value, respective to the relative element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PopupModel.OffsetY">
            <summary>
            specifies the popup element offset-y value, respective to the relative element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.CollisionAxis">
            <summary>
             Provides information about a CollisionAxis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CollisionAxis.X">
            <summary>
            Specify the collision handler for a X-Axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.CollisionAxis.Y">
            <summary>
            specify the collision handler for a Y-Axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.PositionDataModel">
            <summary>
             Provides information about a PositionDataModel.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PositionDataModel.X">
            <summary>
            Specify the offset left value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.PositionDataModel.Y">
            <summary>
            Specify the offset top value.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.Effect">
            <summary>
            Animation effects that are applicable to the Tooltip. A different animation can be set for tooltip open and close action.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeIn">
            <summary>
            Tooltip open/close actions occur with the FadeIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeOut">
            <summary>
            Tooltip open/close actions occur with the FadeOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeZoomIn">
            <summary>
            Tooltip open/close actions occur with the FadeZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FadeZoomOut">
            <summary>
            Tooltip open/close actions occur with the FadeZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXDownIn">
            <summary>
            Tooltip open/close actions occur with the FlipXDownIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXDownOut">
            <summary>
            Tooltip open/close actions occur with the FlipXDownOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXUpIn">
            <summary>
            Tooltip open/close actions occur with the FlipXUpIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipXUpOut">
            <summary>
            Tooltip open/close actions occur with the FlipXUpOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYLeftIn">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYLeftOut">
            <summary>
            Tooltip open/close actions occur with the FlipYLeftOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYRightIn">
            <summary>
            Tooltip open/close actions occur with the FlipYRightIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.FlipYRightOut">
            <summary>
            Tooltip open/close actions occur with the FlipYRightOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.ZoomIn">
            <summary>
            Tooltip open/close actions occur with the ZoomIn animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.ZoomOut">
            <summary>
            Tooltip open/close actions occur with the ZoomOut animation effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Effect.None">
            <summary>
            Tooltip open/close actions occur without any animation effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.OpenMode">
            <summary>
            To set the open modes available for the Tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Auto">
            <summary>
            In Auto mode, the tooltip appears when you hover over the target or when the target element receives the focus.
            In mobile devices, the tooltip opens on tap and hold of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Hover">
            <summary>
            In Hover mode, the tooltip appears when you hover over the target on the desktop.
            In mobile devices, the tooltip opens on a tap and hold of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Click">
            <summary>
            In Click mode, the tooltip appears when you click a target element on the desktop.
            In mobile devices, Tooltip appears with a single tap on the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Focus">
            <summary>
            In Focus mode, Tooltip appears when you focus on a target element in desktop.
            In mobile devices, Tooltip appears with a single tap on the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.OpenMode.Custom">
            <summary>
            In Custom mode, the tooltip will not appear on any default action. You have to bind your custom events and use either open or close public methods in both desktop and mobile devices.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.Position">
            <summary>
            To set the applicable positions where the Tooltip can be displayed over specific target elements.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.TopCenter">
            <summary>
            Positions the Tooltip to the top-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.TopLeft">
            <summary>
            Positions the Tooltip to the top-left of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.TopRight">
            <summary>
            Positions the Tooltip to the top-right of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.BottomLeft">
            <summary>
            Positions the Tooltip to the bottom-left of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.BottomCenter">
            <summary>
            Positions the Tooltip to the bottom-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.BottomRight">
            <summary>
            Positions the Tooltip to the bottom-right of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.LeftTop">
            <summary>
            Positions the Tooltip to the left-top of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.LeftCenter">
            <summary>
            Positions the Tooltip to the left-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.LeftBottom">
            <summary>
            Positions the Tooltip to the left-bottom of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.RightTop">
            <summary>
            Positions the Tooltip to the right-top of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.RightCenter">
            <summary>
            Positions the Tooltip to the right-center of the target element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.Position.RightBottom">
            <summary>
            Positions the Tooltip to the right-bottom of the target element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TipPointerPosition">
            <summary>
            Applicable tip positions are attached to the Tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.Auto">
            <summary>
            Automatically adjusts the tip pointer position.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.Start">
            <summary>
            Positions the tip pointer at the start of the Tooltip element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.Middle">
            <summary>
            Positions the tip pointer in the middle of the Tooltip element.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Popups.TipPointerPosition.End">
            <summary>
            Positions the tip pointer at the end of the Tooltip element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TooltipAnimationSettings">
            <summary>
            Animation options that are common for both open and close actions of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipAnimationSettings.Delay">
            <summary>
            It is used to denote the delay value in milliseconds and indicating the waiting time before the animation begins.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipAnimationSettings.Duration">
            <summary>
            It is used to denote the duration of the animation that is completed per the animation cycle.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipAnimationSettings.Effect">
            <summary>
            It is used to apply the Animation effect on the Tooltip, during open and close actions.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TooltipEventArgs">
            <summary>
            Interface for Tooltip event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Cancel">
            <summary>
            It determines whether the current action needs to be prevented or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.CollidedPosition">
            <summary>
            It is used to denote the Collided Tooltip position.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Element">
            <summary>
            It is used to denote the Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Event">
            <summary>
            It is used to specify the current event object.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.HasText">
            <summary>
            It determines whether the tooltip content contains text character or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Top">
            <summary>
            Specifies the clientY position of the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Left">
            <summary>
            Specifies the clientX position of the target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.IsInteracted">
            <summary>
            If the event is triggered by interaction, it returns true. Otherwise, it returns false.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Name">
            <summary>
            Specifies the name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Target">
            <summary>
            It is used to denote the current target element where the Tooltip is to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipEventArgs.Type">
            <summary>
            It is used to denote the type of triggered event.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.TooltipEventArgs.Equals(System.Object)">
            <exclude/>
            <summary>
            Compares the obj.
            </summary>
            <param name="obj">obj.</param>
            <returns>="obj".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.TooltipEventArgs.GetHashCode">
            <summary>
            Gets the HashCode.
            </summary>
            <exclude/>
            <returns>int.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.AnimationModel">
            <summary>
            Interface for a class Animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.AnimationModel.Close">
            <summary>
            Animation settings to be applied to the Tooltip when it is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.AnimationModel.Open">
            <summary>
            Animation settings to be applied on the Tooltip, while it is being shown over the target.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.SfTooltip">
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
            <summary>
            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Closed">
            <summary>
            The event `Closed` will be fired when the Tooltip component gets closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Opened">
            <summary>
            The event `Opened` will be fired after the Tooltip component gets opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnClose">
            <summary>
            The event `OnClose` will be fired before the Tooltip hides from the screen.
            The Tooltip close can be prevented by setting the cancel argument value to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnCollision">
            <summary>
            The event `OnCollision` will be fired for every collision fit calculation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnOpen">
            <summary>
            The event `OnOpen` will be fired before the Tooltip is displayed over the target element.
            When one of its arguments `cancel` is set to true, the Tooltip display can be prevented.
            This event is mainly used to refresh the Tooltip positions dynamically or to set customized styles in it and so on.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OnRender">
            <summary>
            The event `OnRender` will be fired before the Tooltip and its contents will be added to the DOM.
            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.
            This event is mainly used to customize the Tooltip before it shows up on the screen.
            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Created">
            <summary>
            The event `Created` will be fired after the Tooltip component is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Destroyed">
            <summary>
            The event `Destroyed` will be fired when the Tooltip component is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OnParametersSetAsync">
            <summary>
            Method invoked when any changes in component state occurs.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">Set to true for the first time component rendering; otherwise gets false.</param>
            <returns>="Task".</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ChildContent">
            <exclude/>
            <summary>
            Defines the content which has to be passed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ID">
            <exclude/>
            <summary>
            Defines the Id of the Tooltip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ContentTemplate">
            <exclude/>
            <summary>
            Defines the content template.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Animation">
            <summary>
            It is used to customize the animation of the Tooltip while opening and closing.
            The animation property also allows you to set delay, duration, and various other effects of your choice.
            You can set the same or different animation options to the Tooltip when it is in the open or close state.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.CloseDelay">
            <summary>
            To close the Tooltip after a specified delay in millisecond.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Content">
            <summary>
            To display the content of the Tooltip which can be a string element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.CssClass">
            <summary>
            To customize the Tooltip which accepts the custom CSS class names that define specific
            user-defined styles and themes to be applied to the Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.EnableHtmlSanitizer">
            <summary>
            This property has been deprecated as we achieve this behavior by using ChildContent of render fragment type and and Content as a string value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.EnablePersistence">
            <summary>
            As there are no properties required to persist in tooltip component, this property is deprecated.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.EnableRtl">
            <summary>
            To enable or disable the rendering component in the right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.WindowCollision">
            <summary>
            It is used to set the collision target element as page viewport (window) or Tooltip element, when using the target.
            If this property is enabled, tooltip will perform the collision calculation between the target elements.
            and viewport(window) instead of Tooltip element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Height">
            <summary>
            To set the height of the Tooltip component which accepts the string values.
            When the Tooltip content gets overflowed due to the height value, then the scroll mode will be enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.IsSticky">
            <summary>
            To display the Tooltip in an open state until it is closed manually.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.MouseTrail">
            <summary>
            It allows the Tooltip to follow the mouse pointer moves over the specified target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OffsetX">
            <summary>
            It sets the space between the target and Tooltip element in X-axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OffsetY">
            <summary>
            It sets the space between the target and Tooltip element in Y-axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OpenDelay">
            <summary>
            To open the Tooltip after a specified delay in millisecond.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.OpensOn">
            <summary>
            To determine the type of open mode to display the Tooltip content.
            The available open modes are Auto, Hover, Click, Focus, and Custom.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Position">
            <summary>
            To set the position of the Tooltip element with respect to the Target element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.ShowTipPointer">
            <summary>
            To show or hide the tip pointer of the Tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Target">
            <summary>
            To denote the target selector where the Tooltip needs to be displayed.
            The target element is considered as the parent container.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.TipPointerPosition">
            <summary>
            It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.
            When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.Width">
            <summary>
            To set the width of the Tooltip component which accepts a string value.
            When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.SfTooltip.HtmlAttributes">
            <summary>
            Adds the additional html attributes to the Tooltip element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.Open(System.Nullable{Microsoft.AspNetCore.Components.ElementReference},Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to show the Tooltip on the specified target with specific animation settings.
            You can also pass the additional arguments like target element in which the tooltip should appear and animation settings for the tooltip open action.
            </summary>
            <param name="element">element.</param>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.OpenAsync(System.Nullable{Microsoft.AspNetCore.Components.ElementReference},Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to show the Tooltip on the specified target with specific animation settings.
            You can also pass the additional arguments like target element in which the tooltip should appear and animation settings for the tooltip open action.
            </summary>
            <param name="element">element.</param>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.Close(Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to hide the Tooltip with a specific animation effect. You can pass the animation settings for tooltip close action.
            </summary>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.CloseAsync(Syncfusion.Blazor.Popups.TooltipAnimationSettings)">
            <summary>
            It is used to hide the Tooltip with a specific animation effect. You can pass the animation settings for tooltip close action.
            </summary>
            <param name="animation">animation.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.Refresh">
            <summary>
            Refresh the tooltip component when the target element is dynamically used.
            </summary>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.RefreshAsync">
            <summary>
            Refresh the tooltip component when the target element is dynamically used.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.RefreshPosition(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})">
            <summary>
            Dynamically refreshes the tooltip element position based on the target element.
            </summary>
            <param name="target">target.</param>
            <returns>="Task".</returns>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.RefreshPositionAsync(System.Nullable{Microsoft.AspNetCore.Components.ElementReference})">
            <summary>
            Dynamically refreshes the tooltip element position based on the target element.
            </summary>
            <param name="target">target.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.GetEventsList">
            <summary>
            The method to get events list.
            </summary>
            <exclude/>
            <returns>eventList.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.GetProperties">
            <summary>
            The method to get Properties.
            </summary>
            <exclude/>
            <returns>properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.GetPorpertyChanges">
            <summary>
            The method to get Property changes.
            </summary>
            <exclude/>
            <returns>properties.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.CreateTooltip(System.Boolean)">
            <exclude/>
            <summary>
            Add/Removes the Tooltip Element.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.StickyClose">
            <exclude/>
            <summary>
            Closes the Tooltip Element.
            </summary>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeRenderEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before render event.
            </summary>
            <returns>="Task".</returns>
            <param name="args">args.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeCollisionEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before collision event.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeOpenEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before open event.
            </summary>
            <param name="args">args.</param>
            <returns>"Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerOpenedEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before opened event.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerBeforeCloseEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before close event.
            </summary>
            <returns>"Task".</returns>
            <param name="args">args.</param>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.SfTooltip.TriggerClosedEvent(System.String)">
            <exclude/>
            <summary>
            Triggers before closed event.
            </summary>
            <param name="args">args.</param>
            <returns>="Task".</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Popups.TooltipTemplates">
            <summary>
            Configure templates to display content within the tooltip component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent">
            <exclude/>
            <summary>
            Defines the content which has to be passed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.TooltipTemplates.Content">
            <exclude/>
            <summary>
            Defines the content to be passed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Popups.TooltipTemplates.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Popups.Internal.DialogContent.ChildContent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerEvents">
            <summary>
            Configure event handlers for the Spinner component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.Created">
            <summary>
            Event triggers after the Spinner is created.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.OnBeforeOpen">
            <summary>
            Event triggers before the Spinner is opened.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.OnBeforeClose">
            <summary>
            Event triggers before the Spinner is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEvents.Destroyed">
            <summary>
            Event triggers after the Spinner is destroyed.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SpinnerEvents.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerTemplates">
            <summary>
            Configure the template of the Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerTemplates.Template">
            <summary>
            Defines the template of the Spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SpinnerTemplates.OnInitialized">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SfSpinner">
            <summary>
            Represents the spinner component that displays when spinner is shown.
            </summary>
            <exclude/> 
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnAfterRenderAsync(System.Boolean)">
            <summary>
            Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender"> Set to true if this is the first time OnAfterRender(Boolean) has been invoked.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Label">
            <summary>
            Specifies the label for the Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.CssClass">
            <summary>
            Specifies the CSS class name that can be appended with the root element of the Spinner.
            One or more custom CSS classes can be added to a Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.ChildContent">
            <exclude/>
            <summary>
            Specified content of the Spinner element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Visible">
            <summary>
            Specifies the value that represents whether the Spinner component is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.VisibleChanged">
            <summary>
            Gets or sets a callback of the bound value.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Size">
            <summary>
            Specifies the size of the Spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.ZIndex">
            <summary>
            Specifies the z-order for the Spinner.
            By default the value is AUTO.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SfSpinner.Type">
            <summary>
            Specifies a theme of the spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.Show">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.Hide">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.ShowAsync">
            <summary>
            Shows the spinner.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.HideAsync">
            <summary>
            Hides the spinner.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.SfSpinner.OnPropertyChange(System.Collections.Generic.List{System.String})">
            <summary>
            Method invoked when property has been changed.
            </summary>
            <param name="changedKeys"> Specifies the updated properties.</param>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerType">
            <summary>
            Specify the theme that the Spinner to be rendered.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.None">
            <summary>
            Default value is None
            Automatically, picks the application-level theme.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Material">
            <summary>
            Choose to render the Material spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap4">
            <summary>
            Choose to render the Bootstrap 4 spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Fabric">
            <summary>
            Choose to render the Fabric spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Bootstrap">
            <summary>
            Choose to render the Bootstrap spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.HighContrast">
            <summary>
            Choose to render the High-contrast spinner.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.Spinner.SpinnerType.Tailwind">
            <summary>
            Choose to render the Tailwind spinner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.SpinnerEventArgs">
            <summary>
            Provides data for the OnBeforeOpen and OnBeforeClose events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.SpinnerEventArgs.Cancel">
            <summary>
            Set cancel as true to prevent showing or hiding of the spinner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.Bootstrap">
            <summary>
            Represents the Spinner's Bootstrap class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Bootstrap.Show">
            <summary>
            Gets or sets a value indicating whether visible status of the spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Bootstrap.TypeUpdate">
            <summary>
            Gets or sets a value indicating whether type of the spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.Bootstrap4">
            <summary>
            Represents the Spinner's Bootstrap 4 class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap4.ComponentDispose">
            <summary>
            Dispose the unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Bootstrap4.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.FabricHighContrast">
            <summary>
            Represents the Spinner's Fabric and High-Contrast class.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.FabricHighContrast.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.Material">
            <summary>
            Represents the Spinner Material class.
            </summary>
            <exclude/>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Material.Show">
            <summary>
            Gets or sets a value indicating whether visible status of the spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.Spinner.Internal.Material.TypeUpdate">
            <summary>
            Gets or sets a value indicating whether type of the spinner.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Material.OnInitializedAsync">
            <summary>
            Method invoked when the component is ready to start.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="M:Syncfusion.Blazor.Spinner.Internal.Material.OnParametersSetAsync">
            <summary>
            Method invoked when the component has received parameters from its parent.
            </summary>
            <returns>A System.Threading.Tasks.Task representing any asynchronous operation.</returns>
        </member>
        <member name="T:Syncfusion.Blazor.Spinner.Internal.SpinnerBase">
            <summary>
            Represents the common methods that are used in all the themes.
            </summary>
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton">
            <summary>
            ButtonGroupButton  creates a button element that triggers an event on its click action.
            It can contain a text, an image, or both.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent">
            <exclude />
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the button element. The button types and
            styles can be defined by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the button that is used to include an icon.
            Button can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Disabled">
            <summary>
            Specifies a value that indicates whether the button is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Selected">
            <summary>
            Specifies a value that indicates whether the button is selected or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name">
            <summary>
            Defines name attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value">
            <summary>
            Defines value attribute for the input element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content">
            <summary>
            Defines the text content of the button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IsToggle">
            <summary>
            Makes the button as toggleable, when set to true. When you click it, the state changes from normal to active and viceversa.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IsPrimary">
            <summary>
            Allows the appearance of the button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition">
            <summary>
            Positions the icon based on the text content in the button and its default value is Left.
            The possible values are:
            - Left: The icon will be positioned to the left of the text content.
            - Right: The icon will be positioned to the right of the text content.
            - Top: The icon will be positioned to the top of the text content.
            - Bottom: The icon will be positioned to the bottom of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as id, native events etc., to the ButtonGroup element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.SelectedChanged">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfButtonGroup">
            <summary>
            A ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior.
            It may contain DropDownButton or SplitButton component.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent">
            <exclude/>
            <summary>
            Sets content for buttongroup element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the buttongroup container element. The ButtonGroup types and
            size customizations can be achieved by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.HtmlAttributes">
            <exclude/>
            <summary>
            You can add the additional html attributes such as id, title etc., to the ButtonGroup container element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.Mode">
            <summary>
            Specifies the selection modes. The possible values are,
             `Default`: Default selection in the ButtonGroup.
             `Single`: Allows you to select a single button in the ButtonGroup.
             `Multiple`: Allows you to select more than one button in the ButtonGroup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfButtonGroup.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SelectionMode">
            <summary>
            Defines the selection mode of ButtonGroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default">
            <summary>
            Default selection in the ButtonGroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SelectionMode.Single">
            <summary>
            Allows you to select a single button in the ButtonGroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SelectionMode.Multiple">
            <summary>
            Allows you to select more than one button in the ButtonGroup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition">
            <summary>
            Defines the icon position of Split Button and DropDown Button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition.Left">
            <summary>
            To position icon left to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition.Top">
            <summary>
            To position icon above the content.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.AnimationEffect">
            <summary>
            Defines the animation effect of progress button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideLeft">
            <summary>
            To set the slide left effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideRight">
            <summary>
            To set the slide right effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideUp">
            <summary>
            To set the slide up effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.SlideDown">
            <summary>
            To set the slide down effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.ZoomIn">
            <summary>
            To set the zoom in effect.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.AnimationEffect.ZoomOut">
            <summary>
            To set the zoom out effect.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SpinPosition">
            <summary>
            Defines the spin position of progress button.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Left">
            <summary>
            To position spinner left to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Right">
            <summary>
            To position spinner right to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Top">
            <summary>
            To position spinner top to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Bottom">
            <summary>
            To position spinner bottom to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Blazor.SplitButtons.SpinPosition.Center">
            <summary>
            To position spinner at center.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs">
            <summary>
            Interface for before open / close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Cancel">
            <summary>
            Used to prevent dropdown menu open.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Element">
            <summary>
            Specifies the button or dropdown element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Event">
            <summary>
            Specifies the Event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Items">
            <summary>
            Specifies the dropdown items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.MenuEventArgs">
            <summary>
            Interface for before item render / select event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Element">
            <summary>
            Specifies the selected list element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Item">
            <summary>
            Specifies the selected dropdown item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.MenuEventArgs.Event">
            <summary>
            Specifies the selected dropdown item.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs">
            <summary>
            Interface for open/close event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs.Element">
            <summary>
            Specifies the dropdown element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs.Items">
            <summary>
            Specifies the button or dropdown items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressEventArgs">
            <summary>
            Interface for progress event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.CurrentDuration">
            <summary>
            Indicates the current duration of the progress.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.Percent">
            <summary>
            Indicates the current state of progress in percentage.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressEventArgs.Step">
            <summary>
            Specifies the interval.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.OnClose">
            <summary>
            Triggers before closing the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.OnItemRender">
            <summary>
            Triggers while rendering each Popup item of DropDownButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.OnOpen">
            <summary>
            Triggers before opening the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.Closed">
            <summary>
            Triggers while closing the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.Opened">
            <summary>
            Triggers while opening the DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents.ItemSelected">
            <summary>
            Triggers while selecting action item in DropDownButton popup.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfDropDownButton">
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
            <summary>
            DropDownButton component is used to toggle contextual overlays for displaying list of action items.
            It can contain both text and images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent">
            <summary>
            Sets content for button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content">
            <summary>
            Defines the text content of the button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the DropDownButton element. The
            DropDownButton size and styles can be customized by using this.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the DropDownButton that is used to
            include an icon. DropDownButton can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition">
            <summary>
            Positions the icon before/top of the text content in the DropDownButton. The possible values are:
            - Left: The icon will be positioned to the left of the text content.
            - Top: The icon will be positioned to the top of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Items">
            <summary>
            Specifies action items with its properties which will be rendered in DropDownButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Disabled">
            <summary>
            Specifies a value that indicates whether the DropDownButton is `Disabled` or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent">
            <summary>
            To specify the custom popup content instead of Items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the dropdown button element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.AddItems(System.Collections.Generic.List{Syncfusion.Blazor.SplitButtons.DropDownMenuItem},System.String,System.Boolean)">
            <summary>
            Adds a new item to the menu. By default, new item appends to the list as the last item,
            but you can insert based on the text parameter.
            </summary>
            <param name="items">Specifies the list of items to be added.</param>
            <param name="text">Specifies the existing item text. If specified, adds the items of the collection before this item.
            If not specified, adds the items of the collection to the end of the list.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.RemoveItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Removes the items from the menu.
            </summary>
            <param name="items">Specifies the list of items to be removed.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Toggle">
            <summary>
            To open/close DropDownButton popup based on current state of the DropDownButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfDropDownButton.BtnClick(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfProgressButton">
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
            <summary>
            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.OnClick">
            <summary>
            Triggers when button element is clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.ID">
            <summary>
            Sets id attribute for progress button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent">
            <summary>
            Sets content for progress button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.AnimationSettings">
            <summary>
            Specifies the animation settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content">
            <summary>
            Defines the text content of the progress button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.CssClass">
            <summary>
            Specifies the root CSS class of the progress button that allows customization of component’s appearance.
            The progress button types, styles, and size can be achieved by using this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Disabled">
            <summary>
            Enables or disables the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Duration">
            <summary>
            Specifies the duration of progression in the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.EnableHtmlSanitizer">
            <summary>
            Defines whether to allow the cross-scripting site or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.EnableProgress">
            <summary>
            Enables or disables the background filler UI in the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.EnableRtl">
            <summary>
            Enables or disables the Rtl support.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the progress button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the progress button that is used to include an icon.
            Progress button can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition">
            <summary>
            Positions an icon in the progress button. The possible values are:
             Left: The icon will be positioned to the left of the text content.
             Right: The icon will be positioned to the right of the text content.
             Top: The icon will be positioned at the top of the text content.
             Bottom: The icon will be positioned at the bottom of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IsPrimary">
            <summary>
            Allows the appearance of the progress button to be enhanced and visually appealing when set to true.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IsToggle">
            <summary>
            Makes the progress button toggle, when set to true. When you click it, the state changes from normal to active.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfProgressButton.SpinSettings">
            <summary>
            Specifies a spinner and its related properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.Start(System.Double)">
            <summary>
            Starts the button progress at the specified percent.
            </summary>
            <param name="percent">Specifies the Progress percent.</param>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.StartAsync(System.Double)">
            <summary>
            Starts the button progress at the specified percent.
            </summary>
            <param name="percent">Specifies the Progress percent.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.Stop">
            <summary>
            Stops the button progress.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.StopAsync">
            <summary>
            Stops the button progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.FocusIn">
            <summary>
            Sets the focus to ProgressButton.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.FocusAsync">
            <summary>
            Sets the focus to ProgressButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.ProgressComplete">
            <summary>
            Complete the button progress.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.EndProgressAsync">
            <summary>
            Complete the button progress.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.Click">
            <summary>
            Click the button element.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfProgressButton.ClickAsync">
            <summary>
            Click the button element.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings">
            <summary>
            Specifies the animation settings for the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings.Duration">
            <summary>
            Specifies the duration taken to animate.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings.Easing">
            <summary>
            Specifies the animation timing function.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings.Effect">
            <summary>
            Specifies the effect of animation.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents">
            <summary>
            Used to configure the progress button events.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.OnBegin">
            <summary>
            Triggers when the progress starts.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.OnEnd">
            <summary>
            Triggers when the progress is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.OnFailure">
            <summary>
            Triggers when the progress is incomplete.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonEvents.Progressing">
            <summary>
            Triggers in specified intervals.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings">
            <summary>
            Specifies the spin settings for the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position">
            <summary>
            Specifies the position of a spinner in the progress button. The possible values are:
             Left: The spinner will be positioned to the left of the text content.
             Right: The spinner will be positioned to the right of the text content.
             Top: The spinner will be positioned at the top of the text content.
             Bottom: The spinner will be positioned at the bottom of the text content.
             Center: The spinner will be positioned at the center of the progress button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate">
            <summary>
            Specifies the template content to be displayed in a spinner.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Width">
            <summary>
            Sets the width of a spinner.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.ClickEventArgs">
            <summary>
            Interface for Split Button click event arguments.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ClickEventArgs.Element">
            <summary>
            Specifies the primary split button element.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.ClickEventArgs.Name">
            <summary>
            Specifies name of the event.
            </summary>
        </member>
        <member name="T:Syncfusion.Blazor.SplitButtons.SfSplitButton">
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
            <summary>
            SplitButton component has primary and secondary button. Primary button is used to select 
            default action and secondary button is used to toggle contextual overlays for displaying list of 
            action items. It can contain both text and images.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent">
            <summary>
            Sets content for primary button element including HTML and its customizations.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content">
            <summary>
            Defines the text `Content` of the Button element and it will support only string type.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.CssClass">
            <summary>
            Defines class/multiple classes separated by a space in the SplitButton element. The SplitButton
            size and styles can be customized by using this.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Disabled">
            <summary>
            Specifies a value that indicates whether the SplitButton is disabled or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.EnableRtl">
            <summary>
            Enable or disable rendering component in right to left direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the SplitButton that is used to include an
            icon. SplitButton can also include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition">
            <summary>
            Positions the icon before/top of the text content in the SplitButton. The possible values are
            - Left: The icon will be positioned to the left of the text content.
            - Top: The icon will b  positioned to the top of the text content.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Items">
            <summary>
            Specifies action items with its properties which will be rendered as SplitButton secondary button popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent">
            <summary>
            Allows to specify the custom popup content instead of Items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SfSplitButton.HtmlAttributes">
            <summary>
            You can add the additional html attributes such as id, title etc., to the primary button element.
            </summary>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfSplitButton.AddItems(System.Collections.Generic.List{Syncfusion.Blazor.SplitButtons.DropDownMenuItem},System.String,System.Boolean)">
            <summary>
            Adds a new item to the menu. By default, new item appends to the list as the last item,
            but you can insert based on the text parameter.
            </summary>
            <param name="items">Specifies the list of items to be added.</param>
            <param name="text">Specifies the existing item text. If specified, adds the items of the collection before this item.
            If not specified, adds the items of the collection to the end of the list.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfSplitButton.RemoveItems(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Removes the items from the menu.
            </summary>
            <param name="items">Specifies the list of items to be removed.</param>
            <param name="isUniqueId">Set true if text parameter is a unique id.</param>
        </member>
        <member name="M:Syncfusion.Blazor.SplitButtons.SfSplitButton.Toggle">
            <summary>
            To open/close Split Button popup based on current state of the Split Button.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.OnClose">
            <summary>
            Triggers before closing the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.OnItemRender">
            <summary>
            Triggers while rendering each Popup item of SplitButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.OnOpen">
            <summary>
            Triggers before opening the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Clicked">
            <summary>
            Triggers when the primary button of SplitButton has been clicked.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Closed">
            <summary>
            Triggers while closing the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Created">
            <summary>
            Triggers once the component rendering is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.Opened">
            <summary>
            Triggers while opening the SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.SplitButtonEvents.ItemSelected">
            <summary>
            Triggers while selecting action item of SplitButton popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent">
            <summary>
            Set custom content for items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.IconCss">
            <summary>
            Defines class/multiple classes separated by a space for the item that is used to include an icon.
            Action item can include font icon and sprite image.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Separator">
            <summary>
            Specifies separator between the items. Separator are horizontal lines used to group action items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Disabled">
            <summary>
            Used to enable or disable the action items.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Text">
            <summary>
            Specifies text for item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Url">
            <summary>
            Specifies url for item that creates the anchor link to navigate to the url provided.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.Id">
            <summary>
            Specifies unique id for item.
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItem.HtmlAttributes">
            <summary>
            You can add the additional HTML attributes such as style, title etc., to the item
            </summary>
        </member>
        <member name="P:Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent">
            <exclude />
        </member>
    </members>
</doc>
